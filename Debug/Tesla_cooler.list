
Tesla_cooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08008da8  08008da8  00018da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000068c  20000000  08009270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002068c  2**0
                  CONTENTS
  8 .bss          00000294  2000068c  2000068c  0002068c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000920  20000920  0002068c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c64c  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002fe8  00000000  00000000  0003cd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c19e  00000000  00000000  0003fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0004be90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0004cbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000896d  00000000  00000000  0004dd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000053a2  00000000  00000000  000566fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005ba9f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003bc4  00000000  00000000  0005bb1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000068c 	.word	0x2000068c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d90 	.word	0x08008d90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000690 	.word	0x20000690
 80001dc:	08008d90 	.word	0x08008d90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_InitTick+0x3c>)
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_InitTick+0x40>)
{
 8000ec6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	7818      	ldrb	r0, [r3, #0]
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ed2:	6810      	ldr	r0, [r2, #0]
 8000ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ed8:	f000 fdaa 	bl	8001a30 <HAL_SYSTICK_Config>
 8000edc:	4604      	mov	r4, r0
 8000ede:	b958      	cbnz	r0, 8000ef8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	2d0f      	cmp	r5, #15
 8000ee2:	d809      	bhi.n	8000ef8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 fd6c 	bl	80019c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_InitTick+0x44>)
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	601d      	str	r5, [r3, #0]
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	20000018 	.word	0x20000018
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x20>)
{
 8000f0a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	6813      	ldr	r3, [r2, #0]
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 fd45 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffd0 	bl	8000ec0 <HAL_InitTick>
  HAL_MspInit();
 8000f20:	f002 ff32 	bl	8003d88 <HAL_MspInit>
}
 8000f24:	2000      	movs	r0, #0
 8000f26:	bd08      	pop	{r3, pc}
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_IncTick+0x10>)
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_IncTick+0x14>)
 8000f30:	6811      	ldr	r1, [r2, #0]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	440b      	add	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000710 	.word	0x20000710
 8000f40:	20000000 	.word	0x20000000

08000f44 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f44:	4b01      	ldr	r3, [pc, #4]	; (8000f4c <HAL_GetTick+0x8>)
 8000f46:	6818      	ldr	r0, [r3, #0]
}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000710 	.word	0x20000710

08000f50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fff6 	bl	8000f44 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f58:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	bf1c      	itt	ne
 8000f5c:	4b05      	ldrne	r3, [pc, #20]	; (8000f74 <HAL_Delay+0x24>)
 8000f5e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f62:	bf18      	it	ne
 8000f64:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f66:	f7ff ffed 	bl	8000f44 <HAL_GetTick>
 8000f6a:	1b40      	subs	r0, r0, r5
 8000f6c:	4284      	cmp	r4, r0
 8000f6e:	d8fa      	bhi.n	8000f66 <HAL_Delay+0x16>
  {
  }
}
 8000f70:	bd38      	pop	{r3, r4, r5, pc}
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000

08000f78 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000f78:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f7a:	6803      	ldr	r3, [r0, #0]
{
 8000f7c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f7e:	6898      	ldr	r0, [r3, #8]
 8000f80:	f000 0003 	and.w	r0, r0, #3
 8000f84:	2801      	cmp	r0, #1
 8000f86:	d001      	beq.n	8000f8c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f88:	2000      	movs	r0, #0
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	07d2      	lsls	r2, r2, #31
 8000f90:	d5fa      	bpl.n	8000f88 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	f002 020d 	and.w	r2, r2, #13
 8000f98:	2a01      	cmp	r2, #1
 8000f9a:	d11b      	bne.n	8000fd4 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	f042 0202 	orr.w	r2, r2, #2
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000fa8:	f7ff ffcc 	bl	8000f44 <HAL_GetTick>
 8000fac:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	07db      	lsls	r3, r3, #31
 8000fb4:	d5e8      	bpl.n	8000f88 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb6:	f7ff ffc5 	bl	8000f44 <HAL_GetTick>
 8000fba:	1b40      	subs	r0, r0, r5
 8000fbc:	2802      	cmp	r0, #2
 8000fbe:	d9f6      	bls.n	8000fae <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000fe4:	bd38      	pop	{r3, r4, r5, pc}
	...

08000fe8 <ADC_Enable>:
{
 8000fe8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fea:	6803      	ldr	r3, [r0, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	2a01      	cmp	r2, #1
{
 8000ff4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ff6:	d104      	bne.n	8001002 <ADC_Enable+0x1a>
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	07d2      	lsls	r2, r2, #31
 8000ffc:	d501      	bpl.n	8001002 <ADC_Enable+0x1a>
  return HAL_OK;
 8000ffe:	2000      	movs	r0, #0
 8001000:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001002:	6899      	ldr	r1, [r3, #8]
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <ADC_Enable+0x58>)
 8001006:	4211      	tst	r1, r2
 8001008:	d10f      	bne.n	800102a <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	f042 0201 	orr.w	r2, r2, #1
 8001010:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001012:	f7ff ff97 	bl	8000f44 <HAL_GetTick>
 8001016:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	07db      	lsls	r3, r3, #31
 800101e:	d4ee      	bmi.n	8000ffe <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001020:	f7ff ff90 	bl	8000f44 <HAL_GetTick>
 8001024:	1b40      	subs	r0, r0, r5
 8001026:	2802      	cmp	r0, #2
 8001028:	d9f6      	bls.n	8001018 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	bd38      	pop	{r3, r4, r5, pc}
 800103e:	bf00      	nop
 8001040:	8000003f 	.word	0x8000003f

08001044 <HAL_ADC_Init>:
{
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 800104c:	4604      	mov	r4, r0
 800104e:	2800      	cmp	r0, #0
 8001050:	f000 8091 	beq.w	8001176 <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001056:	06d2      	lsls	r2, r2, #27
 8001058:	d463      	bmi.n	8001122 <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800105a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800105c:	2b00      	cmp	r3, #0
 800105e:	d02e      	beq.n	80010be <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	00d1      	lsls	r1, r2, #3
 8001068:	d502      	bpl.n	8001070 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800106a:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800106c:	009a      	lsls	r2, r3, #2
 800106e:	d50a      	bpl.n	8001086 <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 8001070:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001072:	f023 0312 	bic.w	r3, r3, #18
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001084:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001086:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001088:	06db      	lsls	r3, r3, #27
 800108a:	d46e      	bmi.n	800116a <HAL_ADC_Init+0x126>
 800108c:	2800      	cmp	r0, #0
 800108e:	d16c      	bne.n	800116a <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001094:	f015 0504 	ands.w	r5, r5, #4
 8001098:	d167      	bne.n	800116a <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800109c:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010a0:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80010a8:	6462      	str	r2, [r4, #68]	; 0x44
 80010aa:	4a78      	ldr	r2, [pc, #480]	; (800128c <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ac:	d065      	beq.n	800117a <HAL_ADC_Init+0x136>
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d166      	bne.n	8001180 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010b6:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80010bc:	e066      	b.n	800118c <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 80010be:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80010c0:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80010c2:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80010c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80010c8:	f002 fe7a 	bl	8003dc0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	00de      	lsls	r6, r3, #3
 80010d2:	d4c5      	bmi.n	8001060 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff4f 	bl	8000f78 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010dc:	06d5      	lsls	r5, r2, #27
 80010de:	d4c0      	bmi.n	8001062 <HAL_ADC_Init+0x1e>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d1be      	bne.n	8001062 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 80010e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ea:	f023 0302 	bic.w	r3, r3, #2
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010fc:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001104:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001106:	4b62      	ldr	r3, [pc, #392]	; (8001290 <HAL_ADC_Init+0x24c>)
 8001108:	4a62      	ldr	r2, [pc, #392]	; (8001294 <HAL_ADC_Init+0x250>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001110:	230a      	movs	r3, #10
 8001112:	4353      	muls	r3, r2
            wait_loop_index--;
 8001114:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8001116:	9b00      	ldr	r3, [sp, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0a1      	beq.n	8001060 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 800111c:	9b00      	ldr	r3, [sp, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	e7f8      	b.n	8001114 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001122:	4618      	mov	r0, r3
 8001124:	e7af      	b.n	8001086 <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001126:	4293      	cmp	r3, r2
 8001128:	bf0c      	ite	eq
 800112a:	9101      	streq	r1, [sp, #4]
 800112c:	9001      	strne	r0, [sp, #4]
 800112e:	e02c      	b.n	800118a <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 8001130:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001132:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001136:	f042 0220 	orr.w	r2, r2, #32
 800113a:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	64a2      	str	r2, [r4, #72]	; 0x48
 8001144:	e052      	b.n	80011ec <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001146:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800114a:	e06d      	b.n	8001228 <HAL_ADC_Init+0x1e4>
 800114c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001150:	e06a      	b.n	8001228 <HAL_ADC_Init+0x1e4>
 8001152:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8001156:	e067      	b.n	8001228 <HAL_ADC_Init+0x1e4>
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	e064      	b.n	8001228 <HAL_ADC_Init+0x1e4>
 800115e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001162:	e061      	b.n	8001228 <HAL_ADC_Init+0x1e4>
 8001164:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001168:	e05e      	b.n	8001228 <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 800116a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800116c:	f023 0312 	bic.w	r3, r3, #18
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001176:	2001      	movs	r0, #1
 8001178:	e085      	b.n	8001286 <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800117a:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800117c:	4a46      	ldr	r2, [pc, #280]	; (8001298 <HAL_ADC_Init+0x254>)
 800117e:	e005      	b.n	800118c <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001180:	4946      	ldr	r1, [pc, #280]	; (800129c <HAL_ADC_Init+0x258>)
 8001182:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_ADC_Init+0x25c>)
 8001184:	428b      	cmp	r3, r1
 8001186:	d1ce      	bne.n	8001126 <HAL_ADC_Init+0xe2>
 8001188:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118a:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800118c:	6899      	ldr	r1, [r3, #8]
 800118e:	f001 0103 	and.w	r1, r1, #3
 8001192:	2901      	cmp	r1, #1
 8001194:	d102      	bne.n	800119c <HAL_ADC_Init+0x158>
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	07ce      	lsls	r6, r1, #31
 800119a:	d40f      	bmi.n	80011bc <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800119c:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800119e:	b139      	cbz	r1, 80011b0 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011a0:	688e      	ldr	r6, [r1, #8]
 80011a2:	f006 0603 	and.w	r6, r6, #3
 80011a6:	2e01      	cmp	r6, #1
 80011a8:	d102      	bne.n	80011b0 <HAL_ADC_Init+0x16c>
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	07c9      	lsls	r1, r1, #31
 80011ae:	d405      	bmi.n	80011bc <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011b0:	6891      	ldr	r1, [r2, #8]
 80011b2:	6866      	ldr	r6, [r4, #4]
 80011b4:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80011b8:	4331      	orrs	r1, r6
 80011ba:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80011bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80011be:	68a6      	ldr	r6, [r4, #8]
 80011c0:	69e2      	ldr	r2, [r4, #28]
 80011c2:	2901      	cmp	r1, #1
 80011c4:	68e1      	ldr	r1, [r4, #12]
 80011c6:	ea41 0106 	orr.w	r1, r1, r6
 80011ca:	bf18      	it	ne
 80011cc:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 80011d0:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 80011d4:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80011d8:	2d01      	cmp	r5, #1
 80011da:	d107      	bne.n	80011ec <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d1a7      	bne.n	8001130 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011e2:	3a01      	subs	r2, #1
 80011e4:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80011e8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011ee:	2a01      	cmp	r2, #1
 80011f0:	d01d      	beq.n	800122e <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80011f2:	4d2a      	ldr	r5, [pc, #168]	; (800129c <HAL_ADC_Init+0x258>)
 80011f4:	42ab      	cmp	r3, r5
 80011f6:	d003      	beq.n	8001200 <HAL_ADC_Init+0x1bc>
 80011f8:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80011fc:	42ab      	cmp	r3, r5
 80011fe:	d1a2      	bne.n	8001146 <HAL_ADC_Init+0x102>
 8001200:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8001204:	d0a2      	beq.n	800114c <HAL_ADC_Init+0x108>
 8001206:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800120a:	d0a2      	beq.n	8001152 <HAL_ADC_Init+0x10e>
 800120c:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8001210:	d0a2      	beq.n	8001158 <HAL_ADC_Init+0x114>
 8001212:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8001216:	d0a2      	beq.n	800115e <HAL_ADC_Init+0x11a>
 8001218:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 800121c:	d0a2      	beq.n	8001164 <HAL_ADC_Init+0x120>
 800121e:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8001222:	bf08      	it	eq
 8001224:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8001228:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800122a:	4329      	orrs	r1, r5
 800122c:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	f012 0f0c 	tst.w	r2, #12
 8001234:	d10b      	bne.n	800124e <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001236:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001238:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800123a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800123e:	f022 0202 	bic.w	r2, r2, #2
 8001242:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001244:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001246:	0052      	lsls	r2, r2, #1
 8001248:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 800124c:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800124e:	68dd      	ldr	r5, [r3, #12]
 8001250:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_ADC_Init+0x264>)
 8001252:	402a      	ands	r2, r5
 8001254:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001256:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001258:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800125a:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800125c:	bf05      	ittet	eq
 800125e:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001260:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001262:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001264:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001268:	bf06      	itte	eq
 800126a:	f021 010f 	biceq.w	r1, r1, #15
 800126e:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001270:	f022 020f 	bicne.w	r2, r2, #15
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001276:	2300      	movs	r3, #0
 8001278:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800127a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800127c:	f023 0303 	bic.w	r3, r3, #3
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001286:	b016      	add	sp, #88	; 0x58
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	bf00      	nop
 800128c:	50000100 	.word	0x50000100
 8001290:	20000018 	.word	0x20000018
 8001294:	000f4240 	.word	0x000f4240
 8001298:	50000300 	.word	0x50000300
 800129c:	50000400 	.word	0x50000400
 80012a0:	50000500 	.word	0x50000500
 80012a4:	50000700 	.word	0x50000700
 80012a8:	fff0c007 	.word	0xfff0c007

080012ac <HAL_ADC_Start>:
{
 80012ac:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ae:	6803      	ldr	r3, [r0, #0]
 80012b0:	689d      	ldr	r5, [r3, #8]
 80012b2:	f015 0504 	ands.w	r5, r5, #4
{
 80012b6:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b8:	f040 809d 	bne.w	80013f6 <HAL_ADC_Start+0x14a>
    __HAL_LOCK(hadc);
 80012bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f000 8098 	beq.w	80013f6 <HAL_ADC_Start+0x14a>
 80012c6:	2301      	movs	r3, #1
 80012c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 80012cc:	f7ff fe8c 	bl	8000fe8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80012d0:	2800      	cmp	r0, #0
 80012d2:	f040 808d 	bne.w	80013f0 <HAL_ADC_Start+0x144>
      ADC_STATE_CLR_SET(hadc->State,
 80012d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ec:	d002      	beq.n	80012f4 <HAL_ADC_Start+0x48>
 80012ee:	4a43      	ldr	r2, [pc, #268]	; (80013fc <HAL_ADC_Start+0x150>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d117      	bne.n	8001324 <HAL_ADC_Start+0x78>
 80012f4:	4a42      	ldr	r2, [pc, #264]	; (8001400 <HAL_ADC_Start+0x154>)
 80012f6:	6892      	ldr	r2, [r2, #8]
 80012f8:	06d1      	lsls	r1, r2, #27
 80012fa:	d005      	beq.n	8001308 <HAL_ADC_Start+0x5c>
 80012fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001300:	d002      	beq.n	8001308 <HAL_ADC_Start+0x5c>
 8001302:	4a40      	ldr	r2, [pc, #256]	; (8001404 <HAL_ADC_Start+0x158>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d11a      	bne.n	800133e <HAL_ADC_Start+0x92>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001308:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800130a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800130e:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	0195      	lsls	r5, r2, #6
 8001314:	d521      	bpl.n	800135a <HAL_ADC_Start+0xae>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001316:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001318:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800131c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001320:	6462      	str	r2, [r4, #68]	; 0x44
 8001322:	e01a      	b.n	800135a <HAL_ADC_Start+0xae>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001324:	4a38      	ldr	r2, [pc, #224]	; (8001408 <HAL_ADC_Start+0x15c>)
 8001326:	6892      	ldr	r2, [r2, #8]
 8001328:	06d2      	lsls	r2, r2, #27
 800132a:	d0ed      	beq.n	8001308 <HAL_ADC_Start+0x5c>
 800132c:	4a35      	ldr	r2, [pc, #212]	; (8001404 <HAL_ADC_Start+0x158>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d0ea      	beq.n	8001308 <HAL_ADC_Start+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001332:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001334:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001338:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800133a:	4a32      	ldr	r2, [pc, #200]	; (8001404 <HAL_ADC_Start+0x158>)
 800133c:	e008      	b.n	8001350 <HAL_ADC_Start+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800133e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001340:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001344:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001346:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <HAL_ADC_Start+0x150>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d1f6      	bne.n	800133a <HAL_ADC_Start+0x8e>
 800134c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001350:	68d2      	ldr	r2, [r2, #12]
 8001352:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8001356:	2a00      	cmp	r2, #0
 8001358:	d1dd      	bne.n	8001316 <HAL_ADC_Start+0x6a>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800135c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001360:	bf1c      	itt	ne
 8001362:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 8001364:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001368:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800136a:	2200      	movs	r2, #0
 800136c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001374:	f04f 021c 	mov.w	r2, #28
 8001378:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800137a:	d002      	beq.n	8001382 <HAL_ADC_Start+0xd6>
 800137c:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_ADC_Start+0x150>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d108      	bne.n	8001394 <HAL_ADC_Start+0xe8>
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_ADC_Start+0x154>)
 8001384:	6891      	ldr	r1, [r2, #8]
 8001386:	06c9      	lsls	r1, r1, #27
 8001388:	d118      	bne.n	80013bc <HAL_ADC_Start+0x110>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_ADC_Start+0x15c>)
 8001396:	6892      	ldr	r2, [r2, #8]
 8001398:	06d2      	lsls	r2, r2, #27
 800139a:	d0f6      	beq.n	800138a <HAL_ADC_Start+0xde>
 800139c:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_ADC_Start+0x15c>)
 800139e:	6892      	ldr	r2, [r2, #8]
 80013a0:	f002 021f 	and.w	r2, r2, #31
 80013a4:	2a05      	cmp	r2, #5
 80013a6:	d0f0      	beq.n	800138a <HAL_ADC_Start+0xde>
 80013a8:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_ADC_Start+0x15c>)
 80013aa:	6892      	ldr	r2, [r2, #8]
 80013ac:	f002 021f 	and.w	r2, r2, #31
 80013b0:	2a09      	cmp	r2, #9
 80013b2:	d0ea      	beq.n	800138a <HAL_ADC_Start+0xde>
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_ADC_Start+0x158>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d0e7      	beq.n	800138a <HAL_ADC_Start+0xde>
}
 80013ba:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c0:	d002      	beq.n	80013c8 <HAL_ADC_Start+0x11c>
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <HAL_ADC_Start+0x150>)
 80013c4:	428b      	cmp	r3, r1
 80013c6:	d1e9      	bne.n	800139c <HAL_ADC_Start+0xf0>
 80013c8:	6892      	ldr	r2, [r2, #8]
 80013ca:	f002 021f 	and.w	r2, r2, #31
 80013ce:	2a05      	cmp	r2, #5
 80013d0:	d0db      	beq.n	800138a <HAL_ADC_Start+0xde>
 80013d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d6:	d002      	beq.n	80013de <HAL_ADC_Start+0x132>
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_ADC_Start+0x150>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d1e4      	bne.n	80013a8 <HAL_ADC_Start+0xfc>
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_ADC_Start+0x154>)
 80013e0:	6892      	ldr	r2, [r2, #8]
 80013e2:	f002 021f 	and.w	r2, r2, #31
 80013e6:	2a09      	cmp	r2, #9
 80013e8:	d0cf      	beq.n	800138a <HAL_ADC_Start+0xde>
 80013ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ee:	e7e0      	b.n	80013b2 <HAL_ADC_Start+0x106>
      __HAL_UNLOCK(hadc);
 80013f0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 80013f4:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80013f6:	2002      	movs	r0, #2
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
 80013fa:	bf00      	nop
 80013fc:	50000100 	.word	0x50000100
 8001400:	50000300 	.word	0x50000300
 8001404:	50000400 	.word	0x50000400
 8001408:	50000700 	.word	0x50000700

0800140c <HAL_ADC_PollForConversion>:
{
 800140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001410:	6946      	ldr	r6, [r0, #20]
 8001412:	6803      	ldr	r3, [r0, #0]
 8001414:	2e08      	cmp	r6, #8
{
 8001416:	4604      	mov	r4, r0
 8001418:	460f      	mov	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800141a:	d027      	beq.n	800146c <HAL_ADC_PollForConversion+0x60>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800141c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001420:	d015      	beq.n	800144e <HAL_ADC_PollForConversion+0x42>
 8001422:	4946      	ldr	r1, [pc, #280]	; (800153c <HAL_ADC_PollForConversion+0x130>)
 8001424:	4a46      	ldr	r2, [pc, #280]	; (8001540 <HAL_ADC_PollForConversion+0x134>)
 8001426:	4847      	ldr	r0, [pc, #284]	; (8001544 <HAL_ADC_PollForConversion+0x138>)
 8001428:	4283      	cmp	r3, r0
 800142a:	bf08      	it	eq
 800142c:	460a      	moveq	r2, r1
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800142e:	6891      	ldr	r1, [r2, #8]
 8001430:	f011 011f 	ands.w	r1, r1, #31
 8001434:	d10d      	bne.n	8001452 <HAL_ADC_PollForConversion+0x46>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	07d5      	lsls	r5, r2, #31
 800143a:	d516      	bpl.n	800146a <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800143e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001448:	2001      	movs	r0, #1
 800144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144e:	4a3b      	ldr	r2, [pc, #236]	; (800153c <HAL_ADC_PollForConversion+0x130>)
 8001450:	e7ed      	b.n	800142e <HAL_ADC_PollForConversion+0x22>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001452:	6892      	ldr	r2, [r2, #8]
 8001454:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8001458:	d007      	beq.n	800146a <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001462:	2300      	movs	r3, #0
 8001464:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001468:	e7ee      	b.n	8001448 <HAL_ADC_PollForConversion+0x3c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800146a:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800146c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001470:	d002      	beq.n	8001478 <HAL_ADC_PollForConversion+0x6c>
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <HAL_ADC_PollForConversion+0x138>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d134      	bne.n	80014e2 <HAL_ADC_PollForConversion+0xd6>
 8001478:	4a30      	ldr	r2, [pc, #192]	; (800153c <HAL_ADC_PollForConversion+0x130>)
 800147a:	6892      	ldr	r2, [r2, #8]
 800147c:	06d0      	lsls	r0, r2, #27
 800147e:	d005      	beq.n	800148c <HAL_ADC_PollForConversion+0x80>
 8001480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001484:	d002      	beq.n	800148c <HAL_ADC_PollForConversion+0x80>
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <HAL_ADC_PollForConversion+0x13c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d133      	bne.n	80014f4 <HAL_ADC_PollForConversion+0xe8>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800148c:	68dd      	ldr	r5, [r3, #12]
  tickstart = HAL_GetTick();  
 800148e:	f7ff fd59 	bl	8000f44 <HAL_GetTick>
 8001492:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4216      	tst	r6, r2
 800149a:	d032      	beq.n	8001502 <HAL_ADC_PollForConversion+0xf6>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800149e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a2:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80014aa:	d113      	bne.n	80014d4 <HAL_ADC_PollForConversion+0xc8>
 80014ac:	04a8      	lsls	r0, r5, #18
 80014ae:	d411      	bmi.n	80014d4 <HAL_ADC_PollForConversion+0xc8>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	0711      	lsls	r1, r2, #28
 80014b4:	d50e      	bpl.n	80014d4 <HAL_ADC_PollForConversion+0xc8>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	f012 0f04 	tst.w	r2, #4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014be:	d134      	bne.n	800152a <HAL_ADC_PollForConversion+0x11e>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c4:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80014c8:	04d2      	lsls	r2, r2, #19
 80014ca:	d403      	bmi.n	80014d4 <HAL_ADC_PollForConversion+0xc8>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80014d4:	f415 4080 	ands.w	r0, r5, #16384	; 0x4000
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80014d8:	bf0c      	ite	eq
 80014da:	601e      	streq	r6, [r3, #0]
  return HAL_OK;
 80014dc:	2000      	movne	r0, #0
 80014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_ADC_PollForConversion+0x134>)
 80014e4:	6892      	ldr	r2, [r2, #8]
 80014e6:	06d1      	lsls	r1, r2, #27
 80014e8:	d0d0      	beq.n	800148c <HAL_ADC_PollForConversion+0x80>
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_ADC_PollForConversion+0x13c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d0cd      	beq.n	800148c <HAL_ADC_PollForConversion+0x80>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014f0:	4613      	mov	r3, r2
 80014f2:	e7cb      	b.n	800148c <HAL_ADC_PollForConversion+0x80>
 80014f4:	4913      	ldr	r1, [pc, #76]	; (8001544 <HAL_ADC_PollForConversion+0x138>)
 80014f6:	428b      	cmp	r3, r1
 80014f8:	bf14      	ite	ne
 80014fa:	4613      	movne	r3, r2
 80014fc:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
 8001500:	e7c4      	b.n	800148c <HAL_ADC_PollForConversion+0x80>
    if(Timeout != HAL_MAX_DELAY)
 8001502:	1c7a      	adds	r2, r7, #1
 8001504:	d0c7      	beq.n	8001496 <HAL_ADC_PollForConversion+0x8a>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001506:	b94f      	cbnz	r7, 800151c <HAL_ADC_PollForConversion+0x110>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001508:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001510:	2300      	movs	r3, #0
 8001512:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001516:	2003      	movs	r0, #3
 8001518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800151c:	f7ff fd12 	bl	8000f44 <HAL_GetTick>
 8001520:	eba0 0008 	sub.w	r0, r0, r8
 8001524:	4287      	cmp	r7, r0
 8001526:	d2b5      	bcs.n	8001494 <HAL_ADC_PollForConversion+0x88>
 8001528:	e7ee      	b.n	8001508 <HAL_ADC_PollForConversion+0xfc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152a:	f042 0220 	orr.w	r2, r2, #32
 800152e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	64a2      	str	r2, [r4, #72]	; 0x48
 8001538:	e7cc      	b.n	80014d4 <HAL_ADC_PollForConversion+0xc8>
 800153a:	bf00      	nop
 800153c:	50000300 	.word	0x50000300
 8001540:	50000700 	.word	0x50000700
 8001544:	50000100 	.word	0x50000100
 8001548:	50000400 	.word	0x50000400

0800154c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800154c:	6803      	ldr	r3, [r0, #0]
 800154e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001550:	4770      	bx	lr
	...

08001554 <HAL_ADC_ConfigChannel>:
{
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 800155c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001560:	2b01      	cmp	r3, #1
{
 8001562:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001564:	f000 8163 	beq.w	800182e <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001568:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800156a:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800156c:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800156e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001570:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 8001572:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001576:	f100 8155 	bmi.w	8001824 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 800157a:	6848      	ldr	r0, [r1, #4]
 800157c:	680c      	ldr	r4, [r1, #0]
 800157e:	2804      	cmp	r0, #4
 8001580:	f04f 0206 	mov.w	r2, #6
 8001584:	d831      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8001586:	4342      	muls	r2, r0
 8001588:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800158a:	201f      	movs	r0, #31
 800158c:	4090      	lsls	r0, r2
 800158e:	ea27 0000 	bic.w	r0, r7, r0
 8001592:	fa04 f202 	lsl.w	r2, r4, r2
 8001596:	4302      	orrs	r2, r0
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	f012 0f0c 	tst.w	r2, #12
 80015a0:	d162      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80015a2:	2c09      	cmp	r4, #9
 80015a4:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80015a8:	688f      	ldr	r7, [r1, #8]
 80015aa:	d946      	bls.n	800163a <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015ac:	4422      	add	r2, r4
 80015ae:	6998      	ldr	r0, [r3, #24]
 80015b0:	3a1e      	subs	r2, #30
 80015b2:	f04f 0e07 	mov.w	lr, #7
 80015b6:	fa0e fe02 	lsl.w	lr, lr, r2
 80015ba:	ea20 000e 	bic.w	r0, r0, lr
 80015be:	fa07 f202 	lsl.w	r2, r7, r2
 80015c2:	4302      	orrs	r2, r0
 80015c4:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80015cc:	694a      	ldr	r2, [r1, #20]
 80015ce:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80015d2:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 80015d6:	690a      	ldr	r2, [r1, #16]
 80015d8:	3a01      	subs	r2, #1
 80015da:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 80015de:	2a03      	cmp	r2, #3
 80015e0:	d873      	bhi.n	80016ca <HAL_ADC_ConfigChannel+0x176>
 80015e2:	e8df f002 	tbb	[pc, r2]
 80015e6:	5137      	.short	0x5137
 80015e8:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 80015ea:	2809      	cmp	r0, #9
 80015ec:	d80b      	bhi.n	8001606 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80015ee:	4342      	muls	r2, r0
 80015f0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80015f2:	3a1e      	subs	r2, #30
 80015f4:	201f      	movs	r0, #31
 80015f6:	4090      	lsls	r0, r2
 80015f8:	ea27 0000 	bic.w	r0, r7, r0
 80015fc:	fa04 f202 	lsl.w	r2, r4, r2
 8001600:	4302      	orrs	r2, r0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
 8001604:	e7c9      	b.n	800159a <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8001606:	280e      	cmp	r0, #14
 8001608:	d80b      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800160a:	4342      	muls	r2, r0
 800160c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800160e:	3a3c      	subs	r2, #60	; 0x3c
 8001610:	201f      	movs	r0, #31
 8001612:	4090      	lsls	r0, r2
 8001614:	ea27 0000 	bic.w	r0, r7, r0
 8001618:	fa04 f202 	lsl.w	r2, r4, r2
 800161c:	4302      	orrs	r2, r0
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
 8001620:	e7bb      	b.n	800159a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001622:	4342      	muls	r2, r0
 8001624:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8001626:	3a5a      	subs	r2, #90	; 0x5a
 8001628:	201f      	movs	r0, #31
 800162a:	4090      	lsls	r0, r2
 800162c:	ea27 0000 	bic.w	r0, r7, r0
 8001630:	fa04 f202 	lsl.w	r2, r4, r2
 8001634:	4302      	orrs	r2, r0
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
 8001638:	e7af      	b.n	800159a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800163a:	6958      	ldr	r0, [r3, #20]
 800163c:	4422      	add	r2, r4
 800163e:	f04f 0e07 	mov.w	lr, #7
 8001642:	fa0e fe02 	lsl.w	lr, lr, r2
 8001646:	ea20 000e 	bic.w	r0, r0, lr
 800164a:	fa07 f202 	lsl.w	r2, r7, r2
 800164e:	4302      	orrs	r2, r0
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	e7b8      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001654:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001656:	4f83      	ldr	r7, [pc, #524]	; (8001864 <HAL_ADC_ConfigChannel+0x310>)
 8001658:	4017      	ands	r7, r2
 800165a:	ea47 020c 	orr.w	r2, r7, ip
 800165e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001662:	ea42 020e 	orr.w	r2, r2, lr
 8001666:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	f002 0203 	and.w	r2, r2, #3
 800166e:	2a01      	cmp	r2, #1
 8001670:	f040 80df 	bne.w	8001832 <HAL_ADC_ConfigChannel+0x2de>
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	07d7      	lsls	r7, r2, #31
 8001678:	f140 80db 	bpl.w	8001832 <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800167e:	2300      	movs	r3, #0
 8001680:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8001684:	b017      	add	sp, #92	; 0x5c
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001688:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800168a:	4f76      	ldr	r7, [pc, #472]	; (8001864 <HAL_ADC_ConfigChannel+0x310>)
 800168c:	4017      	ands	r7, r2
 800168e:	ea47 020c 	orr.w	r2, r7, ip
 8001692:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001696:	ea42 020e 	orr.w	r2, r2, lr
 800169a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800169c:	e7e4      	b.n	8001668 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800169e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016a0:	4870      	ldr	r0, [pc, #448]	; (8001864 <HAL_ADC_ConfigChannel+0x310>)
 80016a2:	4010      	ands	r0, r2
 80016a4:	ea40 020c 	orr.w	r2, r0, ip
 80016a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016ac:	ea42 020e 	orr.w	r2, r2, lr
 80016b0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80016b2:	e7d9      	b.n	8001668 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80016b4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80016b6:	4a6b      	ldr	r2, [pc, #428]	; (8001864 <HAL_ADC_ConfigChannel+0x310>)
 80016b8:	4002      	ands	r2, r0
 80016ba:	ea42 020c 	orr.w	r2, r2, ip
 80016be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016c2:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80016c8:	e7ce      	b.n	8001668 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016cc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80016d0:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016d2:	bf02      	ittt	eq
 80016d4:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80016d6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80016da:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016de:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80016e2:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016e4:	bf02      	ittt	eq
 80016e6:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80016e8:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80016ec:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016f0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80016f4:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016f6:	bf02      	ittt	eq
 80016f8:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 80016fa:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80016fe:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001700:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001702:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001706:	4594      	cmp	ip, r2
 8001708:	d1ae      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800170a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800170c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001710:	e7d9      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001712:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001716:	2101      	movs	r1, #1
 8001718:	40a1      	lsls	r1, r4
 800171a:	ea22 0201 	bic.w	r2, r2, r1
 800171e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001726:	d01e      	beq.n	8001766 <HAL_ADC_ConfigChannel+0x212>
 8001728:	494f      	ldr	r1, [pc, #316]	; (8001868 <HAL_ADC_ConfigChannel+0x314>)
 800172a:	4a50      	ldr	r2, [pc, #320]	; (800186c <HAL_ADC_ConfigChannel+0x318>)
 800172c:	4850      	ldr	r0, [pc, #320]	; (8001870 <HAL_ADC_ConfigChannel+0x31c>)
 800172e:	4283      	cmp	r3, r0
 8001730:	bf08      	it	eq
 8001732:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001734:	2c10      	cmp	r4, #16
 8001736:	d118      	bne.n	800176a <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001738:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800173a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800173e:	d19d      	bne.n	800167c <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001744:	494a      	ldr	r1, [pc, #296]	; (8001870 <HAL_ADC_ConfigChannel+0x31c>)
 8001746:	d11c      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x22e>
 8001748:	9101      	str	r1, [sp, #4]
 800174a:	e024      	b.n	8001796 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 800174c:	1c60      	adds	r0, r4, #1
 800174e:	6959      	ldr	r1, [r3, #20]
 8001750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001754:	2207      	movs	r2, #7
 8001756:	4082      	lsls	r2, r0
 8001758:	ea21 0102 	bic.w	r1, r1, r2
 800175c:	fa06 f200 	lsl.w	r2, r6, r0
 8001760:	430a      	orrs	r2, r1
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	e7dd      	b.n	8001722 <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001766:	4a40      	ldr	r2, [pc, #256]	; (8001868 <HAL_ADC_ConfigChannel+0x314>)
 8001768:	e7e4      	b.n	8001734 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800176a:	2c11      	cmp	r4, #17
 800176c:	d103      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800176e:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001770:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8001774:	e7e3      	b.n	800173e <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001776:	2c12      	cmp	r4, #18
 8001778:	d180      	bne.n	800167c <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800177a:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800177c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8001780:	e7dd      	b.n	800173e <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001782:	428b      	cmp	r3, r1
 8001784:	d102      	bne.n	800178c <HAL_ADC_ConfigChannel+0x238>
 8001786:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800178a:	e7dd      	b.n	8001748 <HAL_ADC_ConfigChannel+0x1f4>
 800178c:	4939      	ldr	r1, [pc, #228]	; (8001874 <HAL_ADC_ConfigChannel+0x320>)
 800178e:	483a      	ldr	r0, [pc, #232]	; (8001878 <HAL_ADC_ConfigChannel+0x324>)
 8001790:	428b      	cmp	r3, r1
 8001792:	d12b      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x298>
 8001794:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001796:	6899      	ldr	r1, [r3, #8]
 8001798:	f001 0103 	and.w	r1, r1, #3
 800179c:	2901      	cmp	r1, #1
 800179e:	d102      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x252>
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	07c8      	lsls	r0, r1, #31
 80017a4:	d438      	bmi.n	8001818 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017a6:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017a8:	b139      	cbz	r1, 80017ba <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017aa:	6888      	ldr	r0, [r1, #8]
 80017ac:	f000 0003 	and.w	r0, r0, #3
 80017b0:	2801      	cmp	r0, #1
 80017b2:	d102      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x266>
 80017b4:	6809      	ldr	r1, [r1, #0]
 80017b6:	07c9      	lsls	r1, r1, #31
 80017b8:	d42e      	bmi.n	8001818 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ba:	2c10      	cmp	r4, #16
 80017bc:	d11a      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x2a0>
 80017be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c2:	f47f af5b 	bne.w	800167c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017c6:	6893      	ldr	r3, [r2, #8]
 80017c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017cc:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_ADC_ConfigChannel+0x328>)
 80017d0:	4a2b      	ldr	r2, [pc, #172]	; (8001880 <HAL_ADC_ConfigChannel+0x32c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80017d8:	230a      	movs	r3, #10
 80017da:	4353      	muls	r3, r2
            wait_loop_index--;
 80017dc:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80017de:	9b00      	ldr	r3, [sp, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f43f af4b 	beq.w	800167c <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 80017e6:	9b00      	ldr	r3, [sp, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	e7f7      	b.n	80017dc <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017ec:	4283      	cmp	r3, r0
 80017ee:	bf18      	it	ne
 80017f0:	2100      	movne	r1, #0
 80017f2:	e7a9      	b.n	8001748 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017f4:	2c11      	cmp	r4, #17
 80017f6:	d108      	bne.n	800180a <HAL_ADC_ConfigChannel+0x2b6>
 80017f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017fc:	f47f af3e 	bne.w	800167c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001800:	6893      	ldr	r3, [r2, #8]
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001806:	6093      	str	r3, [r2, #8]
 8001808:	e738      	b.n	800167c <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800180a:	2c12      	cmp	r4, #18
 800180c:	f47f af36 	bne.w	800167c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001810:	6893      	ldr	r3, [r2, #8]
 8001812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001816:	e7f6      	b.n	8001806 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001818:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001820:	2001      	movs	r0, #1
 8001822:	e72c      	b.n	800167e <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001824:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	646b      	str	r3, [r5, #68]	; 0x44
 800182c:	e727      	b.n	800167e <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 800182e:	2002      	movs	r0, #2
 8001830:	e728      	b.n	8001684 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001832:	2e01      	cmp	r6, #1
 8001834:	f47f af6d 	bne.w	8001712 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001838:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800183c:	40a6      	lsls	r6, r4
 800183e:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001840:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001842:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8001846:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001848:	d980      	bls.n	800174c <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 800184a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800184e:	6999      	ldr	r1, [r3, #24]
 8001850:	3a1b      	subs	r2, #27
 8001852:	2007      	movs	r0, #7
 8001854:	4090      	lsls	r0, r2
 8001856:	ea21 0100 	bic.w	r1, r1, r0
 800185a:	fa06 f202 	lsl.w	r2, r6, r2
 800185e:	430a      	orrs	r2, r1
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	e75e      	b.n	8001722 <HAL_ADC_ConfigChannel+0x1ce>
 8001864:	83fff000 	.word	0x83fff000
 8001868:	50000300 	.word	0x50000300
 800186c:	50000700 	.word	0x50000700
 8001870:	50000100 	.word	0x50000100
 8001874:	50000400 	.word	0x50000400
 8001878:	50000500 	.word	0x50000500
 800187c:	20000018 	.word	0x20000018
 8001880:	000f4240 	.word	0x000f4240

08001884 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001886:	6802      	ldr	r2, [r0, #0]
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 800188a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 800188e:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001890:	d101      	bne.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	e009      	b.n	80018aa <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001896:	429a      	cmp	r2, r3
 8001898:	d102      	bne.n	80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 800189a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800189e:	e7f8      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0xe>
 80018a0:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80018a2:	4c3d      	ldr	r4, [pc, #244]	; (8001998 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d130      	bne.n	800190a <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80018a8:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80018aa:	9c01      	ldr	r4, [sp, #4]
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d058      	beq.n	8001962 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 80018b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d056      	beq.n	8001966 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	075b      	lsls	r3, r3, #29
 80018c2:	d443      	bmi.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	075f      	lsls	r7, r3, #29
 80018c8:	d440      	bmi.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ca:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80018ce:	d020      	beq.n	8001912 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80018d0:	4d32      	ldr	r5, [pc, #200]	; (800199c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80018d4:	4e2e      	ldr	r6, [pc, #184]	; (8001990 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80018d6:	42b2      	cmp	r2, r6
 80018d8:	bf08      	it	eq
 80018da:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018dc:	680d      	ldr	r5, [r1, #0]
 80018de:	b1d5      	cbz	r5, 8001916 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018e0:	684e      	ldr	r6, [r1, #4]
 80018e2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80018e6:	4637      	mov	r7, r6
 80018e8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80018ea:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80018ee:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 80018f2:	433e      	orrs	r6, r7
 80018f4:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018f6:	6896      	ldr	r6, [r2, #8]
 80018f8:	f006 0603 	and.w	r6, r6, #3
 80018fc:	2e01      	cmp	r6, #1
 80018fe:	d134      	bne.n	800196a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	07d6      	lsls	r6, r2, #31
 8001904:	d531      	bpl.n	800196a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e025      	b.n	8001956 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800190a:	42a2      	cmp	r2, r4
 800190c:	bf18      	it	ne
 800190e:	2300      	movne	r3, #0
 8001910:	e7bf      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8001914:	e7e2      	b.n	80018dc <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001916:	6899      	ldr	r1, [r3, #8]
 8001918:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800191c:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800191e:	6891      	ldr	r1, [r2, #8]
 8001920:	f001 0103 	and.w	r1, r1, #3
 8001924:	2901      	cmp	r1, #1
 8001926:	d102      	bne.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	07d1      	lsls	r1, r2, #31
 800192c:	d4eb      	bmi.n	8001906 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800192e:	68a2      	ldr	r2, [r4, #8]
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	2a01      	cmp	r2, #1
 8001936:	d102      	bne.n	800193e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8001938:	6822      	ldr	r2, [r4, #0]
 800193a:	07d2      	lsls	r2, r2, #31
 800193c:	d4e3      	bmi.n	8001906 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001944:	f022 020f 	bic.w	r2, r2, #15
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	e7dc      	b.n	8001906 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800194e:	f043 0320 	orr.w	r3, r3, #32
 8001952:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8001956:	2200      	movs	r2, #0
 8001958:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 800195c:	4618      	mov	r0, r3
 800195e:	b017      	add	sp, #92	; 0x5c
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e7fa      	b.n	800195c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8001966:	2302      	movs	r3, #2
 8001968:	e7f8      	b.n	800195c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800196a:	68a2      	ldr	r2, [r4, #8]
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	2a01      	cmp	r2, #1
 8001972:	d102      	bne.n	800197a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001974:	6822      	ldr	r2, [r4, #0]
 8001976:	07d4      	lsls	r4, r2, #31
 8001978:	d4c5      	bmi.n	8001906 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	6889      	ldr	r1, [r1, #8]
 800197e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001982:	430d      	orrs	r5, r1
 8001984:	f022 020f 	bic.w	r2, r2, #15
 8001988:	4315      	orrs	r5, r2
 800198a:	609d      	str	r5, [r3, #8]
 800198c:	e7bb      	b.n	8001906 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 800198e:	bf00      	nop
 8001990:	50000100 	.word	0x50000100
 8001994:	50000400 	.word	0x50000400
 8001998:	50000500 	.word	0x50000500
 800199c:	50000300 	.word	0x50000300
 80019a0:	50000700 	.word	0x50000700

080019a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019a6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80019b4:	0200      	lsls	r0, r0, #8
 80019b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80019be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80019c0:	60d3      	str	r3, [r2, #12]
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ca:	b530      	push	{r4, r5, lr}
 80019cc:	68dc      	ldr	r4, [r3, #12]
 80019ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	2b04      	cmp	r3, #4
 80019da:	bf28      	it	cs
 80019dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 0501 	mov.w	r5, #1
 80019e4:	fa05 f303 	lsl.w	r3, r5, r3
 80019e8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ec:	bf8c      	ite	hi
 80019ee:	3c03      	subhi	r4, #3
 80019f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f2:	4019      	ands	r1, r3
 80019f4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f6:	fa05 f404 	lsl.w	r4, r5, r4
 80019fa:	3c01      	subs	r4, #1
 80019fc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	ea42 0201 	orr.w	r2, r2, r1
 8001a04:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	bfaf      	iteee	ge
 8001a0a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	f000 000f 	andlt.w	r0, r0, #15
 8001a12:	4b06      	ldrlt	r3, [pc, #24]	; (8001a2c <HAL_NVIC_SetPriority+0x64>)
 8001a14:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	bfa5      	ittet	ge
 8001a18:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001a1c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001a24:	bd30      	pop	{r4, r5, pc}
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	e000ed14 	.word	0xe000ed14

08001a30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	3801      	subs	r0, #1
 8001a32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a36:	d20a      	bcs.n	8001a4e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	21f0      	movs	r1, #240	; 0xf0
 8001a40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a60:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001bf8 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a68:	4a61      	ldr	r2, [pc, #388]	; (8001bf0 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8001a6a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a6c:	fa38 f403 	lsrs.w	r4, r8, r3
 8001a70:	d102      	bne.n	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8001a72:	b003      	add	sp, #12
 8001a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a78:	f04f 0e01 	mov.w	lr, #1
 8001a7c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8001a80:	ea18 060e 	ands.w	r6, r8, lr
 8001a84:	f000 80a6 	beq.w	8001bd4 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a88:	684c      	ldr	r4, [r1, #4]
 8001a8a:	f024 0710 	bic.w	r7, r4, #16
 8001a8e:	2f02      	cmp	r7, #2
 8001a90:	d116      	bne.n	8001ac0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8001a92:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001a96:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001a9e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001aa6:	f04f 0c0f 	mov.w	ip, #15
 8001aaa:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001aae:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab2:	690d      	ldr	r5, [r1, #16]
 8001ab4:	fa05 f50b 	lsl.w	r5, r5, fp
 8001ab8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001abc:	f8ca 5020 	str.w	r5, [sl, #32]
 8001ac0:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001ac6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	fa05 f50a 	lsl.w	r5, r5, sl
 8001ace:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad8:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001adc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ade:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001ae4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae8:	d811      	bhi.n	8001b0e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001aea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af0:	68cf      	ldr	r7, [r1, #12]
 8001af2:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001af6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001afa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001afc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afe:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b02:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001b06:	409f      	lsls	r7, r3
 8001b08:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001b0c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001b0e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b10:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b12:	688f      	ldr	r7, [r1, #8]
 8001b14:	fa07 f70a 	lsl.w	r7, r7, sl
 8001b18:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001b1a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1c:	00e5      	lsls	r5, r4, #3
 8001b1e:	d559      	bpl.n	8001bd4 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b20:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001b24:	f045 0501 	orr.w	r5, r5, #1
 8001b28:	f8c9 5018 	str.w	r5, [r9, #24]
 8001b2c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001b30:	f023 0703 	bic.w	r7, r3, #3
 8001b34:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001b38:	f005 0501 	and.w	r5, r5, #1
 8001b3c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001b40:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b42:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b48:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b4a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001b4e:	f04f 0e0f 	mov.w	lr, #15
 8001b52:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b56:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001b5a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b5e:	d03b      	beq.n	8001bd8 <HAL_GPIO_Init+0x17c>
 8001b60:	4d24      	ldr	r5, [pc, #144]	; (8001bf4 <HAL_GPIO_Init+0x198>)
 8001b62:	42a8      	cmp	r0, r5
 8001b64:	d03a      	beq.n	8001bdc <HAL_GPIO_Init+0x180>
 8001b66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b6a:	42a8      	cmp	r0, r5
 8001b6c:	d038      	beq.n	8001be0 <HAL_GPIO_Init+0x184>
 8001b6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b72:	42a8      	cmp	r0, r5
 8001b74:	d036      	beq.n	8001be4 <HAL_GPIO_Init+0x188>
 8001b76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b7a:	42a8      	cmp	r0, r5
 8001b7c:	d034      	beq.n	8001be8 <HAL_GPIO_Init+0x18c>
 8001b7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b82:	42a8      	cmp	r0, r5
 8001b84:	d032      	beq.n	8001bec <HAL_GPIO_Init+0x190>
 8001b86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b8a:	42a8      	cmp	r0, r5
 8001b8c:	bf14      	ite	ne
 8001b8e:	2507      	movne	r5, #7
 8001b90:	2506      	moveq	r5, #6
 8001b92:	fa05 f50c 	lsl.w	r5, r5, ip
 8001b96:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b9a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001b9c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	bf0c      	ite	eq
 8001ba6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001ba8:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001baa:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001bac:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	bf0c      	ite	eq
 8001bb4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001bb6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001bb8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001bba:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	bf0c      	ite	eq
 8001bc2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001bc4:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001bc6:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001bc8:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bca:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	bf54      	ite	pl
 8001bce:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001bd0:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001bd2:	60d5      	str	r5, [r2, #12]
    position++;
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	e749      	b.n	8001a6c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bd8:	2500      	movs	r5, #0
 8001bda:	e7da      	b.n	8001b92 <HAL_GPIO_Init+0x136>
 8001bdc:	2501      	movs	r5, #1
 8001bde:	e7d8      	b.n	8001b92 <HAL_GPIO_Init+0x136>
 8001be0:	2502      	movs	r5, #2
 8001be2:	e7d6      	b.n	8001b92 <HAL_GPIO_Init+0x136>
 8001be4:	2503      	movs	r5, #3
 8001be6:	e7d4      	b.n	8001b92 <HAL_GPIO_Init+0x136>
 8001be8:	2504      	movs	r5, #4
 8001bea:	e7d2      	b.n	8001b92 <HAL_GPIO_Init+0x136>
 8001bec:	2505      	movs	r5, #5
 8001bee:	e7d0      	b.n	8001b92 <HAL_GPIO_Init+0x136>
 8001bf0:	40010400 	.word	0x40010400
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bfc:	6903      	ldr	r3, [r0, #16]
 8001bfe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001c00:	bf14      	ite	ne
 8001c02:	2001      	movne	r0, #1
 8001c04:	2000      	moveq	r0, #0
 8001c06:	4770      	bx	lr

08001c08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c08:	b10a      	cbz	r2, 8001c0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0a:	6181      	str	r1, [r0, #24]
 8001c0c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0e:	6281      	str	r1, [r0, #40]	; 0x28
 8001c10:	4770      	bx	lr

08001c12 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c18:	bf44      	itt	mi
 8001c1a:	2200      	movmi	r2, #0
 8001c1c:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c22:	bf5e      	ittt	pl
 8001c24:	699a      	ldrpl	r2, [r3, #24]
 8001c26:	f042 0201 	orrpl.w	r2, r2, #1
 8001c2a:	619a      	strpl	r2, [r3, #24]
 8001c2c:	4770      	bx	lr

08001c2e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001c2e:	b530      	push	{r4, r5, lr}
 8001c30:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001c32:	6805      	ldr	r5, [r0, #0]
 8001c34:	4323      	orrs	r3, r4
 8001c36:	0d64      	lsrs	r4, r4, #21
 8001c38:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001c3c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001c40:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001c44:	6868      	ldr	r0, [r5, #4]
 8001c46:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001c4a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001c4e:	4319      	orrs	r1, r3
 8001c50:	f044 0403 	orr.w	r4, r4, #3
 8001c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001c58:	ea20 0404 	bic.w	r4, r0, r4
 8001c5c:	4321      	orrs	r1, r4
 8001c5e:	6069      	str	r1, [r5, #4]
 8001c60:	bd30      	pop	{r4, r5, pc}

08001c62 <I2C_WaitOnFlagUntilTimeout>:
{
 8001c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c66:	9f06      	ldr	r7, [sp, #24]
 8001c68:	4604      	mov	r4, r0
 8001c6a:	4688      	mov	r8, r1
 8001c6c:	4616      	mov	r6, r2
 8001c6e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	6993      	ldr	r3, [r2, #24]
 8001c74:	ea38 0303 	bics.w	r3, r8, r3
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	42b3      	cmp	r3, r6
 8001c80:	d002      	beq.n	8001c88 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001c82:	2000      	movs	r0, #0
}
 8001c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c88:	1c6b      	adds	r3, r5, #1
 8001c8a:	d0f2      	beq.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c8c:	b955      	cbnz	r5, 8001ca4 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ca4:	f7ff f94e 	bl	8000f44 <HAL_GetTick>
 8001ca8:	1bc0      	subs	r0, r0, r7
 8001caa:	4285      	cmp	r5, r0
 8001cac:	d2e0      	bcs.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0xe>
 8001cae:	e7ee      	b.n	8001c8e <I2C_WaitOnFlagUntilTimeout+0x2c>

08001cb0 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb0:	6803      	ldr	r3, [r0, #0]
{
 8001cb2:	b570      	push	{r4, r5, r6, lr}
 8001cb4:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb6:	6998      	ldr	r0, [r3, #24]
 8001cb8:	f010 0010 	ands.w	r0, r0, #16
{
 8001cbc:	460d      	mov	r5, r1
 8001cbe:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc0:	d112      	bne.n	8001ce8 <I2C_IsAcknowledgeFailed+0x38>
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001cc4:	1c69      	adds	r1, r5, #1
 8001cc6:	d010      	beq.n	8001cea <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cc8:	b94d      	cbnz	r5, 8001cde <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001cd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cde:	f7ff f931 	bl	8000f44 <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	4285      	cmp	r5, r0
 8001ce6:	d3f0      	bcc.n	8001cca <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	6999      	ldr	r1, [r3, #24]
 8001cec:	068a      	lsls	r2, r1, #26
 8001cee:	d5e9      	bpl.n	8001cc4 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf2:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001cf6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001cfa:	f7ff ff8a 	bl	8001c12 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	6853      	ldr	r3, [r2, #4]
 8001d02:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001d06:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001d0a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d14:	2304      	movs	r3, #4
 8001d16:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	bd70      	pop	{r4, r5, r6, pc}

08001d2a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001d2a:	b570      	push	{r4, r5, r6, lr}
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	460d      	mov	r5, r1
 8001d30:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	079b      	lsls	r3, r3, #30
 8001d38:	d501      	bpl.n	8001d3e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3e:	4632      	mov	r2, r6
 8001d40:	4629      	mov	r1, r5
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff ffb4 	bl	8001cb0 <I2C_IsAcknowledgeFailed>
 8001d48:	b9b0      	cbnz	r0, 8001d78 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001d4a:	1c6a      	adds	r2, r5, #1
 8001d4c:	d0f1      	beq.n	8001d32 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d4e:	b96d      	cbnz	r5, 8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001d68:	2003      	movs	r0, #3
 8001d6a:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d6c:	f7ff f8ea 	bl	8000f44 <HAL_GetTick>
 8001d70:	1b80      	subs	r0, r0, r6
 8001d72:	4285      	cmp	r5, r0
 8001d74:	d2dd      	bcs.n	8001d32 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8001d76:	e7eb      	b.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
}
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}

08001d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4604      	mov	r4, r0
 8001d80:	460d      	mov	r5, r1
 8001d82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	069b      	lsls	r3, r3, #26
 8001d8a:	d501      	bpl.n	8001d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d90:	4632      	mov	r2, r6
 8001d92:	4629      	mov	r1, r5
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff ff8b 	bl	8001cb0 <I2C_IsAcknowledgeFailed>
 8001d9a:	b9a0      	cbnz	r0, 8001dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d9c:	b96d      	cbnz	r5, 8001dba <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	2320      	movs	r3, #32
 8001da8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001db2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001db6:	2003      	movs	r0, #3
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dba:	f7ff f8c3 	bl	8000f44 <HAL_GetTick>
 8001dbe:	1b80      	subs	r0, r0, r6
 8001dc0:	4285      	cmp	r5, r0
 8001dc2:	d2df      	bcs.n	8001d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8001dc4:	e7eb      	b.n	8001d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001dc6:	2001      	movs	r0, #1
}
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}

08001dca <HAL_I2C_Init>:
{
 8001dca:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001dcc:	4604      	mov	r4, r0
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d04a      	beq.n	8001e68 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dda:	b91b      	cbnz	r3, 8001de4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001ddc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001de0:	f002 f81c 	bl	8003e1c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	2324      	movs	r3, #36	; 0x24
 8001de6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001dea:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df6:	6862      	ldr	r2, [r4, #4]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dfe:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e00:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0a:	d124      	bne.n	8001e56 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e10:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e12:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e14:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e16:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e1e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e28:	6922      	ldr	r2, [r4, #16]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	69a1      	ldr	r1, [r4, #24]
 8001e2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e32:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e34:	6a21      	ldr	r1, [r4, #32]
 8001e36:	69e2      	ldr	r2, [r4, #28]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001e54:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e5a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e5c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e5e:	bf04      	itt	eq
 8001e60:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001e64:	605a      	streq	r2, [r3, #4]
 8001e66:	e7d4      	b.n	8001e12 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
}
 8001e6a:	bd10      	pop	{r4, pc}

08001e6c <HAL_I2C_Master_Transmit>:
{
 8001e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e70:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e76:	2b20      	cmp	r3, #32
{
 8001e78:	4604      	mov	r4, r0
 8001e7a:	460e      	mov	r6, r1
 8001e7c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	f040 8089 	bne.w	8001f94 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 8001e82:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	f000 8084 	beq.w	8001f94 <HAL_I2C_Master_Transmit+0x128>
 8001e8c:	2701      	movs	r7, #1
 8001e8e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e92:	f7ff f857 	bl	8000f44 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e96:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001e98:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e9a:	9000      	str	r0, [sp, #0]
 8001e9c:	463a      	mov	r2, r7
 8001e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff fedd 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d148      	bne.n	8001f3e <HAL_I2C_Master_Transmit+0xd2>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eac:	2321      	movs	r3, #33	; 0x21
 8001eae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001eba:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ebe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001ec0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001ec8:	6360      	str	r0, [r4, #52]	; 0x34
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <HAL_I2C_Master_Transmit+0x12c>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ecc:	d925      	bls.n	8001f1a <HAL_I2C_Master_Transmit+0xae>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ece:	22ff      	movs	r2, #255	; 0xff
 8001ed0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ed2:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ed8:	4631      	mov	r1, r6
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff fea7 	bl	8001c2e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ee0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee2:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001ee4:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee6:	462a      	mov	r2, r5
 8001ee8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001eea:	b9f3      	cbnz	r3, 8001f2a <HAL_I2C_Master_Transmit+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eec:	f7ff ff46 	bl	8001d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ef0:	b9f0      	cbnz	r0, 8001f30 <HAL_I2C_Master_Transmit+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001efe:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001f02:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f10:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f14:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001f18:	e00e      	b.n	8001f38 <HAL_I2C_Master_Transmit+0xcc>
      hi2c->XferSize = hi2c->XferCount;
 8001f1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f1c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	e7d6      	b.n	8001ed8 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2a:	f7ff fefe 	bl	8001d2a <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2e:	b140      	cbz	r0, 8001f42 <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d103      	bne.n	8001f3e <HAL_I2C_Master_Transmit+0xd2>
          return HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
}
 8001f38:	b003      	add	sp, #12
 8001f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8001f3e:	2003      	movs	r0, #3
 8001f40:	e7fa      	b.n	8001f38 <HAL_I2C_Master_Transmit+0xcc>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f44:	6822      	ldr	r2, [r4, #0]
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	6261      	str	r1, [r4, #36]	; 0x24
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001f4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f52:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001f54:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001f56:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001f58:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001f5a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f5c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d1be      	bne.n	8001ee0 <HAL_I2C_Master_Transmit+0x74>
 8001f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0ba      	beq.n	8001ee0 <HAL_I2C_Master_Transmit+0x74>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f6a:	9500      	str	r5, [sp, #0]
 8001f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff fe76 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d1e1      	bne.n	8001f3e <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d903      	bls.n	8001f8a <HAL_I2C_Master_Transmit+0x11e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f82:	22ff      	movs	r2, #255	; 0xff
 8001f84:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f86:	9000      	str	r0, [sp, #0]
 8001f88:	e7a4      	b.n	8001ed4 <HAL_I2C_Master_Transmit+0x68>
          hi2c->XferSize = hi2c->XferCount;
 8001f8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f8c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	8522      	strh	r2, [r4, #40]	; 0x28
 8001f92:	e7c6      	b.n	8001f22 <HAL_I2C_Master_Transmit+0xb6>
    return HAL_BUSY;
 8001f94:	2002      	movs	r0, #2
 8001f96:	e7cf      	b.n	8001f38 <HAL_I2C_Master_Transmit+0xcc>
 8001f98:	80002000 	.word	0x80002000

08001f9c <HAL_I2C_IsDeviceReady>:
{
 8001f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa0:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001faa:	2b20      	cmp	r3, #32
{
 8001fac:	4604      	mov	r4, r0
 8001fae:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	d17c      	bne.n	80020ac <HAL_I2C_IsDeviceReady+0x110>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001fb2:	6803      	ldr	r3, [r0, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8001fba:	d177      	bne.n	80020ac <HAL_I2C_IsDeviceReady+0x110>
    __HAL_LOCK(hi2c);
 8001fbc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001fc0:	2a01      	cmp	r2, #1
 8001fc2:	d073      	beq.n	80020ac <HAL_I2C_IsDeviceReady+0x110>
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8001fca:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001fd4:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001fda:	68e3      	ldr	r3, [r4, #12]
 8001fdc:	6822      	ldr	r2, [r4, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	bf06      	itte	eq
 8001fe2:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 8001fe6:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8001fea:	464b      	movne	r3, r9
 8001fec:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8001fee:	f7fe ffa9 	bl	8000f44 <HAL_GetTick>
 8001ff2:	4607      	mov	r7, r0
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	0691      	lsls	r1, r2, #26
 8001ffa:	d512      	bpl.n	8002022 <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	f012 0210 	ands.w	r2, r2, #16
 8002002:	d12a      	bne.n	800205a <HAL_I2C_IsDeviceReady+0xbe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002004:	9700      	str	r7, [sp, #0]
 8002006:	462b      	mov	r3, r5
 8002008:	2120      	movs	r1, #32
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff fe29 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8002010:	b1c8      	cbz	r0, 8002046 <HAL_I2C_IsDeviceReady+0xaa>
    return HAL_TIMEOUT;
 8002012:	2003      	movs	r0, #3
 8002014:	e01e      	b.n	8002054 <HAL_I2C_IsDeviceReady+0xb8>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002016:	f7fe ff95 	bl	8000f44 <HAL_GetTick>
 800201a:	1bc0      	subs	r0, r0, r7
 800201c:	4285      	cmp	r5, r0
 800201e:	d2e9      	bcs.n	8001ff4 <HAL_I2C_IsDeviceReady+0x58>
 8002020:	e00a      	b.n	8002038 <HAL_I2C_IsDeviceReady+0x9c>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	06d2      	lsls	r2, r2, #27
 8002026:	d4e9      	bmi.n	8001ffc <HAL_I2C_IsDeviceReady+0x60>
 8002028:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800202c:	2aa0      	cmp	r2, #160	; 0xa0
 800202e:	d0e5      	beq.n	8001ffc <HAL_I2C_IsDeviceReady+0x60>
        if (Timeout != HAL_MAX_DELAY)
 8002030:	1c68      	adds	r0, r5, #1
 8002032:	d0e0      	beq.n	8001ff6 <HAL_I2C_IsDeviceReady+0x5a>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002034:	2d00      	cmp	r5, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_I2C_IsDeviceReady+0x7a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	2320      	movs	r3, #32
 800203a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800203e:	2300      	movs	r3, #0
 8002040:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002044:	e7e5      	b.n	8002012 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	2320      	movs	r3, #32
 800204a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800204c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8002050:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8002054:	b004      	add	sp, #16
 8002056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800205a:	2200      	movs	r2, #0
 800205c:	9700      	str	r7, [sp, #0]
 800205e:	462b      	mov	r3, r5
 8002060:	2120      	movs	r1, #32
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff fdfd 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 8002068:	4602      	mov	r2, r0
 800206a:	2800      	cmp	r0, #0
 800206c:	d1d1      	bne.n	8002012 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002072:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002076:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials++ == Trials)
 800207c:	9903      	ldr	r1, [sp, #12]
 800207e:	1c48      	adds	r0, r1, #1
 8002080:	4541      	cmp	r1, r8
 8002082:	9003      	str	r0, [sp, #12]
 8002084:	d10e      	bne.n	80020a4 <HAL_I2C_IsDeviceReady+0x108>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800208c:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800208e:	4620      	mov	r0, r4
 8002090:	9700      	str	r7, [sp, #0]
 8002092:	462b      	mov	r3, r5
 8002094:	4651      	mov	r1, sl
 8002096:	f7ff fde4 	bl	8001c62 <I2C_WaitOnFlagUntilTimeout>
 800209a:	2800      	cmp	r0, #0
 800209c:	d1b9      	bne.n	8002012 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	f8c3 a01c 	str.w	sl, [r3, #28]
    while (I2C_Trials < Trials);
 80020a4:	9b03      	ldr	r3, [sp, #12]
 80020a6:	4598      	cmp	r8, r3
 80020a8:	d897      	bhi.n	8001fda <HAL_I2C_IsDeviceReady+0x3e>
 80020aa:	e7c5      	b.n	8002038 <HAL_I2C_IsDeviceReady+0x9c>
    return HAL_BUSY;
 80020ac:	2002      	movs	r0, #2
 80020ae:	e7d1      	b.n	8002054 <HAL_I2C_IsDeviceReady+0xb8>

080020b0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	2a20      	cmp	r2, #32
{
 80020b8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ba:	d11d      	bne.n	80020f8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d019      	beq.n	80020f8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	2324      	movs	r3, #36	; 0x24
 80020c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ca:	6803      	ldr	r3, [r0, #0]
 80020cc:	681c      	ldr	r4, [r3, #0]
 80020ce:	f024 0401 	bic.w	r4, r4, #1
 80020d2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d4:	681c      	ldr	r4, [r3, #0]
 80020d6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80020da:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020dc:	681c      	ldr	r4, [r3, #0]
 80020de:	4321      	orrs	r1, r4
 80020e0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	f041 0101 	orr.w	r1, r1, #1
 80020e8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ea:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2002      	movs	r0, #2
  }
}
 80020fa:	bd10      	pop	{r4, pc}

080020fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020fc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fe:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002102:	b2e4      	uxtb	r4, r4
 8002104:	2c20      	cmp	r4, #32
 8002106:	d11c      	bne.n	8002142 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002108:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800210c:	2b01      	cmp	r3, #1
 800210e:	d018      	beq.n	8002142 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002110:	2324      	movs	r3, #36	; 0x24
 8002112:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002116:	6803      	ldr	r3, [r0, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002120:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002122:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002126:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800212a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002134:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002136:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800213a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800213e:	4618      	mov	r0, r3
 8002140:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002142:	2002      	movs	r0, #2
  }
}
 8002144:	bd10      	pop	{r4, pc}
	...

08002148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214c:	4605      	mov	r5, r0
 800214e:	b918      	cbnz	r0, 8002158 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002150:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8002152:	b002      	add	sp, #8
 8002154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002158:	6803      	ldr	r3, [r0, #0]
 800215a:	07df      	lsls	r7, r3, #31
 800215c:	d411      	bmi.n	8002182 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	682b      	ldr	r3, [r5, #0]
 8002160:	079e      	lsls	r6, r3, #30
 8002162:	f100 8088 	bmi.w	8002276 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	682b      	ldr	r3, [r5, #0]
 8002168:	071c      	lsls	r4, r3, #28
 800216a:	f100 80fc 	bmi.w	8002366 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	0758      	lsls	r0, r3, #29
 8002172:	f100 8145 	bmi.w	8002400 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002176:	69aa      	ldr	r2, [r5, #24]
 8002178:	2a00      	cmp	r2, #0
 800217a:	f040 81dc 	bne.w	8002536 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 800217e:	2000      	movs	r0, #0
 8002180:	e7e7      	b.n	8002152 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002182:	4cbd      	ldr	r4, [pc, #756]	; (8002478 <HAL_RCC_OscConfig+0x330>)
 8002184:	6863      	ldr	r3, [r4, #4]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00a      	beq.n	80021a4 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d119      	bne.n	80021cc <HAL_RCC_OscConfig+0x84>
 8002198:	6863      	ldr	r3, [r4, #4]
 800219a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d113      	bne.n	80021cc <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	6821      	ldr	r1, [r4, #0]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2201      	movs	r2, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	420b      	tst	r3, r1
 80021c2:	d0cc      	beq.n	800215e <HAL_RCC_OscConfig+0x16>
 80021c4:	686b      	ldr	r3, [r5, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1c9      	bne.n	800215e <HAL_RCC_OscConfig+0x16>
 80021ca:	e7c1      	b.n	8002150 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021cc:	686b      	ldr	r3, [r5, #4]
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d11e      	bne.n	8002212 <HAL_RCC_OscConfig+0xca>
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021dc:	f7fe feb2 	bl	8000f44 <HAL_GetTick>
 80021e0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80021e4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	2701      	movs	r7, #1
 80021e8:	fa96 f3a6 	rbit	r3, r6
 80021ec:	6822      	ldr	r2, [r4, #0]
 80021ee:	fa96 f3a6 	rbit	r3, r6
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	fa07 f303 	lsl.w	r3, r7, r3
 80021fe:	4213      	tst	r3, r2
 8002200:	d1ad      	bne.n	800215e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002202:	f7fe fe9f 	bl	8000f44 <HAL_GetTick>
 8002206:	eba0 0008 	sub.w	r0, r0, r8
 800220a:	2864      	cmp	r0, #100	; 0x64
 800220c:	d9ec      	bls.n	80021e8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800220e:	2003      	movs	r0, #3
 8002210:	e79f      	b.n	8002152 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	bb0b      	cbnz	r3, 8002258 <HAL_RCC_OscConfig+0x110>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002222:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002224:	f7fe fe8e 	bl	8000f44 <HAL_GetTick>
 8002228:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800222c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	2701      	movs	r7, #1
 8002230:	fa96 f3a6 	rbit	r3, r6
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	fa96 f3a6 	rbit	r3, r6
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa07 f303 	lsl.w	r3, r7, r3
 8002246:	4213      	tst	r3, r2
 8002248:	d089      	beq.n	800215e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224a:	f7fe fe7b 	bl	8000f44 <HAL_GetTick>
 800224e:	eba0 0008 	sub.w	r0, r0, r8
 8002252:	2864      	cmp	r0, #100	; 0x64
 8002254:	d9ec      	bls.n	8002230 <HAL_RCC_OscConfig+0xe8>
 8002256:	e7da      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	d103      	bne.n	8002268 <HAL_RCC_OscConfig+0x120>
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	e7b5      	b.n	80021d4 <HAL_RCC_OscConfig+0x8c>
 8002268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226c:	6023      	str	r3, [r4, #0]
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002274:	e7b1      	b.n	80021da <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002276:	4c80      	ldr	r4, [pc, #512]	; (8002478 <HAL_RCC_OscConfig+0x330>)
 8002278:	6863      	ldr	r3, [r4, #4]
 800227a:	f013 0f0c 	tst.w	r3, #12
 800227e:	d00a      	beq.n	8002296 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002280:	6863      	ldr	r3, [r4, #4]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b08      	cmp	r3, #8
 8002288:	d125      	bne.n	80022d6 <HAL_RCC_OscConfig+0x18e>
 800228a:	6863      	ldr	r3, [r4, #4]
 800228c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002294:	d11f      	bne.n	80022d6 <HAL_RCC_OscConfig+0x18e>
 8002296:	2302      	movs	r3, #2
 8002298:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229c:	6821      	ldr	r1, [r4, #0]
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2201      	movs	r2, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	420b      	tst	r3, r1
 80022b2:	d003      	beq.n	80022bc <HAL_RCC_OscConfig+0x174>
 80022b4:	68eb      	ldr	r3, [r5, #12]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f47f af4a 	bne.w	8002150 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	6821      	ldr	r1, [r4, #0]
 80022be:	23f8      	movs	r3, #248	; 0xf8
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	fab3 f283 	clz	r2, r3
 80022c8:	692b      	ldr	r3, [r5, #16]
 80022ca:	4093      	lsls	r3, r2
 80022cc:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80022d0:	4313      	orrs	r3, r2
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	e747      	b.n	8002166 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d6:	68ea      	ldr	r2, [r5, #12]
 80022d8:	2601      	movs	r6, #1
 80022da:	b30a      	cbz	r2, 8002320 <HAL_RCC_OscConfig+0x1d8>
 80022dc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	2702      	movs	r7, #2
 80022f0:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80022f2:	f7fe fe27 	bl	8000f44 <HAL_GetTick>
 80022f6:	4680      	mov	r8, r0
 80022f8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	fa97 f3a7 	rbit	r3, r7
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	fa06 f303 	lsl.w	r3, r6, r3
 800230e:	4213      	tst	r3, r2
 8002310:	d1d4      	bne.n	80022bc <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe fe17 	bl	8000f44 <HAL_GetTick>
 8002316:	eba0 0008 	sub.w	r0, r0, r8
 800231a:	2802      	cmp	r0, #2
 800231c:	d9ec      	bls.n	80022f8 <HAL_RCC_OscConfig+0x1b0>
 800231e:	e776      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
 8002320:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	2702      	movs	r7, #2
 8002334:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002336:	f7fe fe05 	bl	8000f44 <HAL_GetTick>
 800233a:	4680      	mov	r8, r0
 800233c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	fa97 f3a7 	rbit	r3, r7
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	fa06 f303 	lsl.w	r3, r6, r3
 8002352:	4213      	tst	r3, r2
 8002354:	f43f af07 	beq.w	8002166 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002358:	f7fe fdf4 	bl	8000f44 <HAL_GetTick>
 800235c:	eba0 0008 	sub.w	r0, r0, r8
 8002360:	2802      	cmp	r0, #2
 8002362:	d9eb      	bls.n	800233c <HAL_RCC_OscConfig+0x1f4>
 8002364:	e753      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002366:	696a      	ldr	r2, [r5, #20]
 8002368:	4e43      	ldr	r6, [pc, #268]	; (8002478 <HAL_RCC_OscConfig+0x330>)
 800236a:	4944      	ldr	r1, [pc, #272]	; (800247c <HAL_RCC_OscConfig+0x334>)
 800236c:	2401      	movs	r4, #1
 800236e:	b31a      	cbz	r2, 80023b8 <HAL_RCC_OscConfig+0x270>
 8002370:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	440b      	add	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	2702      	movs	r7, #2
 800237e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8002380:	f7fe fde0 	bl	8000f44 <HAL_GetTick>
 8002384:	4680      	mov	r8, r0
 8002386:	fa97 f3a7 	rbit	r3, r7
 800238a:	fa97 f3a7 	rbit	r3, r7
 800238e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002394:	fa97 f3a7 	rbit	r3, r7
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa04 f303 	lsl.w	r3, r4, r3
 80023a4:	4213      	tst	r3, r2
 80023a6:	f47f aee2 	bne.w	800216e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7fe fdcb 	bl	8000f44 <HAL_GetTick>
 80023ae:	eba0 0008 	sub.w	r0, r0, r8
 80023b2:	2802      	cmp	r0, #2
 80023b4:	d9e7      	bls.n	8002386 <HAL_RCC_OscConfig+0x23e>
 80023b6:	e72a      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
 80023b8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	440b      	add	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	2702      	movs	r7, #2
 80023c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023c8:	f7fe fdbc 	bl	8000f44 <HAL_GetTick>
 80023cc:	4680      	mov	r8, r0
 80023ce:	fa97 f3a7 	rbit	r3, r7
 80023d2:	fa97 f3a7 	rbit	r3, r7
 80023d6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80023dc:	fa97 f3a7 	rbit	r3, r7
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa04 f303 	lsl.w	r3, r4, r3
 80023ec:	4213      	tst	r3, r2
 80023ee:	f43f aebe 	beq.w	800216e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f2:	f7fe fda7 	bl	8000f44 <HAL_GetTick>
 80023f6:	eba0 0008 	sub.w	r0, r0, r8
 80023fa:	2802      	cmp	r0, #2
 80023fc:	d9e7      	bls.n	80023ce <HAL_RCC_OscConfig+0x286>
 80023fe:	e706      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002400:	4c1d      	ldr	r4, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x330>)
 8002402:	69e3      	ldr	r3, [r4, #28]
 8002404:	00d9      	lsls	r1, r3, #3
 8002406:	d434      	bmi.n	8002472 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	69e3      	ldr	r3, [r4, #28]
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	61e3      	str	r3, [r4, #28]
 8002410:	69e3      	ldr	r3, [r4, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800241a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4f18      	ldr	r7, [pc, #96]	; (8002480 <HAL_RCC_OscConfig+0x338>)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	05da      	lsls	r2, r3, #23
 8002422:	d52f      	bpl.n	8002484 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	68ab      	ldr	r3, [r5, #8]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d13d      	bne.n	80024a6 <HAL_RCC_OscConfig+0x35e>
 800242a:	6a23      	ldr	r3, [r4, #32]
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002432:	f7fe fd87 	bl	8000f44 <HAL_GetTick>
 8002436:	2702      	movs	r7, #2
 8002438:	4682      	mov	sl, r0
 800243a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	f04f 0801 	mov.w	r8, #1
 8002440:	fa97 f3a7 	rbit	r3, r7
 8002444:	fa97 f3a7 	rbit	r3, r7
 8002448:	2b00      	cmp	r3, #0
 800244a:	d06c      	beq.n	8002526 <HAL_RCC_OscConfig+0x3de>
 800244c:	6a22      	ldr	r2, [r4, #32]
 800244e:	fa99 f3a9 	rbit	r3, r9
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	fa08 f303 	lsl.w	r3, r8, r3
 800245e:	4213      	tst	r3, r2
 8002460:	d058      	beq.n	8002514 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8002462:	2e00      	cmp	r6, #0
 8002464:	f43f ae87 	beq.w	8002176 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	69e3      	ldr	r3, [r4, #28]
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	61e3      	str	r3, [r4, #28]
 8002470:	e681      	b.n	8002176 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2600      	movs	r6, #0
 8002474:	e7d2      	b.n	800241c <HAL_RCC_OscConfig+0x2d4>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	10908120 	.word	0x10908120
 8002480:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800248c:	f7fe fd5a 	bl	8000f44 <HAL_GetTick>
 8002490:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	05db      	lsls	r3, r3, #23
 8002496:	d4c5      	bmi.n	8002424 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002498:	f7fe fd54 	bl	8000f44 <HAL_GetTick>
 800249c:	eba0 0008 	sub.w	r0, r0, r8
 80024a0:	2864      	cmp	r0, #100	; 0x64
 80024a2:	d9f6      	bls.n	8002492 <HAL_RCC_OscConfig+0x34a>
 80024a4:	e6b3      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a6:	bb3b      	cbnz	r3, 80024f8 <HAL_RCC_OscConfig+0x3b0>
 80024a8:	6a23      	ldr	r3, [r4, #32]
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6223      	str	r3, [r4, #32]
 80024b0:	6a23      	ldr	r3, [r4, #32]
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80024b8:	f7fe fd44 	bl	8000f44 <HAL_GetTick>
 80024bc:	2702      	movs	r7, #2
 80024be:	4682      	mov	sl, r0
 80024c0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c2:	f04f 0801 	mov.w	r8, #1
 80024c6:	fa97 f3a7 	rbit	r3, r7
 80024ca:	fa97 f3a7 	rbit	r3, r7
 80024ce:	b373      	cbz	r3, 800252e <HAL_RCC_OscConfig+0x3e6>
 80024d0:	6a22      	ldr	r2, [r4, #32]
 80024d2:	fa99 f3a9 	rbit	r3, r9
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	fa08 f303 	lsl.w	r3, r8, r3
 80024e2:	4213      	tst	r3, r2
 80024e4:	d0bd      	beq.n	8002462 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fd2d 	bl	8000f44 <HAL_GetTick>
 80024ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80024ee:	eba0 000a 	sub.w	r0, r0, sl
 80024f2:	4298      	cmp	r0, r3
 80024f4:	d9e7      	bls.n	80024c6 <HAL_RCC_OscConfig+0x37e>
 80024f6:	e68a      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	6a23      	ldr	r3, [r4, #32]
 80024fc:	d103      	bne.n	8002506 <HAL_RCC_OscConfig+0x3be>
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6223      	str	r3, [r4, #32]
 8002504:	e791      	b.n	800242a <HAL_RCC_OscConfig+0x2e2>
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	6223      	str	r3, [r4, #32]
 800250c:	6a23      	ldr	r3, [r4, #32]
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	e78d      	b.n	8002430 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fd16 	bl	8000f44 <HAL_GetTick>
 8002518:	f241 3388 	movw	r3, #5000	; 0x1388
 800251c:	eba0 000a 	sub.w	r0, r0, sl
 8002520:	4298      	cmp	r0, r3
 8002522:	d98d      	bls.n	8002440 <HAL_RCC_OscConfig+0x2f8>
 8002524:	e673      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
 8002526:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800252c:	e78f      	b.n	800244e <HAL_RCC_OscConfig+0x306>
 800252e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002534:	e7cd      	b.n	80024d2 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002536:	4c44      	ldr	r4, [pc, #272]	; (8002648 <HAL_RCC_OscConfig+0x500>)
 8002538:	6863      	ldr	r3, [r4, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	f43f ae06 	beq.w	8002150 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002544:	2a02      	cmp	r2, #2
 8002546:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800254a:	d158      	bne.n	80025fe <HAL_RCC_OscConfig+0x4b6>
 800254c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002558:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002562:	f7fe fcef 	bl	8000f44 <HAL_GetTick>
 8002566:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800256a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256c:	2601      	movs	r6, #1
 800256e:	fa97 f3a7 	rbit	r3, r7
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	fa97 f3a7 	rbit	r3, r7
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa06 f303 	lsl.w	r3, r6, r3
 8002584:	4213      	tst	r3, r2
 8002586:	d133      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002588:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800258a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800258c:	f023 030f 	bic.w	r3, r3, #15
 8002590:	4313      	orrs	r3, r2
 8002592:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002594:	6862      	ldr	r2, [r4, #4]
 8002596:	6a2b      	ldr	r3, [r5, #32]
 8002598:	69e9      	ldr	r1, [r5, #28]
 800259a:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800259e:	430b      	orrs	r3, r1
 80025a0:	4313      	orrs	r3, r2
 80025a2:	6063      	str	r3, [r4, #4]
 80025a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80025be:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80025c0:	f7fe fcc0 	bl	8000f44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80025c6:	4607      	mov	r7, r0
 80025c8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	fa95 f3a5 	rbit	r3, r5
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	fa06 f303 	lsl.w	r3, r6, r3
 80025de:	4213      	tst	r3, r2
 80025e0:	f47f adcd 	bne.w	800217e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fcae 	bl	8000f44 <HAL_GetTick>
 80025e8:	1bc0      	subs	r0, r0, r7
 80025ea:	2802      	cmp	r0, #2
 80025ec:	d9ec      	bls.n	80025c8 <HAL_RCC_OscConfig+0x480>
 80025ee:	e60e      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fca8 	bl	8000f44 <HAL_GetTick>
 80025f4:	eba0 0008 	sub.w	r0, r0, r8
 80025f8:	2802      	cmp	r0, #2
 80025fa:	d9b8      	bls.n	800256e <HAL_RCC_OscConfig+0x426>
 80025fc:	e607      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
 80025fe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800260a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002614:	f7fe fc96 	bl	8000f44 <HAL_GetTick>
 8002618:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800261c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	2601      	movs	r6, #1
 8002620:	fa95 f3a5 	rbit	r3, r5
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	fa95 f3a5 	rbit	r3, r5
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	fa06 f303 	lsl.w	r3, r6, r3
 8002636:	4213      	tst	r3, r2
 8002638:	f43f ada1 	beq.w	800217e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fc82 	bl	8000f44 <HAL_GetTick>
 8002640:	1bc0      	subs	r0, r0, r7
 8002642:	2802      	cmp	r0, #2
 8002644:	d9ec      	bls.n	8002620 <HAL_RCC_OscConfig+0x4d8>
 8002646:	e5e2      	b.n	800220e <HAL_RCC_OscConfig+0xc6>
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800264c:	4911      	ldr	r1, [pc, #68]	; (8002694 <HAL_RCC_GetSysClockFreq+0x48>)
 800264e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002650:	f003 020c 	and.w	r2, r3, #12
 8002654:	2a08      	cmp	r2, #8
 8002656:	d11a      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x42>
 8002658:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800265c:	fa92 f2a2 	rbit	r2, r2
 8002660:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002662:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002666:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002668:	fa90 f0a0 	rbit	r0, r0
 800266c:	fab0 f080 	clz	r0, r0
 8002670:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002674:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002678:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800267a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800267e:	4807      	ldr	r0, [pc, #28]	; (800269c <HAL_RCC_GetSysClockFreq+0x50>)
 8002680:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002682:	4807      	ldr	r0, [pc, #28]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8002684:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002688:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800268a:	4348      	muls	r0, r1
 800268c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800268e:	4804      	ldr	r0, [pc, #16]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	08008da8 	.word	0x08008da8
 800269c:	08008db8 	.word	0x08008db8
 80026a0:	007a1200 	.word	0x007a1200

080026a4 <HAL_RCC_ClockConfig>:
{
 80026a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80026aa:	4604      	mov	r4, r0
 80026ac:	b910      	cbnz	r0, 80026b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
 80026b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <HAL_RCC_ClockConfig+0x144>)
 80026b6:	6813      	ldr	r3, [r2, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	428b      	cmp	r3, r1
 80026be:	d32e      	bcc.n	800271e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	0791      	lsls	r1, r2, #30
 80026c4:	d436      	bmi.n	8002734 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	07d2      	lsls	r2, r2, #31
 80026c8:	d43c      	bmi.n	8002744 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ca:	4a47      	ldr	r2, [pc, #284]	; (80027e8 <HAL_RCC_ClockConfig+0x144>)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	429d      	cmp	r5, r3
 80026d4:	d375      	bcc.n	80027c2 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	4d44      	ldr	r5, [pc, #272]	; (80027ec <HAL_RCC_ClockConfig+0x148>)
 80026da:	f012 0f04 	tst.w	r2, #4
 80026de:	d17c      	bne.n	80027da <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	0713      	lsls	r3, r2, #28
 80026e2:	d506      	bpl.n	80026f2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e4:	686b      	ldr	r3, [r5, #4]
 80026e6:	6922      	ldr	r2, [r4, #16]
 80026e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026f0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026f2:	f7ff ffab 	bl	800264c <HAL_RCC_GetSysClockFreq>
 80026f6:	686b      	ldr	r3, [r5, #4]
 80026f8:	22f0      	movs	r2, #240	; 0xf0
 80026fa:	fa92 f2a2 	rbit	r2, r2
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002706:	40d3      	lsrs	r3, r2
 8002708:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x14c>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	40d8      	lsrs	r0, r3
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCC_ClockConfig+0x150>)
 8002710:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fbd4 	bl	8000ec0 <HAL_InitTick>
  return HAL_OK;
 8002718:	2000      	movs	r0, #0
 800271a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	6813      	ldr	r3, [r2, #0]
 8002720:	f023 0307 	bic.w	r3, r3, #7
 8002724:	430b      	orrs	r3, r1
 8002726:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002728:	6813      	ldr	r3, [r2, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	4299      	cmp	r1, r3
 8002730:	d1bd      	bne.n	80026ae <HAL_RCC_ClockConfig+0xa>
 8002732:	e7c5      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	492d      	ldr	r1, [pc, #180]	; (80027ec <HAL_RCC_ClockConfig+0x148>)
 8002736:	68a0      	ldr	r0, [r4, #8]
 8002738:	684b      	ldr	r3, [r1, #4]
 800273a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273e:	4303      	orrs	r3, r0
 8002740:	604b      	str	r3, [r1, #4]
 8002742:	e7c0      	b.n	80026c6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002744:	6862      	ldr	r2, [r4, #4]
 8002746:	4e29      	ldr	r6, [pc, #164]	; (80027ec <HAL_RCC_ClockConfig+0x148>)
 8002748:	2a01      	cmp	r2, #1
 800274a:	d127      	bne.n	800279c <HAL_RCC_ClockConfig+0xf8>
 800274c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002750:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002754:	6831      	ldr	r1, [r6, #0]
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	d0a1      	beq.n	80026ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276a:	6873      	ldr	r3, [r6, #4]
 800276c:	f023 0303 	bic.w	r3, r3, #3
 8002770:	431a      	orrs	r2, r3
 8002772:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8002774:	f7fe fbe6 	bl	8000f44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800277c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	6873      	ldr	r3, [r6, #4]
 8002780:	6862      	ldr	r2, [r4, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800278a:	d09e      	beq.n	80026ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fbda 	bl	8000f44 <HAL_GetTick>
 8002790:	1bc0      	subs	r0, r0, r7
 8002792:	4540      	cmp	r0, r8
 8002794:	d9f3      	bls.n	800277e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8002796:	2003      	movs	r0, #3
}
 8002798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279c:	2a02      	cmp	r2, #2
 800279e:	bf0c      	ite	eq
 80027a0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80027a4:	2302      	movne	r3, #2
 80027a6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	6830      	ldr	r0, [r6, #0]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	4203      	tst	r3, r0
 80027c0:	e7d2      	b.n	8002768 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	f023 0307 	bic.w	r3, r3, #7
 80027c8:	432b      	orrs	r3, r5
 80027ca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027cc:	6813      	ldr	r3, [r2, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	429d      	cmp	r5, r3
 80027d4:	f47f af6b 	bne.w	80026ae <HAL_RCC_ClockConfig+0xa>
 80027d8:	e77d      	b.n	80026d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027da:	686b      	ldr	r3, [r5, #4]
 80027dc:	68e1      	ldr	r1, [r4, #12]
 80027de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027e2:	430b      	orrs	r3, r1
 80027e4:	606b      	str	r3, [r5, #4]
 80027e6:	e77b      	b.n	80026e0 <HAL_RCC_ClockConfig+0x3c>
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08008f56 	.word	0x08008f56
 80027f4:	20000018 	.word	0x20000018

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	fa92 f2a2 	rbit	r2, r2
 8002804:	fab2 f282 	clz	r2, r2
 8002808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800280c:	40d3      	lsrs	r3, r2
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002814:	6810      	ldr	r0, [r2, #0]
}    
 8002816:	40d8      	lsrs	r0, r3
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	08008f66 	.word	0x08008f66
 8002824:	20000018 	.word	0x20000018

08002828 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_GetPCLK2Freq+0x24>)
 800282a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	fa92 f2a2 	rbit	r2, r2
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800283c:	40d3      	lsrs	r3, r2
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002840:	5cd3      	ldrb	r3, [r2, r3]
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002844:	6810      	ldr	r0, [r2, #0]
} 
 8002846:	40d8      	lsrs	r0, r3
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	08008f66 	.word	0x08008f66
 8002854:	20000018 	.word	0x20000018

08002858 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002858:	6803      	ldr	r3, [r0, #0]
{
 800285a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800285e:	03df      	lsls	r7, r3, #15
{
 8002860:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002862:	d523      	bpl.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002864:	4d9b      	ldr	r5, [pc, #620]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002866:	69eb      	ldr	r3, [r5, #28]
 8002868:	00de      	lsls	r6, r3, #3
 800286a:	f100 80d7 	bmi.w	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	69eb      	ldr	r3, [r5, #28]
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	61eb      	str	r3, [r5, #28]
 8002876:	69eb      	ldr	r3, [r5, #28]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002880:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4f95      	ldr	r7, [pc, #596]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	05d8      	lsls	r0, r3, #23
 8002888:	f140 80ca 	bpl.w	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800288c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800288e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002892:	f040 80da 	bne.w	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002896:	6a2b      	ldr	r3, [r5, #32]
 8002898:	6862      	ldr	r2, [r4, #4]
 800289a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289e:	4313      	orrs	r3, r2
 80028a0:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a2:	b11e      	cbz	r6, 80028ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	69eb      	ldr	r3, [r5, #28]
 80028a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028aa:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	07c3      	lsls	r3, r0, #31
 80028b0:	d506      	bpl.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b2:	4a88      	ldr	r2, [pc, #544]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80028b4:	68a1      	ldr	r1, [r4, #8]
 80028b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	430b      	orrs	r3, r1
 80028be:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c0:	0787      	lsls	r7, r0, #30
 80028c2:	d506      	bpl.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c4:	4a83      	ldr	r2, [pc, #524]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80028c6:	68e1      	ldr	r1, [r4, #12]
 80028c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028ce:	430b      	orrs	r3, r1
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d2:	0746      	lsls	r6, r0, #29
 80028d4:	d506      	bpl.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028d6:	4a7f      	ldr	r2, [pc, #508]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80028d8:	6921      	ldr	r1, [r4, #16]
 80028da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028dc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e4:	0685      	lsls	r5, r0, #26
 80028e6:	d506      	bpl.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e8:	4a7a      	ldr	r2, [pc, #488]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80028ea:	69e1      	ldr	r1, [r4, #28]
 80028ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028ee:	f023 0310 	bic.w	r3, r3, #16
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028f6:	0381      	lsls	r1, r0, #14
 80028f8:	d506      	bpl.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028fa:	4a76      	ldr	r2, [pc, #472]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80028fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80028fe:	6853      	ldr	r3, [r2, #4]
 8002900:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002904:	430b      	orrs	r3, r1
 8002906:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002908:	0642      	lsls	r2, r0, #25
 800290a:	d506      	bpl.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800290c:	4a71      	ldr	r2, [pc, #452]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800290e:	6a21      	ldr	r1, [r4, #32]
 8002910:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002912:	f023 0320 	bic.w	r3, r3, #32
 8002916:	430b      	orrs	r3, r1
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800291a:	0343      	lsls	r3, r0, #13
 800291c:	d506      	bpl.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800291e:	4a6d      	ldr	r2, [pc, #436]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002920:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002922:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002928:	430b      	orrs	r3, r1
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800292c:	0707      	lsls	r7, r0, #28
 800292e:	d506      	bpl.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002930:	4a68      	ldr	r2, [pc, #416]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002932:	6961      	ldr	r1, [r4, #20]
 8002934:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002936:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800293a:	430b      	orrs	r3, r1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800293e:	06c6      	lsls	r6, r0, #27
 8002940:	d506      	bpl.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002942:	4a64      	ldr	r2, [pc, #400]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002944:	69a1      	ldr	r1, [r4, #24]
 8002946:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002948:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800294c:	430b      	orrs	r3, r1
 800294e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002950:	0585      	lsls	r5, r0, #22
 8002952:	d506      	bpl.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002954:	4a5f      	ldr	r2, [pc, #380]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002956:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002958:	6853      	ldr	r3, [r2, #4]
 800295a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800295e:	430b      	orrs	r3, r1
 8002960:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002962:	0601      	lsls	r1, r0, #24
 8002964:	d506      	bpl.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002966:	4a5b      	ldr	r2, [pc, #364]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002968:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800296a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800296c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002970:	430b      	orrs	r3, r1
 8002972:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002974:	05c2      	lsls	r2, r0, #23
 8002976:	d506      	bpl.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002978:	4a56      	ldr	r2, [pc, #344]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800297a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800297c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800297e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8002982:	430b      	orrs	r3, r1
 8002984:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002986:	04c3      	lsls	r3, r0, #19
 8002988:	d506      	bpl.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800298a:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800298c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800298e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002994:	430b      	orrs	r3, r1
 8002996:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002998:	0487      	lsls	r7, r0, #18
 800299a:	d506      	bpl.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800299c:	4a4d      	ldr	r2, [pc, #308]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800299e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80029a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029aa:	02c6      	lsls	r6, r0, #11
 80029ac:	d506      	bpl.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029ae:	4a49      	ldr	r2, [pc, #292]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80029b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80029b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80029bc:	0285      	lsls	r5, r0, #10
 80029be:	d506      	bpl.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80029c0:	4a44      	ldr	r2, [pc, #272]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80029c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80029c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80029ca:	430b      	orrs	r3, r1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029ce:	0241      	lsls	r1, r0, #9
 80029d0:	d506      	bpl.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029d2:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80029d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80029d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029dc:	430b      	orrs	r3, r1
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80029e0:	0202      	lsls	r2, r0, #8
 80029e2:	d506      	bpl.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80029e4:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80029e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80029e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80029f2:	01c3      	lsls	r3, r0, #7
 80029f4:	d506      	bpl.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029f6:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80029f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80029fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a04:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002a08:	d01c      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a0a:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002a0c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a18:	2000      	movs	r0, #0
 8002a1a:	e013      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	e730      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002a28:	f7fe fa8c 	bl	8000f44 <HAL_GetTick>
 8002a2c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	05d9      	lsls	r1, r3, #23
 8002a32:	f53f af2b 	bmi.w	800288c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a36:	f7fe fa85 	bl	8000f44 <HAL_GetTick>
 8002a3a:	eba0 0008 	sub.w	r0, r0, r8
 8002a3e:	2864      	cmp	r0, #100	; 0x64
 8002a40:	d9f5      	bls.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8002a42:	2003      	movs	r0, #3
}
 8002a44:	b002      	add	sp, #8
 8002a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a4a:	6862      	ldr	r2, [r4, #4]
 8002a4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a50:	4293      	cmp	r3, r2
 8002a52:	f43f af20 	beq.w	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a56:	6a29      	ldr	r1, [r5, #32]
 8002a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002a60:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a64:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002adc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	4472      	add	r2, lr
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	2701      	movs	r7, #1
 8002a72:	6017      	str	r7, [r2, #0]
 8002a74:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	4473      	add	r3, lr
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a84:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8002a86:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a88:	f57f af05 	bpl.w	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fa5a 	bl	8000f44 <HAL_GetTick>
 8002a90:	f04f 0802 	mov.w	r8, #2
 8002a94:	4682      	mov	sl, r0
 8002a96:	46c1      	mov	r9, r8
 8002a98:	fa98 f3a8 	rbit	r3, r8
 8002a9c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	b1a3      	cbz	r3, 8002acc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002aa2:	6a2a      	ldr	r2, [r5, #32]
 8002aa4:	fa99 f3a9 	rbit	r3, r9
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa07 f303 	lsl.w	r3, r7, r3
 8002ab4:	4213      	tst	r3, r2
 8002ab6:	f47f aeee 	bne.w	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fe fa43 	bl	8000f44 <HAL_GetTick>
 8002abe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ac2:	eba0 000a 	sub.w	r0, r0, sl
 8002ac6:	4298      	cmp	r0, r3
 8002ac8:	d9e6      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002aca:	e7ba      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002acc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002ad2:	e7e7      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	10908100 	.word	0x10908100

08002ae0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae0:	4a32      	ldr	r2, [pc, #200]	; (8002bac <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8002ae2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	4290      	cmp	r0, r2
 8002ae6:	d012      	beq.n	8002b0e <TIM_Base_SetConfig+0x2e>
 8002ae8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002aec:	d00f      	beq.n	8002b0e <TIM_Base_SetConfig+0x2e>
 8002aee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002af2:	4290      	cmp	r0, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_Base_SetConfig+0x2e>
 8002af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002afa:	4290      	cmp	r0, r2
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0x2e>
 8002afe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002b02:	4290      	cmp	r0, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0x2e>
 8002b06:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d115      	bne.n	8002b3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002b0e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b14:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b16:	4a25      	ldr	r2, [pc, #148]	; (8002bac <TIM_Base_SetConfig+0xcc>)
 8002b18:	4290      	cmp	r0, r2
 8002b1a:	d01d      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b20:	d01a      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b26:	4290      	cmp	r0, r2
 8002b28:	d016      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b2e:	4290      	cmp	r0, r2
 8002b30:	d012      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b32:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002b36:	4290      	cmp	r0, r2
 8002b38:	d00e      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <TIM_Base_SetConfig+0xd0>)
 8002b3c:	4290      	cmp	r0, r2
 8002b3e:	d00b      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b44:	4290      	cmp	r0, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b4c:	4290      	cmp	r0, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0x78>
 8002b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b54:	4290      	cmp	r0, r2
 8002b56:	d103      	bne.n	8002b60 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b58:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b5e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	694a      	ldr	r2, [r1, #20]
 8002b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b66:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002b68:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b6a:	688b      	ldr	r3, [r1, #8]
 8002b6c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002b6e:	680b      	ldr	r3, [r1, #0]
 8002b70:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <TIM_Base_SetConfig+0xcc>)
 8002b74:	4298      	cmp	r0, r3
 8002b76:	d013      	beq.n	8002ba0 <TIM_Base_SetConfig+0xc0>
 8002b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	d00f      	beq.n	8002ba0 <TIM_Base_SetConfig+0xc0>
 8002b80:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002b84:	4298      	cmp	r0, r3
 8002b86:	d00b      	beq.n	8002ba0 <TIM_Base_SetConfig+0xc0>
 8002b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b8c:	4298      	cmp	r0, r3
 8002b8e:	d007      	beq.n	8002ba0 <TIM_Base_SetConfig+0xc0>
 8002b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b94:	4298      	cmp	r0, r3
 8002b96:	d003      	beq.n	8002ba0 <TIM_Base_SetConfig+0xc0>
 8002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9c:	4298      	cmp	r0, r3
 8002b9e:	d101      	bne.n	8002ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba0:	690b      	ldr	r3, [r1, #16]
 8002ba2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	6143      	str	r3, [r0, #20]
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40014000 	.word	0x40014000

08002bb4 <HAL_TIM_PWM_Init>:
{
 8002bb4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	b1a0      	cbz	r0, 8002be4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002bba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bc2:	b91b      	cbnz	r3, 8002bcc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002bc4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002bc8:	f001 f95e 	bl	8003e88 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002bd2:	6820      	ldr	r0, [r4, #0]
 8002bd4:	1d21      	adds	r1, r4, #4
 8002bd6:	f7ff ff83 	bl	8002ae0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
 8002be2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002be4:	2001      	movs	r0, #1
}
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be8:	6a03      	ldr	r3, [r0, #32]
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf0:	6a03      	ldr	r3, [r0, #32]
{
 8002bf2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002bf4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bfe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c02:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c04:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002c06:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002c0a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c0c:	4d1f      	ldr	r5, [pc, #124]	; (8002c8c <TIM_OC1_SetConfig+0xa4>)
 8002c0e:	42a8      	cmp	r0, r5
 8002c10:	d013      	beq.n	8002c3a <TIM_OC1_SetConfig+0x52>
 8002c12:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c16:	42a8      	cmp	r0, r5
 8002c18:	d00f      	beq.n	8002c3a <TIM_OC1_SetConfig+0x52>
 8002c1a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002c1e:	42a8      	cmp	r0, r5
 8002c20:	d00b      	beq.n	8002c3a <TIM_OC1_SetConfig+0x52>
 8002c22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c26:	42a8      	cmp	r0, r5
 8002c28:	d007      	beq.n	8002c3a <TIM_OC1_SetConfig+0x52>
 8002c2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c2e:	42a8      	cmp	r0, r5
 8002c30:	d003      	beq.n	8002c3a <TIM_OC1_SetConfig+0x52>
 8002c32:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c36:	42a8      	cmp	r0, r5
 8002c38:	d122      	bne.n	8002c80 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c3c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002c40:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002c42:	4d12      	ldr	r5, [pc, #72]	; (8002c8c <TIM_OC1_SetConfig+0xa4>)
 8002c44:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c46:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4a:	d013      	beq.n	8002c74 <TIM_OC1_SetConfig+0x8c>
 8002c4c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c50:	42a8      	cmp	r0, r5
 8002c52:	d00f      	beq.n	8002c74 <TIM_OC1_SetConfig+0x8c>
 8002c54:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002c58:	42a8      	cmp	r0, r5
 8002c5a:	d00b      	beq.n	8002c74 <TIM_OC1_SetConfig+0x8c>
 8002c5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c60:	42a8      	cmp	r0, r5
 8002c62:	d007      	beq.n	8002c74 <TIM_OC1_SetConfig+0x8c>
 8002c64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c68:	42a8      	cmp	r0, r5
 8002c6a:	d003      	beq.n	8002c74 <TIM_OC1_SetConfig+0x8c>
 8002c6c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c70:	42a8      	cmp	r0, r5
 8002c72:	d105      	bne.n	8002c80 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c74:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c78:	698e      	ldr	r6, [r1, #24]
 8002c7a:	694c      	ldr	r4, [r1, #20]
 8002c7c:	4334      	orrs	r4, r6
 8002c7e:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c80:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c82:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c84:	684a      	ldr	r2, [r1, #4]
 8002c86:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002c88:	6203      	str	r3, [r0, #32]
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	40012c00 	.word	0x40012c00

08002c90 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c90:	6a03      	ldr	r3, [r0, #32]
 8002c92:	f023 0310 	bic.w	r3, r3, #16
 8002c96:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c98:	6a03      	ldr	r3, [r0, #32]
{
 8002c9a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002c9c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c9e:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ca2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ca6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002caa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002cb0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cb8:	4d1a      	ldr	r5, [pc, #104]	; (8002d24 <TIM_OC2_SetConfig+0x94>)
 8002cba:	42a8      	cmp	r0, r5
 8002cbc:	d007      	beq.n	8002cce <TIM_OC2_SetConfig+0x3e>
 8002cbe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002cc2:	42a8      	cmp	r0, r5
 8002cc4:	d003      	beq.n	8002cce <TIM_OC2_SetConfig+0x3e>
 8002cc6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002cca:	42a8      	cmp	r0, r5
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd8:	4d12      	ldr	r5, [pc, #72]	; (8002d24 <TIM_OC2_SetConfig+0x94>)
 8002cda:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce0:	d012      	beq.n	8002d08 <TIM_OC2_SetConfig+0x78>
 8002ce2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ce6:	42a8      	cmp	r0, r5
 8002ce8:	d00e      	beq.n	8002d08 <TIM_OC2_SetConfig+0x78>
 8002cea:	4d0f      	ldr	r5, [pc, #60]	; (8002d28 <TIM_OC2_SetConfig+0x98>)
 8002cec:	42a8      	cmp	r0, r5
 8002cee:	d00b      	beq.n	8002d08 <TIM_OC2_SetConfig+0x78>
 8002cf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cf4:	42a8      	cmp	r0, r5
 8002cf6:	d007      	beq.n	8002d08 <TIM_OC2_SetConfig+0x78>
 8002cf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cfc:	42a8      	cmp	r0, r5
 8002cfe:	d003      	beq.n	8002d08 <TIM_OC2_SetConfig+0x78>
 8002d00:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d04:	42a8      	cmp	r0, r5
 8002d06:	d106      	bne.n	8002d16 <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d08:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d0c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d0e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d10:	4334      	orrs	r4, r6
 8002d12:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d18:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d1a:	684a      	ldr	r2, [r1, #4]
 8002d1c:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002d1e:	6203      	str	r3, [r0, #32]
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	bf00      	nop
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40014000 	.word	0x40014000

08002d2c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d2c:	6a03      	ldr	r3, [r0, #32]
 8002d2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d32:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d34:	6a03      	ldr	r3, [r0, #32]
{
 8002d36:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002d38:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d3a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002d3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d46:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d48:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002d4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d52:	4d1a      	ldr	r5, [pc, #104]	; (8002dbc <TIM_OC3_SetConfig+0x90>)
 8002d54:	42a8      	cmp	r0, r5
 8002d56:	d007      	beq.n	8002d68 <TIM_OC3_SetConfig+0x3c>
 8002d58:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d5c:	42a8      	cmp	r0, r5
 8002d5e:	d003      	beq.n	8002d68 <TIM_OC3_SetConfig+0x3c>
 8002d60:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002d64:	42a8      	cmp	r0, r5
 8002d66:	d10d      	bne.n	8002d84 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d68:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d72:	4d12      	ldr	r5, [pc, #72]	; (8002dbc <TIM_OC3_SetConfig+0x90>)
 8002d74:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7a:	d012      	beq.n	8002da2 <TIM_OC3_SetConfig+0x76>
 8002d7c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d80:	42a8      	cmp	r0, r5
 8002d82:	d00e      	beq.n	8002da2 <TIM_OC3_SetConfig+0x76>
 8002d84:	4d0e      	ldr	r5, [pc, #56]	; (8002dc0 <TIM_OC3_SetConfig+0x94>)
 8002d86:	42a8      	cmp	r0, r5
 8002d88:	d00b      	beq.n	8002da2 <TIM_OC3_SetConfig+0x76>
 8002d8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d8e:	42a8      	cmp	r0, r5
 8002d90:	d007      	beq.n	8002da2 <TIM_OC3_SetConfig+0x76>
 8002d92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d96:	42a8      	cmp	r0, r5
 8002d98:	d003      	beq.n	8002da2 <TIM_OC3_SetConfig+0x76>
 8002d9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d9e:	42a8      	cmp	r0, r5
 8002da0:	d106      	bne.n	8002db0 <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002da2:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002da6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002da8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002daa:	4334      	orrs	r4, r6
 8002dac:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002db4:	684a      	ldr	r2, [r1, #4]
 8002db6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002db8:	6203      	str	r3, [r0, #32]
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40014000 	.word	0x40014000

08002dc4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dc4:	6a03      	ldr	r3, [r0, #32]
 8002dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dcc:	6a03      	ldr	r3, [r0, #32]
{
 8002dce:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002dd0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dd6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002dda:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dde:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002de4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002dec:	4d10      	ldr	r5, [pc, #64]	; (8002e30 <TIM_OC4_SetConfig+0x6c>)
 8002dee:	42a8      	cmp	r0, r5
 8002df0:	d013      	beq.n	8002e1a <TIM_OC4_SetConfig+0x56>
 8002df2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002df6:	42a8      	cmp	r0, r5
 8002df8:	d00f      	beq.n	8002e1a <TIM_OC4_SetConfig+0x56>
 8002dfa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002dfe:	42a8      	cmp	r0, r5
 8002e00:	d00b      	beq.n	8002e1a <TIM_OC4_SetConfig+0x56>
 8002e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e06:	42a8      	cmp	r0, r5
 8002e08:	d007      	beq.n	8002e1a <TIM_OC4_SetConfig+0x56>
 8002e0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e0e:	42a8      	cmp	r0, r5
 8002e10:	d003      	beq.n	8002e1a <TIM_OC4_SetConfig+0x56>
 8002e12:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002e16:	42a8      	cmp	r0, r5
 8002e18:	d104      	bne.n	8002e24 <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e1a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e1c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e20:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e24:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e26:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e28:	684a      	ldr	r2, [r1, #4]
 8002e2a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002e2c:	6203      	str	r3, [r0, #32]
 8002e2e:	bd30      	pop	{r4, r5, pc}
 8002e30:	40012c00 	.word	0x40012c00

08002e34 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e34:	6a03      	ldr	r3, [r0, #32]
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3c:	6a03      	ldr	r3, [r0, #32]
{
 8002e3e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002e40:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e42:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002e4e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e50:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002e52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e56:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5a:	4d11      	ldr	r5, [pc, #68]	; (8002ea0 <TIM_OC5_SetConfig+0x6c>)
 8002e5c:	42a8      	cmp	r0, r5
 8002e5e:	d013      	beq.n	8002e88 <TIM_OC5_SetConfig+0x54>
 8002e60:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002e64:	42a8      	cmp	r0, r5
 8002e66:	d00f      	beq.n	8002e88 <TIM_OC5_SetConfig+0x54>
 8002e68:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002e6c:	42a8      	cmp	r0, r5
 8002e6e:	d00b      	beq.n	8002e88 <TIM_OC5_SetConfig+0x54>
 8002e70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e74:	42a8      	cmp	r0, r5
 8002e76:	d007      	beq.n	8002e88 <TIM_OC5_SetConfig+0x54>
 8002e78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e7c:	42a8      	cmp	r0, r5
 8002e7e:	d003      	beq.n	8002e88 <TIM_OC5_SetConfig+0x54>
 8002e80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002e84:	42a8      	cmp	r0, r5
 8002e86:	d104      	bne.n	8002e92 <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e88:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e8a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e8e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e92:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e94:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e96:	684a      	ldr	r2, [r1, #4]
 8002e98:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002e9a:	6203      	str	r3, [r0, #32]
 8002e9c:	bd30      	pop	{r4, r5, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40012c00 	.word	0x40012c00

08002ea4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ea4:	6a03      	ldr	r3, [r0, #32]
 8002ea6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002eaa:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eac:	6a03      	ldr	r3, [r0, #32]
{
 8002eae:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002eb0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eb2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002eb6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002eba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ec2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ec4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ec8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	4d10      	ldr	r5, [pc, #64]	; (8002f10 <TIM_OC6_SetConfig+0x6c>)
 8002ece:	42a8      	cmp	r0, r5
 8002ed0:	d013      	beq.n	8002efa <TIM_OC6_SetConfig+0x56>
 8002ed2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ed6:	42a8      	cmp	r0, r5
 8002ed8:	d00f      	beq.n	8002efa <TIM_OC6_SetConfig+0x56>
 8002eda:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002ede:	42a8      	cmp	r0, r5
 8002ee0:	d00b      	beq.n	8002efa <TIM_OC6_SetConfig+0x56>
 8002ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ee6:	42a8      	cmp	r0, r5
 8002ee8:	d007      	beq.n	8002efa <TIM_OC6_SetConfig+0x56>
 8002eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002eee:	42a8      	cmp	r0, r5
 8002ef0:	d003      	beq.n	8002efa <TIM_OC6_SetConfig+0x56>
 8002ef2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ef6:	42a8      	cmp	r0, r5
 8002ef8:	d104      	bne.n	8002f04 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002efa:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002efc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f00:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f04:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f06:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f08:	684a      	ldr	r2, [r1, #4]
 8002f0a:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002f0c:	6203      	str	r3, [r0, #32]
 8002f0e:	bd30      	pop	{r4, r5, pc}
 8002f10:	40012c00 	.word	0x40012c00

08002f14 <HAL_TIM_PWM_ConfigChannel>:
{
 8002f14:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002f16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
{
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	460d      	mov	r5, r1
 8002f20:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002f24:	d010      	beq.n	8002f48 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002f26:	2301      	movs	r3, #1
  switch (Channel)
 8002f28:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002f2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002f32:	d043      	beq.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0xa8>
 8002f34:	d809      	bhi.n	8002f4a <HAL_TIM_PWM_ConfigChannel+0x36>
 8002f36:	b1fa      	cbz	r2, 8002f78 <HAL_TIM_PWM_ConfigChannel+0x64>
 8002f38:	2a04      	cmp	r2, #4
 8002f3a:	d02e      	beq.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f44:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f48:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002f4a:	2a10      	cmp	r2, #16
 8002f4c:	d047      	beq.n	8002fde <HAL_TIM_PWM_ConfigChannel+0xca>
 8002f4e:	2a14      	cmp	r2, #20
 8002f50:	d056      	beq.n	8003000 <HAL_TIM_PWM_ConfigChannel+0xec>
 8002f52:	2a0c      	cmp	r2, #12
 8002f54:	d1f2      	bne.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f56:	6820      	ldr	r0, [r4, #0]
 8002f58:	f7ff ff34 	bl	8002dc4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f5c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f5e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f76:	e030      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	f7ff fe35 	bl	8002be8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f7e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f80:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	f042 0208 	orr.w	r2, r2, #8
 8002f88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	f022 0204 	bic.w	r2, r2, #4
 8002f90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f96:	619a      	str	r2, [r3, #24]
    break;
 8002f98:	e7d0      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f9a:	6820      	ldr	r0, [r4, #0]
 8002f9c:	f7ff fe78 	bl	8002c90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fa2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fba:	e7ec      	b.n	8002f96 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	f7ff feb5 	bl	8002d2c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fc2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002fc4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	f042 0208 	orr.w	r2, r2, #8
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	f022 0204 	bic.w	r2, r2, #4
 8002fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002fda:	61da      	str	r2, [r3, #28]
    break;
 8002fdc:	e7ae      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	f7ff ff28 	bl	8002e34 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fe4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002fe6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fea:	f042 0208 	orr.w	r2, r2, #8
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ff2:	f022 0204 	bic.w	r2, r2, #4
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffa:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8002ffe:	e79d      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	f7ff ff4f 	bl	8002ea4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003006:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8003008:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800300a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800300c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003012:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800301a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800301c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003020:	e7ec      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003024:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
{
 800302a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800302c:	d020      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 800302e:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003030:	4d10      	ldr	r5, [pc, #64]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8003032:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003034:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003036:	42aa      	cmp	r2, r5
 8003038:	d007      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800303a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800303e:	42aa      	cmp	r2, r5
 8003040:	d003      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8003042:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8003046:	42aa      	cmp	r2, r5
 8003048:	d103      	bne.n	8003052 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800304a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800304c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003050:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003052:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003054:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800305a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800305c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8003060:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003062:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8003064:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8003066:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8003068:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800306c:	4618      	mov	r0, r3
 800306e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003070:	2002      	movs	r0, #2
} 
 8003072:	bd30      	pop	{r4, r5, pc}
 8003074:	40012c00 	.word	0x40012c00

08003078 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8003078:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
{
 800307e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003080:	d03c      	beq.n	80030fc <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003082:	68cb      	ldr	r3, [r1, #12]
 8003084:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003086:	4c1e      	ldr	r4, [pc, #120]	; (8003100 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800308e:	684a      	ldr	r2, [r1, #4]
 8003090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003094:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003096:	680a      	ldr	r2, [r1, #0]
 8003098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800309c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800309e:	690a      	ldr	r2, [r1, #16]
 80030a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030a6:	694a      	ldr	r2, [r1, #20]
 80030a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030ae:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80030b6:	698a      	ldr	r2, [r1, #24]
 80030b8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80030bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030c0:	6802      	ldr	r2, [r0, #0]
 80030c2:	42a2      	cmp	r2, r4
 80030c4:	d007      	beq.n	80030d6 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 80030c6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80030ca:	42a2      	cmp	r2, r4
 80030cc:	d003      	beq.n	80030d6 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 80030ce:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80030d2:	42a2      	cmp	r2, r4
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80030d6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80030d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030e0:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030e2:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80030ee:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80030f2:	2300      	movs	r3, #0
 80030f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80030fc:	2002      	movs	r0, #2
}
 80030fe:	bd10      	pop	{r4, pc}
 8003100:	40012c00 	.word	0x40012c00

08003104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003108:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310a:	6921      	ldr	r1, [r4, #16]
 800310c:	68a2      	ldr	r2, [r4, #8]
 800310e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003110:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003112:	430a      	orrs	r2, r1
 8003114:	6961      	ldr	r1, [r4, #20]
 8003116:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003118:	4977      	ldr	r1, [pc, #476]	; (80032f8 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800311a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800311c:	4001      	ands	r1, r0
 800311e:	430a      	orrs	r2, r1
 8003120:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003122:	686a      	ldr	r2, [r5, #4]
 8003124:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003126:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003128:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800312c:	430a      	orrs	r2, r1
 800312e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003130:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003132:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003134:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003138:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800313a:	430a      	orrs	r2, r1
 800313c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800313e:	4a6f      	ldr	r2, [pc, #444]	; (80032fc <UART_SetConfig+0x1f8>)
 8003140:	4295      	cmp	r5, r2
 8003142:	d112      	bne.n	800316a <UART_SetConfig+0x66>
 8003144:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8003148:	496d      	ldr	r1, [pc, #436]	; (8003300 <UART_SetConfig+0x1fc>)
 800314a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800314c:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003154:	5c8a      	ldrb	r2, [r1, r2]
 8003156:	d066      	beq.n	8003226 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8003158:	2a08      	cmp	r2, #8
 800315a:	d819      	bhi.n	8003190 <UART_SetConfig+0x8c>
 800315c:	e8df f002 	tbb	[pc, r2]
 8003160:	189e92c2 	.word	0x189e92c2
 8003164:	181818a9 	.word	0x181818a9
 8003168:	ac          	.byte	0xac
 8003169:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800316a:	4a66      	ldr	r2, [pc, #408]	; (8003304 <UART_SetConfig+0x200>)
 800316c:	4295      	cmp	r5, r2
 800316e:	d124      	bne.n	80031ba <UART_SetConfig+0xb6>
 8003170:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8003174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003176:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800317a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800317e:	f000 80a0 	beq.w	80032c2 <UART_SetConfig+0x1be>
 8003182:	d807      	bhi.n	8003194 <UART_SetConfig+0x90>
 8003184:	2a00      	cmp	r2, #0
 8003186:	f000 80aa 	beq.w	80032de <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318e:	d076      	beq.n	800327e <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003190:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8003192:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003194:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003198:	f000 8099 	beq.w	80032ce <UART_SetConfig+0x1ca>
 800319c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80031a0:	d1f3      	bne.n	800318a <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a6:	d179      	bne.n	800329c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80031a8:	6860      	ldr	r0, [r4, #4]
 80031aa:	0843      	lsrs	r3, r0, #1
 80031ac:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80031b0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80031b8:	e054      	b.n	8003264 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ba:	4a53      	ldr	r2, [pc, #332]	; (8003308 <UART_SetConfig+0x204>)
 80031bc:	4295      	cmp	r5, r2
 80031be:	d10e      	bne.n	80031de <UART_SetConfig+0xda>
 80031c0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80031c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031c6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80031ca:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80031ce:	d078      	beq.n	80032c2 <UART_SetConfig+0x1be>
 80031d0:	d9d8      	bls.n	8003184 <UART_SetConfig+0x80>
 80031d2:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80031d6:	d07a      	beq.n	80032ce <UART_SetConfig+0x1ca>
 80031d8:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80031dc:	e7e0      	b.n	80031a0 <UART_SetConfig+0x9c>
 80031de:	4a4b      	ldr	r2, [pc, #300]	; (800330c <UART_SetConfig+0x208>)
 80031e0:	4295      	cmp	r5, r2
 80031e2:	d10e      	bne.n	8003202 <UART_SetConfig+0xfe>
 80031e4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80031e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ea:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80031ee:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80031f2:	d066      	beq.n	80032c2 <UART_SetConfig+0x1be>
 80031f4:	d9c6      	bls.n	8003184 <UART_SetConfig+0x80>
 80031f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80031fa:	d068      	beq.n	80032ce <UART_SetConfig+0x1ca>
 80031fc:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003200:	e7ce      	b.n	80031a0 <UART_SetConfig+0x9c>
 8003202:	4a43      	ldr	r2, [pc, #268]	; (8003310 <UART_SetConfig+0x20c>)
 8003204:	4295      	cmp	r5, r2
 8003206:	d1c0      	bne.n	800318a <UART_SetConfig+0x86>
 8003208:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800320c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800320e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8003212:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003216:	d054      	beq.n	80032c2 <UART_SetConfig+0x1be>
 8003218:	d9b4      	bls.n	8003184 <UART_SetConfig+0x80>
 800321a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800321e:	d056      	beq.n	80032ce <UART_SetConfig+0x1ca>
 8003220:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8003224:	e7bc      	b.n	80031a0 <UART_SetConfig+0x9c>
    switch (clocksource)
 8003226:	2a08      	cmp	r2, #8
 8003228:	d829      	bhi.n	800327e <UART_SetConfig+0x17a>
 800322a:	a301      	add	r3, pc, #4	; (adr r3, 8003230 <UART_SetConfig+0x12c>)
 800322c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003230:	08003255 	.word	0x08003255
 8003234:	08003279 	.word	0x08003279
 8003238:	080031a9 	.word	0x080031a9
 800323c:	0800327f 	.word	0x0800327f
 8003240:	080032c9 	.word	0x080032c9
 8003244:	0800327f 	.word	0x0800327f
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800327f 	.word	0x0800327f
 8003250:	080032d5 	.word	0x080032d5
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003254:	f7ff fad0 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003258:	6861      	ldr	r1, [r4, #4]
 800325a:	084a      	lsrs	r2, r1, #1
 800325c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003260:	fbb3 f3f1 	udiv	r3, r3, r1
 8003264:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003266:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003268:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800326c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800326e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003272:	4313      	orrs	r3, r2
 8003274:	60cb      	str	r3, [r1, #12]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003278:	f7ff fad6 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 800327c:	e7ec      	b.n	8003258 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800327e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003280:	2300      	movs	r3, #0
 8003282:	e7f1      	b.n	8003268 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003284:	f7ff fad0 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8003288:	6863      	ldr	r3, [r4, #4]
 800328a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800328e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <UART_SetConfig+0x1f8>)
 8003294:	b280      	uxth	r0, r0
 8003296:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003298:	2000      	movs	r0, #0
        break;
 800329a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800329c:	6862      	ldr	r2, [r4, #4]
 800329e:	0853      	lsrs	r3, r2, #1
 80032a0:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80032a4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	60eb      	str	r3, [r5, #12]
 80032b0:	e7f2      	b.n	8003298 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032b2:	f7ff f9cb 	bl	800264c <HAL_RCC_GetSysClockFreq>
 80032b6:	e017      	b.n	80032e8 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032b8:	6862      	ldr	r2, [r4, #4]
 80032ba:	0853      	lsrs	r3, r2, #1
 80032bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032c0:	e7f2      	b.n	80032a8 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c6:	d1f4      	bne.n	80032b2 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032c8:	f7ff f9c0 	bl	800264c <HAL_RCC_GetSysClockFreq>
 80032cc:	e7c4      	b.n	8003258 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d2:	d1f1      	bne.n	80032b8 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032d4:	6860      	ldr	r0, [r4, #4]
 80032d6:	0843      	lsrs	r3, r0, #1
 80032d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80032dc:	e76a      	b.n	80031b4 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e2:	d0b7      	beq.n	8003254 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032e4:	f7ff fa88 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80032ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80032f2:	b280      	uxth	r0, r0
 80032f4:	60e8      	str	r0, [r5, #12]
 80032f6:	e7cf      	b.n	8003298 <UART_SetConfig+0x194>
 80032f8:	efff69f3 	.word	0xefff69f3
 80032fc:	40013800 	.word	0x40013800
 8003300:	08008dc8 	.word	0x08008dc8
 8003304:	40004400 	.word	0x40004400
 8003308:	40004800 	.word	0x40004800
 800330c:	40004c00 	.word	0x40004c00
 8003310:	40005000 	.word	0x40005000

08003314 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003314:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003316:	07da      	lsls	r2, r3, #31
{
 8003318:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800331a:	d506      	bpl.n	800332a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800331c:	6801      	ldr	r1, [r0, #0]
 800331e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003320:	684a      	ldr	r2, [r1, #4]
 8003322:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003326:	4322      	orrs	r2, r4
 8003328:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800332a:	079c      	lsls	r4, r3, #30
 800332c:	d506      	bpl.n	800333c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800332e:	6801      	ldr	r1, [r0, #0]
 8003330:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003332:	684a      	ldr	r2, [r1, #4]
 8003334:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003338:	4322      	orrs	r2, r4
 800333a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800333c:	0759      	lsls	r1, r3, #29
 800333e:	d506      	bpl.n	800334e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003340:	6801      	ldr	r1, [r0, #0]
 8003342:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003344:	684a      	ldr	r2, [r1, #4]
 8003346:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800334a:	4322      	orrs	r2, r4
 800334c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800334e:	071a      	lsls	r2, r3, #28
 8003350:	d506      	bpl.n	8003360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003352:	6801      	ldr	r1, [r0, #0]
 8003354:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003356:	684a      	ldr	r2, [r1, #4]
 8003358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335c:	4322      	orrs	r2, r4
 800335e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003360:	06dc      	lsls	r4, r3, #27
 8003362:	d506      	bpl.n	8003372 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003364:	6801      	ldr	r1, [r0, #0]
 8003366:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003368:	688a      	ldr	r2, [r1, #8]
 800336a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336e:	4322      	orrs	r2, r4
 8003370:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003372:	0699      	lsls	r1, r3, #26
 8003374:	d506      	bpl.n	8003384 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003376:	6801      	ldr	r1, [r0, #0]
 8003378:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800337a:	688a      	ldr	r2, [r1, #8]
 800337c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003380:	4322      	orrs	r2, r4
 8003382:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003384:	065a      	lsls	r2, r3, #25
 8003386:	d50f      	bpl.n	80033a8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003388:	6801      	ldr	r1, [r0, #0]
 800338a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800338c:	684a      	ldr	r2, [r1, #4]
 800338e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003392:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003394:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003398:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339a:	d105      	bne.n	80033a8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800339c:	684a      	ldr	r2, [r1, #4]
 800339e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80033a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80033a4:	4322      	orrs	r2, r4
 80033a6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	d506      	bpl.n	80033ba <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ac:	6802      	ldr	r2, [r0, #0]
 80033ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80033b0:	6853      	ldr	r3, [r2, #4]
 80033b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6053      	str	r3, [r2, #4]
 80033ba:	bd10      	pop	{r4, pc}

080033bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c0:	9d06      	ldr	r5, [sp, #24]
 80033c2:	4604      	mov	r4, r0
 80033c4:	460f      	mov	r7, r1
 80033c6:	4616      	mov	r6, r2
 80033c8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ca:	6821      	ldr	r1, [r4, #0]
 80033cc:	69ca      	ldr	r2, [r1, #28]
 80033ce:	ea37 0302 	bics.w	r3, r7, r2
 80033d2:	bf0c      	ite	eq
 80033d4:	2201      	moveq	r2, #1
 80033d6:	2200      	movne	r2, #0
 80033d8:	42b2      	cmp	r2, r6
 80033da:	d002      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80033dc:	2000      	movs	r0, #0
}
 80033de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80033e2:	1c6b      	adds	r3, r5, #1
 80033e4:	d0f2      	beq.n	80033cc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80033e6:	b99d      	cbnz	r5, 8003410 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80033fa:	2320      	movs	r3, #32
 80033fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003400:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003404:	2300      	movs	r3, #0
 8003406:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800340a:	2003      	movs	r0, #3
 800340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003410:	f7fd fd98 	bl	8000f44 <HAL_GetTick>
 8003414:	eba0 0008 	sub.w	r0, r0, r8
 8003418:	4285      	cmp	r5, r0
 800341a:	d2d6      	bcs.n	80033ca <UART_WaitOnFlagUntilTimeout+0xe>
 800341c:	e7e4      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800341e <HAL_UART_Transmit>:
{
 800341e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003422:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003424:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003428:	2b20      	cmp	r3, #32
{
 800342a:	4604      	mov	r4, r0
 800342c:	460d      	mov	r5, r1
 800342e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003430:	d14c      	bne.n	80034cc <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8003432:	2900      	cmp	r1, #0
 8003434:	d048      	beq.n	80034c8 <HAL_UART_Transmit+0xaa>
 8003436:	2a00      	cmp	r2, #0
 8003438:	d046      	beq.n	80034c8 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800343a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800343e:	2b01      	cmp	r3, #1
 8003440:	d044      	beq.n	80034cc <HAL_UART_Transmit+0xae>
 8003442:	2301      	movs	r3, #1
 8003444:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	2300      	movs	r3, #0
 800344a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344c:	2321      	movs	r3, #33	; 0x21
 800344e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003452:	f7fd fd77 	bl	8000f44 <HAL_GetTick>
    huart->TxXferSize = Size;
 8003456:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800345a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800345c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003460:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003464:	b292      	uxth	r2, r2
 8003466:	b962      	cbnz	r2, 8003482 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003468:	9700      	str	r7, [sp, #0]
 800346a:	4633      	mov	r3, r6
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	4620      	mov	r0, r4
 8003470:	f7ff ffa4 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 8003474:	b998      	cbnz	r0, 800349e <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8003476:	2320      	movs	r3, #32
 8003478:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800347c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8003480:	e00e      	b.n	80034a0 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8003482:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8003488:	3b01      	subs	r3, #1
 800348a:	b29b      	uxth	r3, r3
 800348c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003490:	2200      	movs	r2, #0
 8003492:	4633      	mov	r3, r6
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	4620      	mov	r0, r4
 8003498:	f7ff ff90 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 800349c:	b118      	cbz	r0, 80034a6 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800349e:	2003      	movs	r0, #3
}
 80034a0:	b002      	add	sp, #8
 80034a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a6:	68a3      	ldr	r3, [r4, #8]
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	d107      	bne.n	80034c0 <HAL_UART_Transmit+0xa2>
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	b92b      	cbnz	r3, 80034c0 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80034b4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80034be:	e7cf      	b.n	8003460 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80034c0:	782b      	ldrb	r3, [r5, #0]
 80034c2:	8513      	strh	r3, [r2, #40]	; 0x28
 80034c4:	3501      	adds	r5, #1
 80034c6:	e7cb      	b.n	8003460 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
 80034ca:	e7e9      	b.n	80034a0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80034cc:	2002      	movs	r0, #2
 80034ce:	e7e7      	b.n	80034a0 <HAL_UART_Transmit+0x82>

080034d0 <HAL_UART_Receive>:
{
 80034d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80034d4:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80034d6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80034da:	2b20      	cmp	r3, #32
{
 80034dc:	4604      	mov	r4, r0
 80034de:	460d      	mov	r5, r1
 80034e0:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80034e2:	d160      	bne.n	80035a6 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d05c      	beq.n	80035a2 <HAL_UART_Receive+0xd2>
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d05a      	beq.n	80035a2 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 80034ec:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d058      	beq.n	80035a6 <HAL_UART_Receive+0xd6>
 80034f4:	2301      	movs	r3, #1
 80034f6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034fe:	2322      	movs	r3, #34	; 0x22
 8003500:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8003504:	f7fd fd1e 	bl	8000f44 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003508:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800350a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003512:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8003514:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003518:	d115      	bne.n	8003546 <HAL_UART_Receive+0x76>
 800351a:	6923      	ldr	r3, [r4, #16]
 800351c:	b98b      	cbnz	r3, 8003542 <HAL_UART_Receive+0x72>
 800351e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003522:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8003526:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800352a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800352e:	b280      	uxth	r0, r0
 8003530:	b9b8      	cbnz	r0, 8003562 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8003532:	2320      	movs	r3, #32
 8003534:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8003538:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 800353c:	b002      	add	sp, #8
 800353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8003542:	23ff      	movs	r3, #255	; 0xff
 8003544:	e7ed      	b.n	8003522 <HAL_UART_Receive+0x52>
 8003546:	b923      	cbnz	r3, 8003552 <HAL_UART_Receive+0x82>
 8003548:	6923      	ldr	r3, [r4, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f9      	beq.n	8003542 <HAL_UART_Receive+0x72>
 800354e:	237f      	movs	r3, #127	; 0x7f
 8003550:	e7e7      	b.n	8003522 <HAL_UART_Receive+0x52>
 8003552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003556:	d1e6      	bne.n	8003526 <HAL_UART_Receive+0x56>
 8003558:	6923      	ldr	r3, [r4, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f7      	beq.n	800354e <HAL_UART_Receive+0x7e>
 800355e:	233f      	movs	r3, #63	; 0x3f
 8003560:	e7df      	b.n	8003522 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8003562:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003566:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 800356a:	3b01      	subs	r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	2200      	movs	r2, #0
 8003574:	463b      	mov	r3, r7
 8003576:	2120      	movs	r1, #32
 8003578:	4620      	mov	r0, r4
 800357a:	f7ff ff1f 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 800357e:	b9a0      	cbnz	r0, 80035aa <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003580:	68a3      	ldr	r3, [r4, #8]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	d106      	bne.n	8003598 <HAL_UART_Receive+0xc8>
 800358a:	6922      	ldr	r2, [r4, #16]
 800358c:	b922      	cbnz	r2, 8003598 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800358e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003590:	4033      	ands	r3, r6
 8003592:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8003596:	e7c8      	b.n	800352a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800359a:	4033      	ands	r3, r6
 800359c:	702b      	strb	r3, [r5, #0]
 800359e:	3501      	adds	r5, #1
 80035a0:	e7c3      	b.n	800352a <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 80035a2:	2001      	movs	r0, #1
 80035a4:	e7ca      	b.n	800353c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 80035a6:	2002      	movs	r0, #2
 80035a8:	e7c8      	b.n	800353c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 80035aa:	2003      	movs	r0, #3
 80035ac:	e7c6      	b.n	800353c <HAL_UART_Receive+0x6c>

080035ae <UART_CheckIdleState>:
{
 80035ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035b0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b2:	2600      	movs	r6, #0
 80035b4:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80035b6:	f7fd fcc5 	bl	8000f44 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80035c0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c2:	d417      	bmi.n	80035f4 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	075b      	lsls	r3, r3, #29
 80035ca:	d50a      	bpl.n	80035e2 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2200      	movs	r2, #0
 80035d4:	462b      	mov	r3, r5
 80035d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035da:	4620      	mov	r0, r4
 80035dc:	f7ff feee 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 80035e0:	b9a0      	cbnz	r0, 800360c <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80035e2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80035e4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80035e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80035ea:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80035ee:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80035f2:	e00c      	b.n	800360e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4632      	mov	r2, r6
 80035fc:	4603      	mov	r3, r0
 80035fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003602:	4620      	mov	r0, r4
 8003604:	f7ff feda 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 8003608:	2800      	cmp	r0, #0
 800360a:	d0db      	beq.n	80035c4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800360c:	2003      	movs	r0, #3
}
 800360e:	b002      	add	sp, #8
 8003610:	bd70      	pop	{r4, r5, r6, pc}

08003612 <HAL_UART_Init>:
{
 8003612:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003614:	4604      	mov	r4, r0
 8003616:	b360      	cbz	r0, 8003672 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003618:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800361c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003620:	b91b      	cbnz	r3, 800362a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003622:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003626:	f000 fc69 	bl	8003efc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800362a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800362c:	2324      	movs	r3, #36	; 0x24
 800362e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800363a:	4620      	mov	r0, r4
 800363c:	f7ff fd62 	bl	8003104 <UART_SetConfig>
 8003640:	2801      	cmp	r0, #1
 8003642:	d016      	beq.n	8003672 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003646:	b113      	cbz	r3, 800364e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003648:	4620      	mov	r0, r4
 800364a:	f7ff fe63 	bl	8003314 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800365e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003666:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800366e:	f7ff bf9e 	b.w	80035ae <UART_CheckIdleState>
}
 8003672:	2001      	movs	r0, #1
 8003674:	bd10      	pop	{r4, pc}
	...

08003678 <ScreenSend>:
void DecreaseTemperature(void);
void ScreenSend(uint8_t * pData);
void BatteryLife(void);

/* USER CODE END PFP */
void ScreenSend(uint8_t * pData) {
 8003678:	b513      	push	{r0, r1, r4, lr}
 800367a:	4604      	mov	r4, r0
	int length = strlen((char*) pData);	//Calculate string length
 800367c:	f7fc fdb0 	bl	80001e0 <strlen>
	HAL_I2C_Master_Transmit(&hi2c2, 0x72 << 1, pData, length, 10);//Address 0x72
 8003680:	230a      	movs	r3, #10
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4622      	mov	r2, r4
 8003686:	b283      	uxth	r3, r0
 8003688:	21e4      	movs	r1, #228	; 0xe4
 800368a:	4802      	ldr	r0, [pc, #8]	; (8003694 <ScreenSend+0x1c>)
 800368c:	f7fe fbee 	bl	8001e6c <HAL_I2C_Master_Transmit>
}
 8003690:	b002      	add	sp, #8
 8003692:	bd10      	pop	{r4, pc}
 8003694:	20000750 	.word	0x20000750

08003698 <IncreaseTemperature>:
		}
	}

}

void IncreaseTemperature(void) {
 8003698:	b510      	push	{r4, lr}
	if (currentTemperature >= maxTemp) {
 800369a:	4c0c      	ldr	r4, [pc, #48]	; (80036cc <IncreaseTemperature+0x34>)
		currentTemperature = maxTemp;
	} else {
		currentTemperature = currentTemperature + 2;
//		htim1.Instance->CCR1 = currentTemperature;
	}
	printf("Increase Temp = %d\r\n", currentTemperature);
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <IncreaseTemperature+0x38>)
	if (currentTemperature >= maxTemp) {
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	2b13      	cmp	r3, #19
		currentTemperature = maxTemp;
 80036a2:	bfcc      	ite	gt
 80036a4:	2314      	movgt	r3, #20
		currentTemperature = currentTemperature + 2;
 80036a6:	3302      	addle	r3, #2
 80036a8:	6023      	str	r3, [r4, #0]
	printf("Increase Temp = %d\r\n", currentTemperature);
 80036aa:	6821      	ldr	r1, [r4, #0]
 80036ac:	f000 fd3e 	bl	800412c <printf>
	sprintf(speed, "|-Manual Mode\rSetpoint: %i     ", currentTemperature);
 80036b0:	6822      	ldr	r2, [r4, #0]
 80036b2:	4908      	ldr	r1, [pc, #32]	; (80036d4 <IncreaseTemperature+0x3c>)
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <IncreaseTemperature+0x40>)
 80036b6:	f000 fdb9 	bl	800422c <sprintf>
	ScreenSend((unsigned char*) speed);
 80036ba:	4807      	ldr	r0, [pc, #28]	; (80036d8 <IncreaseTemperature+0x40>)
 80036bc:	f7ff ffdc 	bl	8003678 <ScreenSend>

	HAL_Delay(100);
 80036c0:	2064      	movs	r0, #100	; 0x64

}
 80036c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 80036c6:	f7fd bc43 	b.w	8000f50 <HAL_Delay>
 80036ca:	bf00      	nop
 80036cc:	200006ac 	.word	0x200006ac
 80036d0:	08008ec4 	.word	0x08008ec4
 80036d4:	08008ed9 	.word	0x08008ed9
 80036d8:	200006b0 	.word	0x200006b0

080036dc <DecreaseTemperature>:

void DecreaseTemperature(void) {
 80036dc:	b510      	push	{r4, lr}
	if (currentTemperature <= minTemp) {
 80036de:	4c0f      	ldr	r4, [pc, #60]	; (800371c <DecreaseTemperature+0x40>)
		currentTemperature = minTemp;
	} else {
		currentTemperature = currentTemperature - 2;
		htim1.Instance->CCR1 = currentTemperature;
	}
	printf("Decrease Temp = %d\r\n", currentTemperature);
 80036e0:	480f      	ldr	r0, [pc, #60]	; (8003720 <DecreaseTemperature+0x44>)
	if (currentTemperature <= minTemp) {
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	f113 0f13 	cmn.w	r3, #19
		htim1.Instance->CCR1 = currentTemperature;
 80036e8:	bfa1      	itttt	ge
 80036ea:	4a0e      	ldrge	r2, [pc, #56]	; (8003724 <DecreaseTemperature+0x48>)
		currentTemperature = currentTemperature - 2;
 80036ec:	3b02      	subge	r3, #2
		htim1.Instance->CCR1 = currentTemperature;
 80036ee:	6812      	ldrge	r2, [r2, #0]
		currentTemperature = currentTemperature - 2;
 80036f0:	6023      	strge	r3, [r4, #0]
		currentTemperature = minTemp;
 80036f2:	bfba      	itte	lt
 80036f4:	f06f 0313 	mvnlt.w	r3, #19
 80036f8:	6023      	strlt	r3, [r4, #0]
		htim1.Instance->CCR1 = currentTemperature;
 80036fa:	6353      	strge	r3, [r2, #52]	; 0x34
	printf("Decrease Temp = %d\r\n", currentTemperature);
 80036fc:	6821      	ldr	r1, [r4, #0]
 80036fe:	f000 fd15 	bl	800412c <printf>
	sprintf(speed, "|-Manual Mode\rSetpoint: %i     ", currentTemperature);
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	4908      	ldr	r1, [pc, #32]	; (8003728 <DecreaseTemperature+0x4c>)
 8003706:	4809      	ldr	r0, [pc, #36]	; (800372c <DecreaseTemperature+0x50>)
 8003708:	f000 fd90 	bl	800422c <sprintf>
	ScreenSend((unsigned char*) speed);
 800370c:	4807      	ldr	r0, [pc, #28]	; (800372c <DecreaseTemperature+0x50>)
 800370e:	f7ff ffb3 	bl	8003678 <ScreenSend>
	HAL_Delay(100);
 8003712:	2064      	movs	r0, #100	; 0x64
}
 8003714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 8003718:	f7fd bc1a 	b.w	8000f50 <HAL_Delay>
 800371c:	200006ac 	.word	0x200006ac
 8003720:	08008eaf 	.word	0x08008eaf
 8003724:	20000860 	.word	0x20000860
 8003728:	08008ed9 	.word	0x08008ed9
 800372c:	200006b0 	.word	0x200006b0

08003730 <BatteryLife>:

void BatteryLife(void) {
 8003730:	b508      	push	{r3, lr}
	ScreenSend((unsigned char*) "|-Manual Mode\rBattery: 100%");
 8003732:	4805      	ldr	r0, [pc, #20]	; (8003748 <BatteryLife+0x18>)
 8003734:	f7ff ffa0 	bl	8003678 <ScreenSend>
	printf("Battery: 100\r\n");
 8003738:	4804      	ldr	r0, [pc, #16]	; (800374c <BatteryLife+0x1c>)
 800373a:	f000 fd6f 	bl	800421c <puts>
	HAL_Delay(100);
 800373e:	2064      	movs	r0, #100	; 0x64
}
 8003740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 8003744:	f7fd bc04 	b.w	8000f50 <HAL_Delay>
 8003748:	08008e85 	.word	0x08008e85
 800374c:	08008ea1 	.word	0x08008ea1

08003750 <ManualMode>:
void ManualMode(void) {
 8003750:	b538      	push	{r3, r4, r5, lr}
	} else if (HAL_GPIO_ReadPin(GPIOB, Battery_life_Pin)) {
 8003752:	4c21      	ldr	r4, [pc, #132]	; (80037d8 <ManualMode+0x88>)
	} else if (HAL_GPIO_ReadPin(Auto_mode_GPIO_Port, Auto_mode_Pin)) {
 8003754:	4d21      	ldr	r5, [pc, #132]	; (80037dc <ManualMode+0x8c>)
	if (HAL_GPIO_ReadPin(GPIOA, Inc_button_Pin)) {
 8003756:	2140      	movs	r1, #64	; 0x40
 8003758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800375c:	f7fe fa4e 	bl	8001bfc <HAL_GPIO_ReadPin>
 8003760:	b118      	cbz	r0, 800376a <ManualMode+0x1a>
}
 8003762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		IncreaseTemperature();
 8003766:	f7ff bf97 	b.w	8003698 <IncreaseTemperature>
	} else if (HAL_GPIO_ReadPin(GPIOA, Dec_button_Pin)) {
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003770:	f7fe fa44 	bl	8001bfc <HAL_GPIO_ReadPin>
 8003774:	b118      	cbz	r0, 800377e <ManualMode+0x2e>
}
 8003776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		DecreaseTemperature();
 800377a:	f7ff bfaf 	b.w	80036dc <DecreaseTemperature>
	} else if (HAL_GPIO_ReadPin(GPIOB, Battery_life_Pin)) {
 800377e:	2110      	movs	r1, #16
 8003780:	4620      	mov	r0, r4
 8003782:	f7fe fa3b 	bl	8001bfc <HAL_GPIO_ReadPin>
 8003786:	b118      	cbz	r0, 8003790 <ManualMode+0x40>
}
 8003788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BatteryLife();
 800378c:	f7ff bfd0 	b.w	8003730 <BatteryLife>
	} else if (HAL_GPIO_ReadPin(Auto_mode_GPIO_Port, Auto_mode_Pin)) {
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	4628      	mov	r0, r5
 8003794:	f7fe fa32 	bl	8001bfc <HAL_GPIO_ReadPin>
 8003798:	b1e8      	cbz	r0, 80037d6 <ManualMode+0x86>
			AutoMode();
 800379a:	f000 f821 	bl	80037e0 <AutoMode>
			if (HAL_GPIO_ReadPin(GPIOA, Inc_button_Pin)) {
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a4:	f7fe fa2a 	bl	8001bfc <HAL_GPIO_ReadPin>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d1da      	bne.n	8003762 <ManualMode+0x12>
			} else if (HAL_GPIO_ReadPin(GPIOA, Dec_button_Pin)) {
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b2:	f7fe fa23 	bl	8001bfc <HAL_GPIO_ReadPin>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d1dd      	bne.n	8003776 <ManualMode+0x26>
			} else if (HAL_GPIO_ReadPin(GPIOB, Battery_life_Pin)) {
 80037ba:	2110      	movs	r1, #16
 80037bc:	4620      	mov	r0, r4
 80037be:	f7fe fa1d 	bl	8001bfc <HAL_GPIO_ReadPin>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d1e0      	bne.n	8003788 <ManualMode+0x38>
			} else if (HAL_GPIO_ReadPin(GPIOB, Manual_mode_Pin)) {
 80037c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7fe fa16 	bl	8001bfc <HAL_GPIO_ReadPin>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d0e2      	beq.n	800379a <ManualMode+0x4a>
 80037d4:	e7bf      	b.n	8003756 <ManualMode+0x6>
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	48000400 	.word	0x48000400
 80037dc:	48000800 	.word	0x48000800

080037e0 <AutoMode>:
void AutoMode(void) {
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80037e2:	4851      	ldr	r0, [pc, #324]	; (8003928 <AutoMode+0x148>)
 80037e4:	f7fd fd62 	bl	80012ac <HAL_ADC_Start>
 80037e8:	b110      	cbz	r0, 80037f0 <AutoMode+0x10>
		printf("HAL_ADC_Start Error. \r\n");
 80037ea:	4850      	ldr	r0, [pc, #320]	; (800392c <AutoMode+0x14c>)
 80037ec:	f000 fd16 	bl	800421c <puts>
	if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK) {
 80037f0:	210a      	movs	r1, #10
 80037f2:	484d      	ldr	r0, [pc, #308]	; (8003928 <AutoMode+0x148>)
 80037f4:	4d4e      	ldr	r5, [pc, #312]	; (8003930 <AutoMode+0x150>)
 80037f6:	4c4f      	ldr	r4, [pc, #316]	; (8003934 <AutoMode+0x154>)
 80037f8:	f7fd fe08 	bl	800140c <HAL_ADC_PollForConversion>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d064      	beq.n	80038ca <AutoMode+0xea>
		printf("HAL_ADC_PollForConversion Error. \r\n");
 8003800:	484d      	ldr	r0, [pc, #308]	; (8003938 <AutoMode+0x158>)
 8003802:	f000 fd0b 	bl	800421c <puts>
	printf("Analog value: %4.2f  Temperature: %4.2f 'C\r\n", ADCConvertedValue,
 8003806:	6828      	ldr	r0, [r5, #0]
 8003808:	6825      	ldr	r5, [r4, #0]
 800380a:	f7fc fea5 	bl	8000558 <__aeabi_f2d>
 800380e:	4606      	mov	r6, r0
 8003810:	4628      	mov	r0, r5
 8003812:	460f      	mov	r7, r1
 8003814:	f7fc fea0 	bl	8000558 <__aeabi_f2d>
 8003818:	4632      	mov	r2, r6
 800381a:	e9cd 0100 	strd	r0, r1, [sp]
 800381e:	463b      	mov	r3, r7
 8003820:	4846      	ldr	r0, [pc, #280]	; (800393c <AutoMode+0x15c>)
	if (temperatureValue >= currentTemperature) {
 8003822:	4d47      	ldr	r5, [pc, #284]	; (8003940 <AutoMode+0x160>)
	printf("Analog value: %4.2f  Temperature: %4.2f 'C\r\n", ADCConvertedValue,
 8003824:	f000 fc82 	bl	800412c <printf>
	sprintf(txData, "Temp: %0.1f 'C\r\n", temperatureValue);
 8003828:	6820      	ldr	r0, [r4, #0]
 800382a:	f7fc fe95 	bl	8000558 <__aeabi_f2d>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4844      	ldr	r0, [pc, #272]	; (8003944 <AutoMode+0x164>)
 8003834:	4944      	ldr	r1, [pc, #272]	; (8003948 <AutoMode+0x168>)
 8003836:	f000 fcf9 	bl	800422c <sprintf>
	if (temperatureValue >= currentTemperature) {
 800383a:	edd5 7a00 	vldr	s15, [r5]
 800383e:	ed94 7a00 	vldr	s14, [r4]
 8003842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	d863      	bhi.n	8003918 <AutoMode+0x138>
		printf("PELTIER ON\r\n");
 8003850:	483e      	ldr	r0, [pc, #248]	; (800394c <AutoMode+0x16c>)
 8003852:	f000 fce3 	bl	800421c <puts>
		HAL_GPIO_WritePin(GPIOB, Peltier_2_Pin | Peltier_1_Pin, GPIO_PIN_RESET); //peltier on ACTIVE LOW
 8003856:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOB, Peltier_2_Pin | Peltier_1_Pin, GPIO_PIN_SET); //peltier off
 8003858:	f44f 7140 	mov.w	r1, #768	; 0x300
 800385c:	483c      	ldr	r0, [pc, #240]	; (8003950 <AutoMode+0x170>)
 800385e:	f7fe f9d3 	bl	8001c08 <HAL_GPIO_WritePin>
	sprintf(temp, "|-Temp: %0.1f\rSetpoint: %d", temperatureValue,
 8003862:	6820      	ldr	r0, [r4, #0]
	if (HAL_UART_Receive(&huart1, (uint8_t*) rxData, 50, 500)) {
 8003864:	4c3b      	ldr	r4, [pc, #236]	; (8003954 <AutoMode+0x174>)
	sprintf(temp, "|-Temp: %0.1f\rSetpoint: %d", temperatureValue,
 8003866:	f7fc fe77 	bl	8000558 <__aeabi_f2d>
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4839      	ldr	r0, [pc, #228]	; (8003958 <AutoMode+0x178>)
 8003874:	4939      	ldr	r1, [pc, #228]	; (800395c <AutoMode+0x17c>)
 8003876:	f000 fcd9 	bl	800422c <sprintf>
	ScreenSend((unsigned char*) temp);
 800387a:	4837      	ldr	r0, [pc, #220]	; (8003958 <AutoMode+0x178>)
 800387c:	f7ff fefc 	bl	8003678 <ScreenSend>
	HAL_Delay(200);
 8003880:	20c8      	movs	r0, #200	; 0xc8
 8003882:	f7fd fb65 	bl	8000f50 <HAL_Delay>
	if (HAL_UART_Receive(&huart1, (uint8_t*) rxData, 50, 500)) {
 8003886:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800388a:	2232      	movs	r2, #50	; 0x32
 800388c:	4621      	mov	r1, r4
 800388e:	4834      	ldr	r0, [pc, #208]	; (8003960 <AutoMode+0x180>)
 8003890:	f7ff fe1e 	bl	80034d0 <HAL_UART_Receive>
 8003894:	2800      	cmp	r0, #0
 8003896:	d044      	beq.n	8003922 <AutoMode+0x142>
	if (rxData[0] == 'm' && rxData[1] == 'a' && rxData[2] == 'n') {
 8003898:	7823      	ldrb	r3, [r4, #0]
 800389a:	2b6d      	cmp	r3, #109	; 0x6d
 800389c:	d141      	bne.n	8003922 <AutoMode+0x142>
 800389e:	7863      	ldrb	r3, [r4, #1]
 80038a0:	2b61      	cmp	r3, #97	; 0x61
 80038a2:	d13e      	bne.n	8003922 <AutoMode+0x142>
 80038a4:	78a3      	ldrb	r3, [r4, #2]
 80038a6:	2b6e      	cmp	r3, #110	; 0x6e
 80038a8:	d13b      	bne.n	8003922 <AutoMode+0x142>
		ManualMode();
 80038aa:	f7ff ff51 	bl	8003750 <ManualMode>
				sprintf(txData, "Manual Mode\n"), 500);
 80038ae:	492d      	ldr	r1, [pc, #180]	; (8003964 <AutoMode+0x184>)
 80038b0:	4824      	ldr	r0, [pc, #144]	; (8003944 <AutoMode+0x164>)
 80038b2:	f000 fcdf 	bl	8004274 <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 80038b6:	4923      	ldr	r1, [pc, #140]	; (8003944 <AutoMode+0x164>)
 80038b8:	4829      	ldr	r0, [pc, #164]	; (8003960 <AutoMode+0x180>)
 80038ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038be:	220c      	movs	r2, #12
}
 80038c0:	b003      	add	sp, #12
 80038c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 80038c6:	f7ff bdaa 	b.w	800341e <HAL_UART_Transmit>
		ADCConvertedValue = HAL_ADC_GetValue(&hadc1);
 80038ca:	4817      	ldr	r0, [pc, #92]	; (8003928 <AutoMode+0x148>)
 80038cc:	f7fd fe3e 	bl	800154c <HAL_ADC_GetValue>
 80038d0:	ee07 0a90 	vmov	s15, r0
 80038d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
		volt = (ADCConvertedValue * vref) / adcResolution;
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <AutoMode+0x188>)
		ADCConvertedValue = HAL_ADC_GetValue(&hadc1);
 80038da:	edc5 7a00 	vstr	s15, [r5]
		volt = (ADCConvertedValue * vref) / adcResolution;
 80038de:	edd5 7a00 	vldr	s15, [r5]
 80038e2:	ed93 7a00 	vldr	s14, [r3]
 80038e6:	4b21      	ldr	r3, [pc, #132]	; (800396c <AutoMode+0x18c>)
 80038e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ec:	edd3 6a00 	vldr	s13, [r3]
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <AutoMode+0x190>)
 80038f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038f6:	ed83 7a00 	vstr	s14, [r3]
		temperatureValue = (volt - V0) / Tc;
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <AutoMode+0x194>)
 8003900:	ed93 7a00 	vldr	s14, [r3]
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <AutoMode+0x198>)
 8003906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800390a:	edd3 6a00 	vldr	s13, [r3]
 800390e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003912:	ed84 7a00 	vstr	s14, [r4]
 8003916:	e776      	b.n	8003806 <AutoMode+0x26>
		printf("PELTIER OFF\r\n");
 8003918:	4818      	ldr	r0, [pc, #96]	; (800397c <AutoMode+0x19c>)
 800391a:	f000 fc7f 	bl	800421c <puts>
		HAL_GPIO_WritePin(GPIOB, Peltier_2_Pin | Peltier_1_Pin, GPIO_PIN_SET); //peltier off
 800391e:	2201      	movs	r2, #1
 8003920:	e79a      	b.n	8003858 <AutoMode+0x78>
}
 8003922:	b003      	add	sp, #12
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003926:	bf00      	nop
 8003928:	2000079c 	.word	0x2000079c
 800392c:	08008dcc 	.word	0x08008dcc
 8003930:	200006a8 	.word	0x200006a8
 8003934:	200006d0 	.word	0x200006d0
 8003938:	08008de3 	.word	0x08008de3
 800393c:	08008e06 	.word	0x08008e06
 8003940:	200006ac 	.word	0x200006ac
 8003944:	20000732 	.word	0x20000732
 8003948:	08008e33 	.word	0x08008e33
 800394c:	08008e44 	.word	0x08008e44
 8003950:	48000400 	.word	0x48000400
 8003954:	20000714 	.word	0x20000714
 8003958:	200006c4 	.word	0x200006c4
 800395c:	08008e5d 	.word	0x08008e5d
 8003960:	200007f0 	.word	0x200007f0
 8003964:	08008e78 	.word	0x08008e78
 8003968:	20000014 	.word	0x20000014
 800396c:	20000010 	.word	0x20000010
 8003970:	200006d4 	.word	0x200006d4
 8003974:	2000000c 	.word	0x2000000c
 8003978:	20000008 	.word	0x20000008
 800397c:	08008e50 	.word	0x08008e50

08003980 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003980:	b530      	push	{r4, r5, lr}
 8003982:	b0a7      	sub	sp, #156	; 0x9c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003984:	2228      	movs	r2, #40	; 0x28
 8003986:	2100      	movs	r1, #0
 8003988:	a806      	add	r0, sp, #24
 800398a:	f000 fbc7 	bl	800411c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800398e:	2214      	movs	r2, #20
 8003990:	2100      	movs	r1, #0
 8003992:	a801      	add	r0, sp, #4
 8003994:	f000 fbc2 	bl	800411c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003998:	2258      	movs	r2, #88	; 0x58
 800399a:	2100      	movs	r1, #0
 800399c:	a810      	add	r0, sp, #64	; 0x40
 800399e:	f000 fbbd 	bl	800411c <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a2:	2301      	movs	r3, #1
 80039a4:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039a6:	2310      	movs	r3, #16
 80039a8:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ae:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039b0:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80039b2:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80039b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80039b8:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ba:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039bc:	950c      	str	r5, [sp, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80039be:	f7fe fbc3 	bl	8002148 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80039c2:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039c4:	2400      	movs	r4, #0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80039c6:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80039c8:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80039ce:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039d0:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039d2:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d4:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039d6:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80039d8:	f7fe fe64 	bl	80026a4 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80039dc:	f241 03c3 	movw	r3, #4291	; 0x10c3
 80039e0:	9310      	str	r3, [sp, #64]	; 0x40
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80039e2:	a810      	add	r0, sp, #64	; 0x40
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80039e4:	f44f 7380 	mov.w	r3, #256	; 0x100
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80039e8:	9412      	str	r4, [sp, #72]	; 0x48
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039ea:	9413      	str	r4, [sp, #76]	; 0x4c
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80039ec:	931a      	str	r3, [sp, #104]	; 0x68
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80039ee:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80039f0:	941d      	str	r4, [sp, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80039f2:	f7fe ff31 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 80039f6:	b027      	add	sp, #156	; 0x9c
 80039f8:	bd30      	pop	{r4, r5, pc}
	...

080039fc <main>:
int main(void) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b09a      	sub	sp, #104	; 0x68
	HAL_Init();
 8003a00:	f7fd fa82 	bl	8000f08 <HAL_Init>
	SystemClock_Config();
 8003a04:	f7ff ffbc 	bl	8003980 <SystemClock_Config>
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003a08:	2214      	movs	r2, #20
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	a80f      	add	r0, sp, #60	; 0x3c
 8003a0e:	f000 fb85 	bl	800411c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003a12:	4ba6      	ldr	r3, [pc, #664]	; (8003cac <main+0x2b0>)
	hadc1.Instance = ADC1;
 8003a14:	4da6      	ldr	r5, [pc, #664]	; (8003cb0 <main+0x2b4>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003a1c:	615a      	str	r2, [r3, #20]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003a24:	9201      	str	r2, [sp, #4]
 8003a26:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a2e:	615a      	str	r2, [r3, #20]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003a36:	9202      	str	r2, [sp, #8]
 8003a38:	9a02      	ldr	r2, [sp, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a40:	615a      	str	r2, [r3, #20]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003a48:	9203      	str	r2, [sp, #12]
 8003a4a:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a52:	615a      	str	r2, [r3, #20]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5a:	9304      	str	r3, [sp, #16]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2120      	movs	r1, #32
 8003a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003a64:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003a66:	f7fe f8cf 	bl	8001c08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Peltier_2_Pin | Peltier_1_Pin, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003a70:	4890      	ldr	r0, [pc, #576]	; (8003cb4 <main+0x2b8>)

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB, Peltier_2_Pin | Peltier_1_Pin, GPIO_PIN_RESET);
 8003a74:	f7fe f8c8 	bl	8001c08 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a78:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = LD2_Pin;
 8003a7a:	2320      	movs	r3, #32
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003a7c:	a90f      	add	r1, sp, #60	; 0x3c
 8003a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = LD2_Pin;
 8003a82:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a84:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003a8a:	f7fd ffe7 	bl	8001a5c <HAL_GPIO_Init>

	/*Configure GPIO pins : Inc_button_Pin Dec_button_Pin */
	GPIO_InitStruct.Pin = Inc_button_Pin | Dec_button_Pin;
 8003a8e:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a90:	a90f      	add	r1, sp, #60	; 0x3c
 8003a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = Inc_button_Pin | Dec_button_Pin;
 8003a96:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a98:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	f7fd ffde 	bl	8001a5c <HAL_GPIO_Init>

	/*Configure GPIO pins : Manual_mode_Pin Battery_life_Pin */
	GPIO_InitStruct.Pin = Manual_mode_Pin | Battery_life_Pin;
 8003aa0:	f44f 6382 	mov.w	r3, #1040	; 0x410
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa4:	a90f      	add	r1, sp, #60	; 0x3c
 8003aa6:	4883      	ldr	r0, [pc, #524]	; (8003cb4 <main+0x2b8>)
	GPIO_InitStruct.Pin = Manual_mode_Pin | Battery_life_Pin;
 8003aa8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aaa:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aae:	f7fd ffd5 	bl	8001a5c <HAL_GPIO_Init>

	/*Configure GPIO pin : Auto_mode_Pin */
	GPIO_InitStruct.Pin = Auto_mode_Pin;
 8003ab2:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Auto_mode_GPIO_Port, &GPIO_InitStruct);
 8003ab4:	a90f      	add	r1, sp, #60	; 0x3c
 8003ab6:	4880      	ldr	r0, [pc, #512]	; (8003cb8 <main+0x2bc>)
	GPIO_InitStruct.Pin = Auto_mode_Pin;
 8003ab8:	930f      	str	r3, [sp, #60]	; 0x3c

	/*Configure GPIO pins : Peltier_2_Pin Peltier_1_Pin */
	GPIO_InitStruct.Pin = Peltier_2_Pin | Peltier_1_Pin;
 8003aba:	f44f 7740 	mov.w	r7, #768	; 0x300
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abe:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(Auto_mode_GPIO_Port, &GPIO_InitStruct);
 8003ac2:	f7fd ffcb 	bl	8001a5c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac6:	a90f      	add	r1, sp, #60	; 0x3c
 8003ac8:	487a      	ldr	r0, [pc, #488]	; (8003cb4 <main+0x2b8>)
	GPIO_InitStruct.Pin = Peltier_2_Pin | Peltier_1_Pin;
 8003aca:	970f      	str	r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003acc:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad2:	f7fd ffc3 	bl	8001a5c <HAL_GPIO_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003ad6:	2218      	movs	r2, #24
 8003ad8:	4621      	mov	r1, r4
 8003ada:	a80f      	add	r0, sp, #60	; 0x3c
	ADC_MultiModeTypeDef multimode = { 0 };
 8003adc:	9408      	str	r4, [sp, #32]
 8003ade:	9409      	str	r4, [sp, #36]	; 0x24
 8003ae0:	940a      	str	r4, [sp, #40]	; 0x28
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003ae2:	f000 fb1b 	bl	800411c <memset>
	hadc1.Instance = ADC1;
 8003ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003aea:	e885 0018 	stmia.w	r5, {r3, r4}
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003aee:	4628      	mov	r0, r5
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003af0:	2304      	movs	r3, #4
 8003af2:	616b      	str	r3, [r5, #20]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003af4:	60ac      	str	r4, [r5, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003af6:	612c      	str	r4, [r5, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003af8:	61ec      	str	r4, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003afa:	626c      	str	r4, [r5, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003afc:	632c      	str	r4, [r5, #48]	; 0x30
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003afe:	62ee      	str	r6, [r5, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b00:	60ec      	str	r4, [r5, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003b02:	622e      	str	r6, [r5, #32]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b04:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b06:	61ac      	str	r4, [r5, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b08:	63ac      	str	r4, [r5, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003b0a:	f7fd fa9b 	bl	8001044 <HAL_ADC_Init>
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003b0e:	a908      	add	r1, sp, #32
 8003b10:	4628      	mov	r0, r5
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b12:	9408      	str	r4, [sp, #32]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003b14:	f7fd feb6 	bl	8001884 <HAL_ADCEx_MultiModeConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003b18:	a90f      	add	r1, sp, #60	; 0x3c
 8003b1a:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_1;
 8003b1c:	960f      	str	r6, [sp, #60]	; 0x3c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b1e:	9610      	str	r6, [sp, #64]	; 0x40
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b20:	9412      	str	r4, [sp, #72]	; 0x48
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b22:	9411      	str	r4, [sp, #68]	; 0x44
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b24:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfig.Offset = 0;
 8003b26:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003b28:	f7fd fd14 	bl	8001554 <HAL_ADC_ConfigChannel>
	huart1.Instance = USART1;
 8003b2c:	4863      	ldr	r0, [pc, #396]	; (8003cbc <main+0x2c0>)
	huart1.Init.BaudRate = 9600;
 8003b2e:	4b64      	ldr	r3, [pc, #400]	; (8003cc0 <main+0x2c4>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b30:	6084      	str	r4, [r0, #8]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003b32:	250c      	movs	r5, #12
	huart1.Init.BaudRate = 9600;
 8003b34:	f44f 5816 	mov.w	r8, #9600	; 0x2580
 8003b38:	e880 0108 	stmia.w	r0, {r3, r8}
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003b3c:	6145      	str	r5, [r0, #20]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003b3e:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003b40:	6104      	str	r4, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b42:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b44:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b46:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b48:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003b4a:	f7ff fd62 	bl	8003612 <HAL_UART_Init>
	huart2.Instance = USART2;
 8003b4e:	485d      	ldr	r0, [pc, #372]	; (8003cc4 <main+0x2c8>)
 8003b50:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <main+0x2cc>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003b52:	6145      	str	r5, [r0, #20]
	huart2.Init.BaudRate = 9600;
 8003b54:	e880 0108 	stmia.w	r0, {r3, r8}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b58:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003b5a:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003b5c:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b5e:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b60:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b62:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b64:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003b66:	f7ff fd54 	bl	8003612 <HAL_UART_Init>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003b6a:	221c      	movs	r2, #28
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	a808      	add	r0, sp, #32
	htim1.Instance = TIM1;
 8003b70:	4d56      	ldr	r5, [pc, #344]	; (8003ccc <main+0x2d0>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b72:	9405      	str	r4, [sp, #20]
 8003b74:	9406      	str	r4, [sp, #24]
 8003b76:	9407      	str	r4, [sp, #28]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003b78:	f000 fad0 	bl	800411c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003b7c:	222c      	movs	r2, #44	; 0x2c
 8003b7e:	4621      	mov	r1, r4
 8003b80:	a80f      	add	r0, sp, #60	; 0x3c
 8003b82:	f000 facb 	bl	800411c <memset>
	htim1.Instance = TIM1;
 8003b86:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <main+0x2d4>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b88:	60ac      	str	r4, [r5, #8]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003b8a:	4628      	mov	r0, r5
	htim1.Init.Prescaler = 0;
 8003b8c:	e885 0018 	stmia.w	r5, {r3, r4}
	htim1.Init.Period = 0;
 8003b90:	60ec      	str	r4, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b92:	612c      	str	r4, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 8003b94:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b96:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8003b98:	f7ff f80c 	bl	8002bb4 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003b9c:	a905      	add	r1, sp, #20
 8003b9e:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba0:	9405      	str	r4, [sp, #20]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ba2:	9406      	str	r4, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba4:	9407      	str	r4, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003ba6:	f7ff fa3d 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003baa:	4622      	mov	r2, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bac:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003bae:	a908      	add	r1, sp, #32
 8003bb0:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb2:	9308      	str	r3, [sp, #32]
	sConfigOC.Pulse = 0;
 8003bb4:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bb6:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bb8:	940b      	str	r4, [sp, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bba:	940c      	str	r4, [sp, #48]	; 0x30
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bbc:	940d      	str	r4, [sp, #52]	; 0x34
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bbe:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8003bc0:	f7ff f9a8 	bl	8002f14 <HAL_TIM_PWM_ConfigChannel>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003bc8:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bca:	9314      	str	r3, [sp, #80]	; 0x50
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003bcc:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bd2:	9317      	str	r3, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bd4:	940f      	str	r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bd6:	9410      	str	r4, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bd8:	9411      	str	r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.DeadTime = 0;
 8003bda:	9412      	str	r4, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bdc:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003bde:	9415      	str	r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003be0:	9416      	str	r4, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003be2:	9418      	str	r4, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003be4:	9419      	str	r4, [sp, #100]	; 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003be6:	f7ff fa47 	bl	8003078 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_MspPostInit(&htim1);
 8003bea:	4628      	mov	r0, r5
	hi2c2.Instance = I2C2;
 8003bec:	4d39      	ldr	r5, [pc, #228]	; (8003cd4 <main+0x2d8>)
	HAL_TIM_MspPostInit(&htim1);
 8003bee:	f000 f95f 	bl	8003eb0 <HAL_TIM_MspPostInit>
	hi2c2.Init.Timing = 0x2000090E;
 8003bf2:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <main+0x2dc>)
 8003bf4:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <main+0x2e0>)
	hi2c2.Init.OwnAddress1 = 0;
 8003bf6:	60ac      	str	r4, [r5, #8]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003bf8:	4628      	mov	r0, r5
	hi2c2.Init.Timing = 0x2000090E;
 8003bfa:	e885 000c 	stmia.w	r5, {r2, r3}
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bfe:	60ee      	str	r6, [r5, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c00:	612c      	str	r4, [r5, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8003c02:	616c      	str	r4, [r5, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c04:	61ac      	str	r4, [r5, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c06:	61ec      	str	r4, [r5, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c08:	622c      	str	r4, [r5, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003c0a:	f7fe f8de 	bl	8001dca <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4628      	mov	r0, r5
 8003c12:	f7fe fa4d 	bl	80020b0 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8003c16:	4621      	mov	r1, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f7fe fa6f 	bl	80020fc <HAL_I2CEx_ConfigDigitalFilter>
	printf("Tesla Cooler. \r\n");
 8003c1e:	4830      	ldr	r0, [pc, #192]	; (8003ce0 <main+0x2e4>)
 8003c20:	f000 fafc 	bl	800421c <puts>
	HAL_GPIO_WritePin(GPIOB, Peltier_2_Pin | Peltier_1_Pin, GPIO_PIN_SET); //peltier off
 8003c24:	4632      	mov	r2, r6
 8003c26:	4639      	mov	r1, r7
 8003c28:	4822      	ldr	r0, [pc, #136]	; (8003cb4 <main+0x2b8>)
 8003c2a:	f7fd ffed 	bl	8001c08 <HAL_GPIO_WritePin>
	while (HAL_I2C_IsDeviceReady(&hi2c2, 0x72 << 1, 2, 10) != HAL_OK) {
 8003c2e:	230a      	movs	r3, #10
 8003c30:	2202      	movs	r2, #2
 8003c32:	21e4      	movs	r1, #228	; 0xe4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f7fe f9b1 	bl	8001f9c <HAL_I2C_IsDeviceReady>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d1f7      	bne.n	8003c2e <main+0x232>
	ScreenSend((uint8_t *) "|-Tesla cooler");	//Boot message
 8003c3e:	4829      	ldr	r0, [pc, #164]	; (8003ce4 <main+0x2e8>)
		if (HAL_UART_Receive(&huart1, (uint8_t*) rxData, 50, 500)) {
 8003c40:	4c29      	ldr	r4, [pc, #164]	; (8003ce8 <main+0x2ec>)
 8003c42:	4d1e      	ldr	r5, [pc, #120]	; (8003cbc <main+0x2c0>)
						sprintf(txData, "Manual Mode\n"), 500);
 8003c44:	4e29      	ldr	r6, [pc, #164]	; (8003cec <main+0x2f0>)
	ScreenSend((uint8_t *) "|-Tesla cooler");	//Boot message
 8003c46:	f7ff fd17 	bl	8003678 <ScreenSend>
		if (HAL_UART_Receive(&huart1, (uint8_t*) rxData, 50, 500)) {
 8003c4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c4e:	2232      	movs	r2, #50	; 0x32
 8003c50:	4925      	ldr	r1, [pc, #148]	; (8003ce8 <main+0x2ec>)
 8003c52:	4628      	mov	r0, r5
 8003c54:	f7ff fc3c 	bl	80034d0 <HAL_UART_Receive>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d0f6      	beq.n	8003c4a <main+0x24e>
			if (rxData[0] == 'u' && rxData[1] == 'p') {
 8003c5c:	7823      	ldrb	r3, [r4, #0]
 8003c5e:	2b75      	cmp	r3, #117	; 0x75
 8003c60:	d115      	bne.n	8003c8e <main+0x292>
 8003c62:	7863      	ldrb	r3, [r4, #1]
 8003c64:	2b70      	cmp	r3, #112	; 0x70
 8003c66:	d10c      	bne.n	8003c82 <main+0x286>
				IncreaseTemperature();
 8003c68:	f7ff fd16 	bl	8003698 <IncreaseTemperature>
						sprintf(txData, "Increased Temp\n"), 500);
 8003c6c:	4920      	ldr	r1, [pc, #128]	; (8003cf0 <main+0x2f4>)
						sprintf(txData, "Decreased Temp\n"), 500);
 8003c6e:	4821      	ldr	r0, [pc, #132]	; (8003cf4 <main+0x2f8>)
 8003c70:	f000 fb00 	bl	8004274 <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8003c74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c78:	220f      	movs	r2, #15
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8003c7a:	491e      	ldr	r1, [pc, #120]	; (8003cf4 <main+0x2f8>)
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7ff fbce 	bl	800341e <HAL_UART_Transmit>
				rxData[0] = '\0';
 8003c82:	2300      	movs	r3, #0
 8003c84:	7023      	strb	r3, [r4, #0]
				rxData[1] = '\0';
 8003c86:	7063      	strb	r3, [r4, #1]
				rxData[2] = '\0';
 8003c88:	70a3      	strb	r3, [r4, #2]
				rxData[3] = '\0';
 8003c8a:	70e3      	strb	r3, [r4, #3]
 8003c8c:	e7dd      	b.n	8003c4a <main+0x24e>
			} else if (rxData[0] == 'd' && rxData[1] == 'o' && rxData[2] == 'w'
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d134      	bne.n	8003cfc <main+0x300>
 8003c92:	7863      	ldrb	r3, [r4, #1]
 8003c94:	2b6f      	cmp	r3, #111	; 0x6f
 8003c96:	d1f4      	bne.n	8003c82 <main+0x286>
 8003c98:	78a3      	ldrb	r3, [r4, #2]
 8003c9a:	2b77      	cmp	r3, #119	; 0x77
 8003c9c:	d1f1      	bne.n	8003c82 <main+0x286>
					&& rxData[3] == 'n') {
 8003c9e:	78e3      	ldrb	r3, [r4, #3]
 8003ca0:	2b6e      	cmp	r3, #110	; 0x6e
 8003ca2:	d1ee      	bne.n	8003c82 <main+0x286>
				DecreaseTemperature();
 8003ca4:	f7ff fd1a 	bl	80036dc <DecreaseTemperature>
						sprintf(txData, "Decreased Temp\n"), 500);
 8003ca8:	4913      	ldr	r1, [pc, #76]	; (8003cf8 <main+0x2fc>)
 8003caa:	e7e0      	b.n	8003c6e <main+0x272>
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	2000079c 	.word	0x2000079c
 8003cb4:	48000400 	.word	0x48000400
 8003cb8:	48000800 	.word	0x48000800
 8003cbc:	200007f0 	.word	0x200007f0
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	200008a0 	.word	0x200008a0
 8003cc8:	40004400 	.word	0x40004400
 8003ccc:	20000860 	.word	0x20000860
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	20000750 	.word	0x20000750
 8003cd8:	40005800 	.word	0x40005800
 8003cdc:	2000090e 	.word	0x2000090e
 8003ce0:	08008ef9 	.word	0x08008ef9
 8003ce4:	08008f09 	.word	0x08008f09
 8003ce8:	20000714 	.word	0x20000714
 8003cec:	08008e78 	.word	0x08008e78
 8003cf0:	08008f18 	.word	0x08008f18
 8003cf4:	20000732 	.word	0x20000732
 8003cf8:	08008f28 	.word	0x08008f28
			} else if (rxData[0] == 'b' && rxData[1] == 'a'
 8003cfc:	2b62      	cmp	r3, #98	; 0x62
 8003cfe:	d10f      	bne.n	8003d20 <main+0x324>
 8003d00:	7863      	ldrb	r3, [r4, #1]
 8003d02:	2b61      	cmp	r3, #97	; 0x61
 8003d04:	d1bd      	bne.n	8003c82 <main+0x286>
					&& rxData[2] == 't') {
 8003d06:	78a3      	ldrb	r3, [r4, #2]
 8003d08:	2b74      	cmp	r3, #116	; 0x74
 8003d0a:	d1ba      	bne.n	8003c82 <main+0x286>
				BatteryLife();
 8003d0c:	f7ff fd10 	bl	8003730 <BatteryLife>
						sprintf(txData, "Battery Life\n"), 500);
 8003d10:	4919      	ldr	r1, [pc, #100]	; (8003d78 <main+0x37c>)
 8003d12:	481a      	ldr	r0, [pc, #104]	; (8003d7c <main+0x380>)
 8003d14:	f000 faae 	bl	8004274 <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8003d18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d1c:	220d      	movs	r2, #13
 8003d1e:	e7ac      	b.n	8003c7a <main+0x27e>
			} else if (rxData[0] == 'a' && rxData[1] == 'u' && rxData[2] == 't'
 8003d20:	2b61      	cmp	r3, #97	; 0x61
 8003d22:	d116      	bne.n	8003d52 <main+0x356>
 8003d24:	7863      	ldrb	r3, [r4, #1]
 8003d26:	2b75      	cmp	r3, #117	; 0x75
 8003d28:	d1ab      	bne.n	8003c82 <main+0x286>
 8003d2a:	78a3      	ldrb	r3, [r4, #2]
 8003d2c:	2b74      	cmp	r3, #116	; 0x74
 8003d2e:	d1a8      	bne.n	8003c82 <main+0x286>
					&& rxData[3] == 'o') {
 8003d30:	78e3      	ldrb	r3, [r4, #3]
 8003d32:	2b6f      	cmp	r3, #111	; 0x6f
 8003d34:	d1a5      	bne.n	8003c82 <main+0x286>
				AutoMode();
 8003d36:	f7ff fd53 	bl	80037e0 <AutoMode>
						sprintf(txData, "Automatic Mode\n"), 500);
 8003d3a:	4911      	ldr	r1, [pc, #68]	; (8003d80 <main+0x384>)
 8003d3c:	480f      	ldr	r0, [pc, #60]	; (8003d7c <main+0x380>)
 8003d3e:	f000 fa99 	bl	8004274 <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8003d42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d46:	220f      	movs	r2, #15
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8003d48:	490c      	ldr	r1, [pc, #48]	; (8003d7c <main+0x380>)
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7ff fb67 	bl	800341e <HAL_UART_Transmit>
 8003d50:	e77b      	b.n	8003c4a <main+0x24e>
			} else if (rxData[0] == 'm' && rxData[1] == 'a'
 8003d52:	2b6d      	cmp	r3, #109	; 0x6d
 8003d54:	d195      	bne.n	8003c82 <main+0x286>
 8003d56:	7863      	ldrb	r3, [r4, #1]
 8003d58:	2b61      	cmp	r3, #97	; 0x61
 8003d5a:	d192      	bne.n	8003c82 <main+0x286>
					&& rxData[2] == 'n') {
 8003d5c:	78a3      	ldrb	r3, [r4, #2]
 8003d5e:	2b6e      	cmp	r3, #110	; 0x6e
 8003d60:	d18f      	bne.n	8003c82 <main+0x286>
				ManualMode();
 8003d62:	f7ff fcf5 	bl	8003750 <ManualMode>
						sprintf(txData, "Manual Mode\n"), 500);
 8003d66:	4631      	mov	r1, r6
 8003d68:	4804      	ldr	r0, [pc, #16]	; (8003d7c <main+0x380>)
 8003d6a:	f000 fa83 	bl	8004274 <strcpy>
				HAL_UART_Transmit(&huart1, (uint8_t *) txData,
 8003d6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d72:	220c      	movs	r2, #12
 8003d74:	e7e8      	b.n	8003d48 <main+0x34c>
 8003d76:	bf00      	nop
 8003d78:	08008f38 	.word	0x08008f38
 8003d7c:	20000732 	.word	0x20000732
 8003d80:	08008f46 	.word	0x08008f46

08003d84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_MspInit+0x34>)
{
 8003d8a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	619a      	str	r2, [r3, #24]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	f002 0201 	and.w	r2, r2, #1
 8003d9a:	9200      	str	r2, [sp, #0]
 8003d9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003da4:	61da      	str	r2, [r3, #28]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003dae:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003db0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003db2:	f7fd fdf7 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003db6:	b003      	add	sp, #12
 8003db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc6:	2214      	movs	r2, #20
 8003dc8:	2100      	movs	r1, #0
 8003dca:	a803      	add	r0, sp, #12
 8003dcc:	f000 f9a6 	bl	800411c <memset>
  if(hadc->Instance==ADC1)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd6:	d11e      	bne.n	8003e16 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003dd8:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003ddc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de0:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003de8:	615a      	str	r2, [r3, #20]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003df0:	9201      	str	r2, [sp, #4]
 8003df2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003dfa:	615a      	str	r2, [r3, #20]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e06:	2301      	movs	r3, #1
 8003e08:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e12:	f7fd fe23 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e16:	b008      	add	sp, #32
 8003e18:	bd10      	pop	{r4, pc}
	...

08003e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	4604      	mov	r4, r0
 8003e20:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e22:	2214      	movs	r2, #20
 8003e24:	2100      	movs	r1, #0
 8003e26:	a803      	add	r0, sp, #12
 8003e28:	f000 f978 	bl	800411c <memset>
  if(hi2c->Instance==I2C2)
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <HAL_I2C_MspInit+0x64>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d122      	bne.n	8003e7a <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e34:	4c13      	ldr	r4, [pc, #76]	; (8003e84 <HAL_I2C_MspInit+0x68>)
 8003e36:	6963      	ldr	r3, [r4, #20]
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	6163      	str	r3, [r4, #20]
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	9b01      	ldr	r3, [sp, #4]
    /**I2C2 GPIO Configuration    
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e4e:	2312      	movs	r3, #18
 8003e50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e52:	2301      	movs	r3, #1
 8003e54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e56:	2303      	movs	r3, #3
 8003e58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e5c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e64:	f7fd fdfa 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e68:	69e3      	ldr	r3, [r4, #28]
 8003e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e6e:	61e3      	str	r3, [r4, #28]
 8003e70:	69e3      	ldr	r3, [r4, #28]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	9302      	str	r3, [sp, #8]
 8003e78:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e7a:	b008      	add	sp, #32
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	bf00      	nop
 8003e80:	40005800 	.word	0x40005800
 8003e84:	40021000 	.word	0x40021000

08003e88 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8003e88:	6802      	ldr	r2, [r0, #0]
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_TIM_PWM_MspInit+0x24>)
 8003e8c:	429a      	cmp	r2, r3
{
 8003e8e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8003e90:	d10a      	bne.n	8003ea8 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e92:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9c:	619a      	str	r2, [r3, #24]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ea8:	b002      	add	sp, #8
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00

08003eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb6:	2214      	movs	r2, #20
 8003eb8:	2100      	movs	r1, #0
 8003eba:	a801      	add	r0, sp, #4
 8003ebc:	f000 f92e 	bl	800411c <memset>
  if(htim->Instance==TIM1)
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <HAL_TIM_MspPostInit+0x44>)
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d113      	bne.n	8003ef0 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ecc:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ece:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ed0:	4809      	ldr	r0, [pc, #36]	; (8003ef8 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ed6:	615a      	str	r2, [r3, #20]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003eea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eec:	f7fd fdb6 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ef0:	b006      	add	sp, #24
 8003ef2:	bd10      	pop	{r4, pc}
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	48000800 	.word	0x48000800

08003efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003efc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efe:	2214      	movs	r2, #20
{
 8003f00:	b08a      	sub	sp, #40	; 0x28
 8003f02:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	2100      	movs	r1, #0
 8003f06:	eb0d 0002 	add.w	r0, sp, r2
 8003f0a:	f000 f907 	bl	800411c <memset>
  if(huart->Instance==USART1)
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <HAL_UART_MspInit+0x9c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d120      	bne.n	8003f58 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f16:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_UART_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f18:	4821      	ldr	r0, [pc, #132]	; (8003fa0 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f1a:	699a      	ldr	r2, [r3, #24]
 8003f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f20:	619a      	str	r2, [r3, #24]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f28:	9201      	str	r2, [sp, #4]
 8003f2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003f32:	615a      	str	r2, [r3, #20]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3a:	9302      	str	r3, [sp, #8]
 8003f3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f3e:	2330      	movs	r3, #48	; 0x30
 8003f40:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f42:	2302      	movs	r3, #2
 8003f44:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f46:	2303      	movs	r3, #3
 8003f48:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f4a:	2307      	movs	r3, #7
 8003f4c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f50:	f7fd fd84 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f54:	b00a      	add	sp, #40	; 0x28
 8003f56:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8003f58:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <HAL_UART_MspInit+0xa8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d1fa      	bne.n	8003f54 <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <HAL_UART_MspInit+0xa0>)
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f66:	61da      	str	r2, [r3, #28]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003f6e:	9203      	str	r2, [sp, #12]
 8003f70:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f78:	615a      	str	r2, [r3, #20]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f84:	230c      	movs	r3, #12
 8003f86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f8c:	2307      	movs	r3, #7
 8003f8e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f90:	a905      	add	r1, sp, #20
 8003f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f96:	e7db      	b.n	8003f50 <HAL_UART_MspInit+0x54>
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	48000800 	.word	0x48000800
 8003fa4:	40004400 	.word	0x40004400

08003fa8 <NMI_Handler>:
 8003fa8:	4770      	bx	lr

08003faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003faa:	e7fe      	b.n	8003faa <HardFault_Handler>

08003fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fac:	e7fe      	b.n	8003fac <MemManage_Handler>

08003fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fae:	e7fe      	b.n	8003fae <BusFault_Handler>

08003fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb0:	e7fe      	b.n	8003fb0 <UsageFault_Handler>

08003fb2 <SVC_Handler>:
 8003fb2:	4770      	bx	lr

08003fb4 <DebugMon_Handler>:
 8003fb4:	4770      	bx	lr

08003fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fb6:	4770      	bx	lr

08003fb8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fb8:	f7fc bfb8 	b.w	8000f2c <HAL_IncTick>

08003fbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003fbc:	b508      	push	{r3, lr}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	4804      	ldr	r0, [pc, #16]	; (8003fd8 <_read+0x1c>)
 8003fc6:	f7ff fa83 	bl	80034d0 <HAL_UART_Receive>
 8003fca:	2800      	cmp	r0, #0
		len = EOF;					// signal an issue with stream

	return len;
}
 8003fcc:	bf0c      	ite	eq
 8003fce:	2001      	moveq	r0, #1
 8003fd0:	f04f 30ff 	movne.w	r0, #4294967295
 8003fd4:	bd08      	pop	{r3, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200008a0 	.word	0x200008a0

08003fdc <_write>:

int _write(int file, char *ptr, int len)
{
 8003fdc:	b510      	push	{r4, lr}

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
{
 8003fe2:	4614      	mov	r4, r2
	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8003fe4:	4805      	ldr	r0, [pc, #20]	; (8003ffc <_write+0x20>)
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	f7ff fa19 	bl	800341e <HAL_UART_Transmit>
	if(result == HAL_ERROR || result == HAL_BUSY)
 8003fec:	3801      	subs	r0, #1
 8003fee:	b2c0      	uxtb	r0, r0
 8003ff0:	2801      	cmp	r0, #1
 8003ff2:	d801      	bhi.n	8003ff8 <_write+0x1c>
	{
		Error_Handler();
 8003ff4:	f7ff fec6 	bl	8003d84 <Error_Handler>
	}

	return len;
}
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	bd10      	pop	{r4, pc}
 8003ffc:	200008a0 	.word	0x200008a0

08004000 <_close>:


int _close(int file)
{
	return -1;
}
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	4770      	bx	lr

08004006 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800400a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr

08004010 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004010:	2001      	movs	r0, #1
 8004012:	4770      	bx	lr

08004014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004014:	2000      	movs	r0, #0
 8004016:	4770      	bx	lr

08004018 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004018:	4915      	ldr	r1, [pc, #84]	; (8004070 <SystemInit+0x58>)
 800401a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800401e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <SystemInit+0x5c>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004030:	6858      	ldr	r0, [r3, #4]
 8004032:	4a11      	ldr	r2, [pc, #68]	; (8004078 <SystemInit+0x60>)
 8004034:	4002      	ands	r2, r0
 8004036:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800403e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004042:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800404a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004052:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004056:	f022 020f 	bic.w	r2, r2, #15
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800405c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <SystemInit+0x64>)
 8004060:	4002      	ands	r2, r0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004064:	2200      	movs	r2, #0
 8004066:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800406c:	608b      	str	r3, [r1, #8]
 800406e:	4770      	bx	lr
 8004070:	e000ed00 	.word	0xe000ed00
 8004074:	40021000 	.word	0x40021000
 8004078:	f87fc00c 	.word	0xf87fc00c
 800407c:	ff00fccc 	.word	0xff00fccc

08004080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004084:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004086:	e003      	b.n	8004090 <LoopCopyDataInit>

08004088 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800408a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800408c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800408e:	3104      	adds	r1, #4

08004090 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004090:	480b      	ldr	r0, [pc, #44]	; (80040c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004094:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004096:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004098:	d3f6      	bcc.n	8004088 <CopyDataInit>
	ldr	r2, =_sbss
 800409a:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800409c:	e002      	b.n	80040a4 <LoopFillZerobss>

0800409e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800409e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80040a0:	f842 3b04 	str.w	r3, [r2], #4

080040a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <LoopForever+0x16>)
	cmp	r2, r3
 80040a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040a8:	d3f9      	bcc.n	800409e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040aa:	f7ff ffb5 	bl	8004018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ae:	f000 f811 	bl	80040d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040b2:	f7ff fca3 	bl	80039fc <main>

080040b6 <LoopForever>:

LoopForever:
    b LoopForever
 80040b6:	e7fe      	b.n	80040b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040b8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80040bc:	08009270 	.word	0x08009270
	ldr	r0, =_sdata
 80040c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040c4:	2000068c 	.word	0x2000068c
	ldr	r2, =_sbss
 80040c8:	2000068c 	.word	0x2000068c
	ldr	r3, = _ebss
 80040cc:	20000920 	.word	0x20000920

080040d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040d0:	e7fe      	b.n	80040d0 <ADC1_2_IRQHandler>
	...

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	4e0d      	ldr	r6, [pc, #52]	; (800410c <__libc_init_array+0x38>)
 80040d8:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040da:	1ba4      	subs	r4, r4, r6
 80040dc:	10a4      	asrs	r4, r4, #2
 80040de:	2500      	movs	r5, #0
 80040e0:	42a5      	cmp	r5, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	4e0b      	ldr	r6, [pc, #44]	; (8004114 <__libc_init_array+0x40>)
 80040e6:	4c0c      	ldr	r4, [pc, #48]	; (8004118 <__libc_init_array+0x44>)
 80040e8:	f004 fe52 	bl	8008d90 <_init>
 80040ec:	1ba4      	subs	r4, r4, r6
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	2500      	movs	r5, #0
 80040f2:	42a5      	cmp	r5, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040fc:	4798      	blx	r3
 80040fe:	3501      	adds	r5, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004106:	4798      	blx	r3
 8004108:	3501      	adds	r5, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08009268 	.word	0x08009268
 8004110:	08009268 	.word	0x08009268
 8004114:	08009268 	.word	0x08009268
 8004118:	0800926c 	.word	0x0800926c

0800411c <memset>:
 800411c:	4402      	add	r2, r0
 800411e:	4603      	mov	r3, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <printf>:
 800412c:	b40f      	push	{r0, r1, r2, r3}
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <printf+0x2c>)
 8004130:	b513      	push	{r0, r1, r4, lr}
 8004132:	681c      	ldr	r4, [r3, #0]
 8004134:	b124      	cbz	r4, 8004140 <printf+0x14>
 8004136:	69a3      	ldr	r3, [r4, #24]
 8004138:	b913      	cbnz	r3, 8004140 <printf+0x14>
 800413a:	4620      	mov	r0, r4
 800413c:	f003 f8e4 	bl	8007308 <__sinit>
 8004140:	ab05      	add	r3, sp, #20
 8004142:	9a04      	ldr	r2, [sp, #16]
 8004144:	68a1      	ldr	r1, [r4, #8]
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	4620      	mov	r0, r4
 800414a:	f001 f871 	bl	8005230 <_vfprintf_r>
 800414e:	b002      	add	sp, #8
 8004150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004154:	b004      	add	sp, #16
 8004156:	4770      	bx	lr
 8004158:	2000001c 	.word	0x2000001c

0800415c <_puts_r>:
 800415c:	b530      	push	{r4, r5, lr}
 800415e:	4605      	mov	r5, r0
 8004160:	b089      	sub	sp, #36	; 0x24
 8004162:	4608      	mov	r0, r1
 8004164:	460c      	mov	r4, r1
 8004166:	f7fc f83b 	bl	80001e0 <strlen>
 800416a:	4b28      	ldr	r3, [pc, #160]	; (800420c <_puts_r+0xb0>)
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	2301      	movs	r3, #1
 8004170:	9005      	str	r0, [sp, #20]
 8004172:	9307      	str	r3, [sp, #28]
 8004174:	4418      	add	r0, r3
 8004176:	ab04      	add	r3, sp, #16
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	2302      	movs	r3, #2
 800417c:	9404      	str	r4, [sp, #16]
 800417e:	9003      	str	r0, [sp, #12]
 8004180:	9302      	str	r3, [sp, #8]
 8004182:	b125      	cbz	r5, 800418e <_puts_r+0x32>
 8004184:	69ab      	ldr	r3, [r5, #24]
 8004186:	b913      	cbnz	r3, 800418e <_puts_r+0x32>
 8004188:	4628      	mov	r0, r5
 800418a:	f003 f8bd 	bl	8007308 <__sinit>
 800418e:	69ab      	ldr	r3, [r5, #24]
 8004190:	68ac      	ldr	r4, [r5, #8]
 8004192:	b913      	cbnz	r3, 800419a <_puts_r+0x3e>
 8004194:	4628      	mov	r0, r5
 8004196:	f003 f8b7 	bl	8007308 <__sinit>
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <_puts_r+0xb4>)
 800419c:	429c      	cmp	r4, r3
 800419e:	d12a      	bne.n	80041f6 <_puts_r+0x9a>
 80041a0:	686c      	ldr	r4, [r5, #4]
 80041a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a4:	07db      	lsls	r3, r3, #31
 80041a6:	d405      	bmi.n	80041b4 <_puts_r+0x58>
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	0598      	lsls	r0, r3, #22
 80041ac:	d402      	bmi.n	80041b4 <_puts_r+0x58>
 80041ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b0:	f003 fbb8 	bl	8007924 <__retarget_lock_acquire_recursive>
 80041b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b8:	0499      	lsls	r1, r3, #18
 80041ba:	d406      	bmi.n	80041ca <_puts_r+0x6e>
 80041bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041c0:	81a3      	strh	r3, [r4, #12]
 80041c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c8:	6663      	str	r3, [r4, #100]	; 0x64
 80041ca:	4628      	mov	r0, r5
 80041cc:	aa01      	add	r2, sp, #4
 80041ce:	4621      	mov	r1, r4
 80041d0:	f003 fa2c 	bl	800762c <__sfvwrite_r>
 80041d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041d6:	2800      	cmp	r0, #0
 80041d8:	bf14      	ite	ne
 80041da:	f04f 35ff 	movne.w	r5, #4294967295
 80041de:	250a      	moveq	r5, #10
 80041e0:	07da      	lsls	r2, r3, #31
 80041e2:	d405      	bmi.n	80041f0 <_puts_r+0x94>
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	059b      	lsls	r3, r3, #22
 80041e8:	d402      	bmi.n	80041f0 <_puts_r+0x94>
 80041ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ec:	f003 fb9b 	bl	8007926 <__retarget_lock_release_recursive>
 80041f0:	4628      	mov	r0, r5
 80041f2:	b009      	add	sp, #36	; 0x24
 80041f4:	bd30      	pop	{r4, r5, pc}
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <_puts_r+0xb8>)
 80041f8:	429c      	cmp	r4, r3
 80041fa:	d101      	bne.n	8004200 <_puts_r+0xa4>
 80041fc:	68ac      	ldr	r4, [r5, #8]
 80041fe:	e7d0      	b.n	80041a2 <_puts_r+0x46>
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <_puts_r+0xbc>)
 8004202:	429c      	cmp	r4, r3
 8004204:	bf08      	it	eq
 8004206:	68ec      	ldreq	r4, [r5, #12]
 8004208:	e7cb      	b.n	80041a2 <_puts_r+0x46>
 800420a:	bf00      	nop
 800420c:	08008e42 	.word	0x08008e42
 8004210:	08009018 	.word	0x08009018
 8004214:	08009038 	.word	0x08009038
 8004218:	08008ff8 	.word	0x08008ff8

0800421c <puts>:
 800421c:	4b02      	ldr	r3, [pc, #8]	; (8004228 <puts+0xc>)
 800421e:	4601      	mov	r1, r0
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	f7ff bf9b 	b.w	800415c <_puts_r>
 8004226:	bf00      	nop
 8004228:	2000001c 	.word	0x2000001c

0800422c <sprintf>:
 800422c:	b40e      	push	{r1, r2, r3}
 800422e:	b500      	push	{lr}
 8004230:	b09c      	sub	sp, #112	; 0x70
 8004232:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004236:	ab1d      	add	r3, sp, #116	; 0x74
 8004238:	f8ad 1014 	strh.w	r1, [sp, #20]
 800423c:	9002      	str	r0, [sp, #8]
 800423e:	9006      	str	r0, [sp, #24]
 8004240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004244:	480a      	ldr	r0, [pc, #40]	; (8004270 <sprintf+0x44>)
 8004246:	9104      	str	r1, [sp, #16]
 8004248:	9107      	str	r1, [sp, #28]
 800424a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800424e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004252:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004256:	6800      	ldr	r0, [r0, #0]
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	a902      	add	r1, sp, #8
 800425c:	f000 f814 	bl	8004288 <_svfprintf_r>
 8004260:	9b02      	ldr	r3, [sp, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	b01c      	add	sp, #112	; 0x70
 8004268:	f85d eb04 	ldr.w	lr, [sp], #4
 800426c:	b003      	add	sp, #12
 800426e:	4770      	bx	lr
 8004270:	2000001c 	.word	0x2000001c

08004274 <strcpy>:
 8004274:	4603      	mov	r3, r0
 8004276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800427a:	f803 2b01 	strb.w	r2, [r3], #1
 800427e:	2a00      	cmp	r2, #0
 8004280:	d1f9      	bne.n	8004276 <strcpy+0x2>
 8004282:	4770      	bx	lr
 8004284:	0000      	movs	r0, r0
	...

08004288 <_svfprintf_r>:
 8004288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	b0bd      	sub	sp, #244	; 0xf4
 800428e:	468a      	mov	sl, r1
 8004290:	4615      	mov	r5, r2
 8004292:	461f      	mov	r7, r3
 8004294:	4683      	mov	fp, r0
 8004296:	f003 fb35 	bl	8007904 <_localeconv_r>
 800429a:	6803      	ldr	r3, [r0, #0]
 800429c:	930d      	str	r3, [sp, #52]	; 0x34
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fb ff9e 	bl	80001e0 <strlen>
 80042a4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80042a8:	9008      	str	r0, [sp, #32]
 80042aa:	061b      	lsls	r3, r3, #24
 80042ac:	d518      	bpl.n	80042e0 <_svfprintf_r+0x58>
 80042ae:	f8da 3010 	ldr.w	r3, [sl, #16]
 80042b2:	b9ab      	cbnz	r3, 80042e0 <_svfprintf_r+0x58>
 80042b4:	2140      	movs	r1, #64	; 0x40
 80042b6:	4658      	mov	r0, fp
 80042b8:	f003 fbaa 	bl	8007a10 <_malloc_r>
 80042bc:	f8ca 0000 	str.w	r0, [sl]
 80042c0:	f8ca 0010 	str.w	r0, [sl, #16]
 80042c4:	b948      	cbnz	r0, 80042da <_svfprintf_r+0x52>
 80042c6:	230c      	movs	r3, #12
 80042c8:	f8cb 3000 	str.w	r3, [fp]
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	9309      	str	r3, [sp, #36]	; 0x24
 80042d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042d4:	b03d      	add	sp, #244	; 0xf4
 80042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	f8ca 3014 	str.w	r3, [sl, #20]
 80042e0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8004548 <_svfprintf_r+0x2c0>
 80042e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042e8:	2300      	movs	r3, #0
 80042ea:	ac2c      	add	r4, sp, #176	; 0xb0
 80042ec:	941f      	str	r4, [sp, #124]	; 0x7c
 80042ee:	9321      	str	r3, [sp, #132]	; 0x84
 80042f0:	9320      	str	r3, [sp, #128]	; 0x80
 80042f2:	9505      	str	r5, [sp, #20]
 80042f4:	9303      	str	r3, [sp, #12]
 80042f6:	9311      	str	r3, [sp, #68]	; 0x44
 80042f8:	9310      	str	r3, [sp, #64]	; 0x40
 80042fa:	9309      	str	r3, [sp, #36]	; 0x24
 80042fc:	9d05      	ldr	r5, [sp, #20]
 80042fe:	462b      	mov	r3, r5
 8004300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004304:	b112      	cbz	r2, 800430c <_svfprintf_r+0x84>
 8004306:	2a25      	cmp	r2, #37	; 0x25
 8004308:	f040 8083 	bne.w	8004412 <_svfprintf_r+0x18a>
 800430c:	9b05      	ldr	r3, [sp, #20]
 800430e:	1aee      	subs	r6, r5, r3
 8004310:	d00d      	beq.n	800432e <_svfprintf_r+0xa6>
 8004312:	e884 0048 	stmia.w	r4, {r3, r6}
 8004316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004318:	4433      	add	r3, r6
 800431a:	9321      	str	r3, [sp, #132]	; 0x84
 800431c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800431e:	3301      	adds	r3, #1
 8004320:	2b07      	cmp	r3, #7
 8004322:	9320      	str	r3, [sp, #128]	; 0x80
 8004324:	dc77      	bgt.n	8004416 <_svfprintf_r+0x18e>
 8004326:	3408      	adds	r4, #8
 8004328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800432a:	4433      	add	r3, r6
 800432c:	9309      	str	r3, [sp, #36]	; 0x24
 800432e:	782b      	ldrb	r3, [r5, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8729 	beq.w	8005188 <_svfprintf_r+0xf00>
 8004336:	2300      	movs	r3, #0
 8004338:	1c69      	adds	r1, r5, #1
 800433a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 39ff 	mov.w	r9, #4294967295
 8004344:	930a      	str	r3, [sp, #40]	; 0x28
 8004346:	461d      	mov	r5, r3
 8004348:	200a      	movs	r0, #10
 800434a:	1c4e      	adds	r6, r1, #1
 800434c:	7809      	ldrb	r1, [r1, #0]
 800434e:	9605      	str	r6, [sp, #20]
 8004350:	9102      	str	r1, [sp, #8]
 8004352:	9902      	ldr	r1, [sp, #8]
 8004354:	3920      	subs	r1, #32
 8004356:	2958      	cmp	r1, #88	; 0x58
 8004358:	f200 8418 	bhi.w	8004b8c <_svfprintf_r+0x904>
 800435c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004360:	041600a6 	.word	0x041600a6
 8004364:	00ab0416 	.word	0x00ab0416
 8004368:	04160416 	.word	0x04160416
 800436c:	04160416 	.word	0x04160416
 8004370:	04160416 	.word	0x04160416
 8004374:	006500ae 	.word	0x006500ae
 8004378:	00b70416 	.word	0x00b70416
 800437c:	041600ba 	.word	0x041600ba
 8004380:	00da00d7 	.word	0x00da00d7
 8004384:	00da00da 	.word	0x00da00da
 8004388:	00da00da 	.word	0x00da00da
 800438c:	00da00da 	.word	0x00da00da
 8004390:	00da00da 	.word	0x00da00da
 8004394:	04160416 	.word	0x04160416
 8004398:	04160416 	.word	0x04160416
 800439c:	04160416 	.word	0x04160416
 80043a0:	04160416 	.word	0x04160416
 80043a4:	04160416 	.word	0x04160416
 80043a8:	012b0115 	.word	0x012b0115
 80043ac:	012b0416 	.word	0x012b0416
 80043b0:	04160416 	.word	0x04160416
 80043b4:	04160416 	.word	0x04160416
 80043b8:	041600ed 	.word	0x041600ed
 80043bc:	03400416 	.word	0x03400416
 80043c0:	04160416 	.word	0x04160416
 80043c4:	04160416 	.word	0x04160416
 80043c8:	03a80416 	.word	0x03a80416
 80043cc:	04160416 	.word	0x04160416
 80043d0:	04160086 	.word	0x04160086
 80043d4:	04160416 	.word	0x04160416
 80043d8:	04160416 	.word	0x04160416
 80043dc:	04160416 	.word	0x04160416
 80043e0:	04160416 	.word	0x04160416
 80043e4:	01070416 	.word	0x01070416
 80043e8:	012b006b 	.word	0x012b006b
 80043ec:	012b012b 	.word	0x012b012b
 80043f0:	006b00f0 	.word	0x006b00f0
 80043f4:	04160416 	.word	0x04160416
 80043f8:	041600fa 	.word	0x041600fa
 80043fc:	03420322 	.word	0x03420322
 8004400:	01010376 	.word	0x01010376
 8004404:	03870416 	.word	0x03870416
 8004408:	03aa0416 	.word	0x03aa0416
 800440c:	04160416 	.word	0x04160416
 8004410:	03c2      	.short	0x03c2
 8004412:	461d      	mov	r5, r3
 8004414:	e773      	b.n	80042fe <_svfprintf_r+0x76>
 8004416:	aa1f      	add	r2, sp, #124	; 0x7c
 8004418:	4651      	mov	r1, sl
 800441a:	4658      	mov	r0, fp
 800441c:	f004 f9db 	bl	80087d6 <__ssprint_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	f040 8692 	bne.w	800514a <_svfprintf_r+0xec2>
 8004426:	ac2c      	add	r4, sp, #176	; 0xb0
 8004428:	e77e      	b.n	8004328 <_svfprintf_r+0xa0>
 800442a:	2301      	movs	r3, #1
 800442c:	222b      	movs	r2, #43	; 0x2b
 800442e:	9905      	ldr	r1, [sp, #20]
 8004430:	e78b      	b.n	800434a <_svfprintf_r+0xc2>
 8004432:	460f      	mov	r7, r1
 8004434:	e7fb      	b.n	800442e <_svfprintf_r+0x1a6>
 8004436:	b10b      	cbz	r3, 800443c <_svfprintf_r+0x1b4>
 8004438:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800443c:	06ae      	lsls	r6, r5, #26
 800443e:	f140 80aa 	bpl.w	8004596 <_svfprintf_r+0x30e>
 8004442:	3707      	adds	r7, #7
 8004444:	f027 0707 	bic.w	r7, r7, #7
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	2e00      	cmp	r6, #0
 8004454:	f177 0300 	sbcs.w	r3, r7, #0
 8004458:	da06      	bge.n	8004468 <_svfprintf_r+0x1e0>
 800445a:	4276      	negs	r6, r6
 800445c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004460:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004464:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004468:	2301      	movs	r3, #1
 800446a:	e2ca      	b.n	8004a02 <_svfprintf_r+0x77a>
 800446c:	b10b      	cbz	r3, 8004472 <_svfprintf_r+0x1ea>
 800446e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004472:	4b37      	ldr	r3, [pc, #220]	; (8004550 <_svfprintf_r+0x2c8>)
 8004474:	9311      	str	r3, [sp, #68]	; 0x44
 8004476:	06ab      	lsls	r3, r5, #26
 8004478:	f140 8339 	bpl.w	8004aee <_svfprintf_r+0x866>
 800447c:	3707      	adds	r7, #7
 800447e:	f027 0707 	bic.w	r7, r7, #7
 8004482:	f107 0308 	add.w	r3, r7, #8
 8004486:	e9d7 6700 	ldrd	r6, r7, [r7]
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	07e8      	lsls	r0, r5, #31
 800448e:	d50b      	bpl.n	80044a8 <_svfprintf_r+0x220>
 8004490:	ea56 0307 	orrs.w	r3, r6, r7
 8004494:	d008      	beq.n	80044a8 <_svfprintf_r+0x220>
 8004496:	2330      	movs	r3, #48	; 0x30
 8004498:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800449c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80044a0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80044a4:	f045 0502 	orr.w	r5, r5, #2
 80044a8:	2302      	movs	r3, #2
 80044aa:	e2a7      	b.n	80049fc <_svfprintf_r+0x774>
 80044ac:	2a00      	cmp	r2, #0
 80044ae:	d1be      	bne.n	800442e <_svfprintf_r+0x1a6>
 80044b0:	2301      	movs	r3, #1
 80044b2:	2220      	movs	r2, #32
 80044b4:	e7bb      	b.n	800442e <_svfprintf_r+0x1a6>
 80044b6:	f045 0501 	orr.w	r5, r5, #1
 80044ba:	e7b8      	b.n	800442e <_svfprintf_r+0x1a6>
 80044bc:	683e      	ldr	r6, [r7, #0]
 80044be:	960a      	str	r6, [sp, #40]	; 0x28
 80044c0:	2e00      	cmp	r6, #0
 80044c2:	f107 0104 	add.w	r1, r7, #4
 80044c6:	dab4      	bge.n	8004432 <_svfprintf_r+0x1aa>
 80044c8:	4276      	negs	r6, r6
 80044ca:	960a      	str	r6, [sp, #40]	; 0x28
 80044cc:	460f      	mov	r7, r1
 80044ce:	f045 0504 	orr.w	r5, r5, #4
 80044d2:	e7ac      	b.n	800442e <_svfprintf_r+0x1a6>
 80044d4:	9905      	ldr	r1, [sp, #20]
 80044d6:	1c4e      	adds	r6, r1, #1
 80044d8:	7809      	ldrb	r1, [r1, #0]
 80044da:	9102      	str	r1, [sp, #8]
 80044dc:	292a      	cmp	r1, #42	; 0x2a
 80044de:	d010      	beq.n	8004502 <_svfprintf_r+0x27a>
 80044e0:	f04f 0900 	mov.w	r9, #0
 80044e4:	9605      	str	r6, [sp, #20]
 80044e6:	9902      	ldr	r1, [sp, #8]
 80044e8:	3930      	subs	r1, #48	; 0x30
 80044ea:	2909      	cmp	r1, #9
 80044ec:	f63f af31 	bhi.w	8004352 <_svfprintf_r+0xca>
 80044f0:	fb00 1909 	mla	r9, r0, r9, r1
 80044f4:	9905      	ldr	r1, [sp, #20]
 80044f6:	460e      	mov	r6, r1
 80044f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80044fc:	9102      	str	r1, [sp, #8]
 80044fe:	9605      	str	r6, [sp, #20]
 8004500:	e7f1      	b.n	80044e6 <_svfprintf_r+0x25e>
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	9605      	str	r6, [sp, #20]
 8004506:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800450a:	3704      	adds	r7, #4
 800450c:	e78f      	b.n	800442e <_svfprintf_r+0x1a6>
 800450e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004512:	e78c      	b.n	800442e <_svfprintf_r+0x1a6>
 8004514:	2100      	movs	r1, #0
 8004516:	910a      	str	r1, [sp, #40]	; 0x28
 8004518:	9902      	ldr	r1, [sp, #8]
 800451a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800451c:	3930      	subs	r1, #48	; 0x30
 800451e:	fb00 1106 	mla	r1, r0, r6, r1
 8004522:	910a      	str	r1, [sp, #40]	; 0x28
 8004524:	9905      	ldr	r1, [sp, #20]
 8004526:	460e      	mov	r6, r1
 8004528:	f816 1b01 	ldrb.w	r1, [r6], #1
 800452c:	9102      	str	r1, [sp, #8]
 800452e:	9902      	ldr	r1, [sp, #8]
 8004530:	9605      	str	r6, [sp, #20]
 8004532:	3930      	subs	r1, #48	; 0x30
 8004534:	2909      	cmp	r1, #9
 8004536:	d9ef      	bls.n	8004518 <_svfprintf_r+0x290>
 8004538:	e70b      	b.n	8004352 <_svfprintf_r+0xca>
 800453a:	f045 0508 	orr.w	r5, r5, #8
 800453e:	e776      	b.n	800442e <_svfprintf_r+0x1a6>
 8004540:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004544:	e773      	b.n	800442e <_svfprintf_r+0x1a6>
 8004546:	bf00      	nop
	...
 8004550:	08008f84 	.word	0x08008f84
 8004554:	9905      	ldr	r1, [sp, #20]
 8004556:	7809      	ldrb	r1, [r1, #0]
 8004558:	296c      	cmp	r1, #108	; 0x6c
 800455a:	d105      	bne.n	8004568 <_svfprintf_r+0x2e0>
 800455c:	9905      	ldr	r1, [sp, #20]
 800455e:	3101      	adds	r1, #1
 8004560:	9105      	str	r1, [sp, #20]
 8004562:	f045 0520 	orr.w	r5, r5, #32
 8004566:	e762      	b.n	800442e <_svfprintf_r+0x1a6>
 8004568:	f045 0510 	orr.w	r5, r5, #16
 800456c:	e75f      	b.n	800442e <_svfprintf_r+0x1a6>
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	9304      	str	r3, [sp, #16]
 8004572:	2600      	movs	r6, #0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800457a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800457e:	f04f 0901 	mov.w	r9, #1
 8004582:	4637      	mov	r7, r6
 8004584:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004588:	e11b      	b.n	80047c2 <_svfprintf_r+0x53a>
 800458a:	b10b      	cbz	r3, 8004590 <_svfprintf_r+0x308>
 800458c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004590:	f045 0510 	orr.w	r5, r5, #16
 8004594:	e752      	b.n	800443c <_svfprintf_r+0x1b4>
 8004596:	f015 0f10 	tst.w	r5, #16
 800459a:	f107 0304 	add.w	r3, r7, #4
 800459e:	d003      	beq.n	80045a8 <_svfprintf_r+0x320>
 80045a0:	683e      	ldr	r6, [r7, #0]
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	17f7      	asrs	r7, r6, #31
 80045a6:	e754      	b.n	8004452 <_svfprintf_r+0x1ca>
 80045a8:	683e      	ldr	r6, [r7, #0]
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045b0:	bf18      	it	ne
 80045b2:	b236      	sxthne	r6, r6
 80045b4:	e7f6      	b.n	80045a4 <_svfprintf_r+0x31c>
 80045b6:	b10b      	cbz	r3, 80045bc <_svfprintf_r+0x334>
 80045b8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80045bc:	3707      	adds	r7, #7
 80045be:	f027 0707 	bic.w	r7, r7, #7
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	ed97 7b00 	vldr	d7, [r7]
 80045cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80045d0:	9b06      	ldr	r3, [sp, #24]
 80045d2:	9312      	str	r3, [sp, #72]	; 0x48
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045da:	9313      	str	r3, [sp, #76]	; 0x4c
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	4b4a      	ldr	r3, [pc, #296]	; (800470c <_svfprintf_r+0x484>)
 80045e2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80045e6:	f7fc faa5 	bl	8000b34 <__aeabi_dcmpun>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	f040 85d5 	bne.w	800519a <_svfprintf_r+0xf12>
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295
 80045f4:	4b45      	ldr	r3, [pc, #276]	; (800470c <_svfprintf_r+0x484>)
 80045f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80045fa:	f7fc fa7d 	bl	8000af8 <__aeabi_dcmple>
 80045fe:	2800      	cmp	r0, #0
 8004600:	f040 85cb 	bne.w	800519a <_svfprintf_r+0xf12>
 8004604:	2200      	movs	r2, #0
 8004606:	2300      	movs	r3, #0
 8004608:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800460c:	f7fc fa6a 	bl	8000ae4 <__aeabi_dcmplt>
 8004610:	b110      	cbz	r0, 8004618 <_svfprintf_r+0x390>
 8004612:	232d      	movs	r3, #45	; 0x2d
 8004614:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004618:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <_svfprintf_r+0x488>)
 800461a:	4a3e      	ldr	r2, [pc, #248]	; (8004714 <_svfprintf_r+0x48c>)
 800461c:	9902      	ldr	r1, [sp, #8]
 800461e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004622:	2947      	cmp	r1, #71	; 0x47
 8004624:	bfcc      	ite	gt
 8004626:	4690      	movgt	r8, r2
 8004628:	4698      	movle	r8, r3
 800462a:	f04f 0903 	mov.w	r9, #3
 800462e:	2600      	movs	r6, #0
 8004630:	4637      	mov	r7, r6
 8004632:	e0c6      	b.n	80047c2 <_svfprintf_r+0x53a>
 8004634:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004638:	d022      	beq.n	8004680 <_svfprintf_r+0x3f8>
 800463a:	9b02      	ldr	r3, [sp, #8]
 800463c:	f023 0320 	bic.w	r3, r3, #32
 8004640:	2b47      	cmp	r3, #71	; 0x47
 8004642:	d104      	bne.n	800464e <_svfprintf_r+0x3c6>
 8004644:	f1b9 0f00 	cmp.w	r9, #0
 8004648:	bf08      	it	eq
 800464a:	f04f 0901 	moveq.w	r9, #1
 800464e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004652:	930c      	str	r3, [sp, #48]	; 0x30
 8004654:	9b07      	ldr	r3, [sp, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da15      	bge.n	8004686 <_svfprintf_r+0x3fe>
 800465a:	9b06      	ldr	r3, [sp, #24]
 800465c:	930e      	str	r3, [sp, #56]	; 0x38
 800465e:	9b07      	ldr	r3, [sp, #28]
 8004660:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004664:	930f      	str	r3, [sp, #60]	; 0x3c
 8004666:	232d      	movs	r3, #45	; 0x2d
 8004668:	930b      	str	r3, [sp, #44]	; 0x2c
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	f023 0720 	bic.w	r7, r3, #32
 8004670:	2f46      	cmp	r7, #70	; 0x46
 8004672:	d00e      	beq.n	8004692 <_svfprintf_r+0x40a>
 8004674:	2f45      	cmp	r7, #69	; 0x45
 8004676:	d146      	bne.n	8004706 <_svfprintf_r+0x47e>
 8004678:	f109 0601 	add.w	r6, r9, #1
 800467c:	2102      	movs	r1, #2
 800467e:	e00a      	b.n	8004696 <_svfprintf_r+0x40e>
 8004680:	f04f 0906 	mov.w	r9, #6
 8004684:	e7e3      	b.n	800464e <_svfprintf_r+0x3c6>
 8004686:	ed9d 7b06 	vldr	d7, [sp, #24]
 800468a:	2300      	movs	r3, #0
 800468c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004690:	e7ea      	b.n	8004668 <_svfprintf_r+0x3e0>
 8004692:	464e      	mov	r6, r9
 8004694:	2103      	movs	r1, #3
 8004696:	ab1d      	add	r3, sp, #116	; 0x74
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	ab1a      	add	r3, sp, #104	; 0x68
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	4632      	mov	r2, r6
 80046a0:	ab19      	add	r3, sp, #100	; 0x64
 80046a2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80046a6:	4658      	mov	r0, fp
 80046a8:	f001 ff3a 	bl	8006520 <_dtoa_r>
 80046ac:	2f47      	cmp	r7, #71	; 0x47
 80046ae:	4680      	mov	r8, r0
 80046b0:	d102      	bne.n	80046b8 <_svfprintf_r+0x430>
 80046b2:	07e8      	lsls	r0, r5, #31
 80046b4:	f140 857e 	bpl.w	80051b4 <_svfprintf_r+0xf2c>
 80046b8:	eb08 0306 	add.w	r3, r8, r6
 80046bc:	2f46      	cmp	r7, #70	; 0x46
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	d111      	bne.n	80046e6 <_svfprintf_r+0x45e>
 80046c2:	f898 3000 	ldrb.w	r3, [r8]
 80046c6:	2b30      	cmp	r3, #48	; 0x30
 80046c8:	d109      	bne.n	80046de <_svfprintf_r+0x456>
 80046ca:	2200      	movs	r2, #0
 80046cc:	2300      	movs	r3, #0
 80046ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80046d2:	f7fc f9fd 	bl	8000ad0 <__aeabi_dcmpeq>
 80046d6:	b910      	cbnz	r0, 80046de <_svfprintf_r+0x456>
 80046d8:	f1c6 0601 	rsb	r6, r6, #1
 80046dc:	9619      	str	r6, [sp, #100]	; 0x64
 80046de:	9a03      	ldr	r2, [sp, #12]
 80046e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046e2:	441a      	add	r2, r3
 80046e4:	9203      	str	r2, [sp, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2300      	movs	r3, #0
 80046ea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80046ee:	f7fc f9ef 	bl	8000ad0 <__aeabi_dcmpeq>
 80046f2:	b988      	cbnz	r0, 8004718 <_svfprintf_r+0x490>
 80046f4:	2230      	movs	r2, #48	; 0x30
 80046f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046f8:	9903      	ldr	r1, [sp, #12]
 80046fa:	4299      	cmp	r1, r3
 80046fc:	d90e      	bls.n	800471c <_svfprintf_r+0x494>
 80046fe:	1c59      	adds	r1, r3, #1
 8004700:	911d      	str	r1, [sp, #116]	; 0x74
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e7f7      	b.n	80046f6 <_svfprintf_r+0x46e>
 8004706:	464e      	mov	r6, r9
 8004708:	e7b8      	b.n	800467c <_svfprintf_r+0x3f4>
 800470a:	bf00      	nop
 800470c:	7fefffff 	.word	0x7fefffff
 8004710:	08008f74 	.word	0x08008f74
 8004714:	08008f78 	.word	0x08008f78
 8004718:	9b03      	ldr	r3, [sp, #12]
 800471a:	931d      	str	r3, [sp, #116]	; 0x74
 800471c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800471e:	2f47      	cmp	r7, #71	; 0x47
 8004720:	eba3 0308 	sub.w	r3, r3, r8
 8004724:	9303      	str	r3, [sp, #12]
 8004726:	f040 80fa 	bne.w	800491e <_svfprintf_r+0x696>
 800472a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800472c:	1cd9      	adds	r1, r3, #3
 800472e:	db02      	blt.n	8004736 <_svfprintf_r+0x4ae>
 8004730:	4599      	cmp	r9, r3
 8004732:	f280 8120 	bge.w	8004976 <_svfprintf_r+0x6ee>
 8004736:	9b02      	ldr	r3, [sp, #8]
 8004738:	3b02      	subs	r3, #2
 800473a:	9302      	str	r3, [sp, #8]
 800473c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800473e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8004742:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8004746:	1e53      	subs	r3, r2, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	9319      	str	r3, [sp, #100]	; 0x64
 800474c:	bfb6      	itet	lt
 800474e:	f1c2 0301 	rsblt	r3, r2, #1
 8004752:	222b      	movge	r2, #43	; 0x2b
 8004754:	222d      	movlt	r2, #45	; 0x2d
 8004756:	2b09      	cmp	r3, #9
 8004758:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800475c:	f340 80fb 	ble.w	8004956 <_svfprintf_r+0x6ce>
 8004760:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004764:	260a      	movs	r6, #10
 8004766:	fb93 f0f6 	sdiv	r0, r3, r6
 800476a:	fb06 3310 	mls	r3, r6, r0, r3
 800476e:	3330      	adds	r3, #48	; 0x30
 8004770:	2809      	cmp	r0, #9
 8004772:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004776:	f102 31ff 	add.w	r1, r2, #4294967295
 800477a:	4603      	mov	r3, r0
 800477c:	f300 80e4 	bgt.w	8004948 <_svfprintf_r+0x6c0>
 8004780:	3330      	adds	r3, #48	; 0x30
 8004782:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004786:	3a02      	subs	r2, #2
 8004788:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800478c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004790:	4282      	cmp	r2, r0
 8004792:	4619      	mov	r1, r3
 8004794:	f0c0 80da 	bcc.w	800494c <_svfprintf_r+0x6c4>
 8004798:	9a03      	ldr	r2, [sp, #12]
 800479a:	ab1b      	add	r3, sp, #108	; 0x6c
 800479c:	1acb      	subs	r3, r1, r3
 800479e:	2a01      	cmp	r2, #1
 80047a0:	9310      	str	r3, [sp, #64]	; 0x40
 80047a2:	eb03 0902 	add.w	r9, r3, r2
 80047a6:	dc02      	bgt.n	80047ae <_svfprintf_r+0x526>
 80047a8:	f015 0701 	ands.w	r7, r5, #1
 80047ac:	d002      	beq.n	80047b4 <_svfprintf_r+0x52c>
 80047ae:	9b08      	ldr	r3, [sp, #32]
 80047b0:	2700      	movs	r7, #0
 80047b2:	4499      	add	r9, r3
 80047b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047b6:	b113      	cbz	r3, 80047be <_svfprintf_r+0x536>
 80047b8:	232d      	movs	r3, #45	; 0x2d
 80047ba:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80047be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047c0:	2600      	movs	r6, #0
 80047c2:	454e      	cmp	r6, r9
 80047c4:	4633      	mov	r3, r6
 80047c6:	bfb8      	it	lt
 80047c8:	464b      	movlt	r3, r9
 80047ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80047cc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80047d0:	b113      	cbz	r3, 80047d8 <_svfprintf_r+0x550>
 80047d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047d4:	3301      	adds	r3, #1
 80047d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80047d8:	f015 0302 	ands.w	r3, r5, #2
 80047dc:	9314      	str	r3, [sp, #80]	; 0x50
 80047de:	bf1e      	ittt	ne
 80047e0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80047e2:	3302      	addne	r3, #2
 80047e4:	930b      	strne	r3, [sp, #44]	; 0x2c
 80047e6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80047ea:	9315      	str	r3, [sp, #84]	; 0x54
 80047ec:	d118      	bne.n	8004820 <_svfprintf_r+0x598>
 80047ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	930c      	str	r3, [sp, #48]	; 0x30
 80047f8:	dd12      	ble.n	8004820 <_svfprintf_r+0x598>
 80047fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	4ba9      	ldr	r3, [pc, #676]	; (8004aa4 <_svfprintf_r+0x81c>)
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	f300 81d5 	bgt.w	8004bb0 <_svfprintf_r+0x928>
 8004806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800480c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800480e:	4413      	add	r3, r2
 8004810:	9321      	str	r3, [sp, #132]	; 0x84
 8004812:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004814:	3301      	adds	r3, #1
 8004816:	2b07      	cmp	r3, #7
 8004818:	9320      	str	r3, [sp, #128]	; 0x80
 800481a:	f300 81e2 	bgt.w	8004be2 <_svfprintf_r+0x95a>
 800481e:	3408      	adds	r4, #8
 8004820:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004824:	b173      	cbz	r3, 8004844 <_svfprintf_r+0x5bc>
 8004826:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	2301      	movs	r3, #1
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004832:	3301      	adds	r3, #1
 8004834:	9321      	str	r3, [sp, #132]	; 0x84
 8004836:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004838:	3301      	adds	r3, #1
 800483a:	2b07      	cmp	r3, #7
 800483c:	9320      	str	r3, [sp, #128]	; 0x80
 800483e:	f300 81da 	bgt.w	8004bf6 <_svfprintf_r+0x96e>
 8004842:	3408      	adds	r4, #8
 8004844:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004846:	b16b      	cbz	r3, 8004864 <_svfprintf_r+0x5dc>
 8004848:	ab18      	add	r3, sp, #96	; 0x60
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	2302      	movs	r3, #2
 800484e:	6063      	str	r3, [r4, #4]
 8004850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004852:	3302      	adds	r3, #2
 8004854:	9321      	str	r3, [sp, #132]	; 0x84
 8004856:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004858:	3301      	adds	r3, #1
 800485a:	2b07      	cmp	r3, #7
 800485c:	9320      	str	r3, [sp, #128]	; 0x80
 800485e:	f300 81d4 	bgt.w	8004c0a <_svfprintf_r+0x982>
 8004862:	3408      	adds	r4, #8
 8004864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d114      	bne.n	8004894 <_svfprintf_r+0x60c>
 800486a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800486c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	dd0f      	ble.n	8004894 <_svfprintf_r+0x60c>
 8004874:	4a8c      	ldr	r2, [pc, #560]	; (8004aa8 <_svfprintf_r+0x820>)
 8004876:	6022      	str	r2, [r4, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	f300 81d0 	bgt.w	8004c1e <_svfprintf_r+0x996>
 800487e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004880:	6063      	str	r3, [r4, #4]
 8004882:	4413      	add	r3, r2
 8004884:	9321      	str	r3, [sp, #132]	; 0x84
 8004886:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004888:	3301      	adds	r3, #1
 800488a:	2b07      	cmp	r3, #7
 800488c:	9320      	str	r3, [sp, #128]	; 0x80
 800488e:	f300 81df 	bgt.w	8004c50 <_svfprintf_r+0x9c8>
 8004892:	3408      	adds	r4, #8
 8004894:	eba6 0609 	sub.w	r6, r6, r9
 8004898:	2e00      	cmp	r6, #0
 800489a:	dd0f      	ble.n	80048bc <_svfprintf_r+0x634>
 800489c:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <_svfprintf_r+0x820>)
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	2e10      	cmp	r6, #16
 80048a2:	f300 81df 	bgt.w	8004c64 <_svfprintf_r+0x9dc>
 80048a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048a8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80048aa:	6066      	str	r6, [r4, #4]
 80048ac:	3301      	adds	r3, #1
 80048ae:	4406      	add	r6, r0
 80048b0:	2b07      	cmp	r3, #7
 80048b2:	9621      	str	r6, [sp, #132]	; 0x84
 80048b4:	9320      	str	r3, [sp, #128]	; 0x80
 80048b6:	f300 81ec 	bgt.w	8004c92 <_svfprintf_r+0xa0a>
 80048ba:	3408      	adds	r4, #8
 80048bc:	05eb      	lsls	r3, r5, #23
 80048be:	f100 81f2 	bmi.w	8004ca6 <_svfprintf_r+0xa1e>
 80048c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048c4:	e884 0300 	stmia.w	r4, {r8, r9}
 80048c8:	444b      	add	r3, r9
 80048ca:	9321      	str	r3, [sp, #132]	; 0x84
 80048cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048ce:	3301      	adds	r3, #1
 80048d0:	2b07      	cmp	r3, #7
 80048d2:	9320      	str	r3, [sp, #128]	; 0x80
 80048d4:	f340 8419 	ble.w	800510a <_svfprintf_r+0xe82>
 80048d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80048da:	4651      	mov	r1, sl
 80048dc:	4658      	mov	r0, fp
 80048de:	f003 ff7a 	bl	80087d6 <__ssprint_r>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	f040 8431 	bne.w	800514a <_svfprintf_r+0xec2>
 80048e8:	ac2c      	add	r4, sp, #176	; 0xb0
 80048ea:	076b      	lsls	r3, r5, #29
 80048ec:	f100 8410 	bmi.w	8005110 <_svfprintf_r+0xe88>
 80048f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048f6:	428a      	cmp	r2, r1
 80048f8:	bfac      	ite	ge
 80048fa:	189b      	addge	r3, r3, r2
 80048fc:	185b      	addlt	r3, r3, r1
 80048fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004902:	b13b      	cbz	r3, 8004914 <_svfprintf_r+0x68c>
 8004904:	aa1f      	add	r2, sp, #124	; 0x7c
 8004906:	4651      	mov	r1, sl
 8004908:	4658      	mov	r0, fp
 800490a:	f003 ff64 	bl	80087d6 <__ssprint_r>
 800490e:	2800      	cmp	r0, #0
 8004910:	f040 841b 	bne.w	800514a <_svfprintf_r+0xec2>
 8004914:	2300      	movs	r3, #0
 8004916:	9320      	str	r3, [sp, #128]	; 0x80
 8004918:	9f04      	ldr	r7, [sp, #16]
 800491a:	ac2c      	add	r4, sp, #176	; 0xb0
 800491c:	e4ee      	b.n	80042fc <_svfprintf_r+0x74>
 800491e:	9b02      	ldr	r3, [sp, #8]
 8004920:	2b65      	cmp	r3, #101	; 0x65
 8004922:	f77f af0b 	ble.w	800473c <_svfprintf_r+0x4b4>
 8004926:	9b02      	ldr	r3, [sp, #8]
 8004928:	2b66      	cmp	r3, #102	; 0x66
 800492a:	d124      	bne.n	8004976 <_svfprintf_r+0x6ee>
 800492c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800492e:	2b00      	cmp	r3, #0
 8004930:	dd19      	ble.n	8004966 <_svfprintf_r+0x6de>
 8004932:	f1b9 0f00 	cmp.w	r9, #0
 8004936:	d101      	bne.n	800493c <_svfprintf_r+0x6b4>
 8004938:	07ea      	lsls	r2, r5, #31
 800493a:	d502      	bpl.n	8004942 <_svfprintf_r+0x6ba>
 800493c:	9a08      	ldr	r2, [sp, #32]
 800493e:	4413      	add	r3, r2
 8004940:	444b      	add	r3, r9
 8004942:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004944:	4699      	mov	r9, r3
 8004946:	e735      	b.n	80047b4 <_svfprintf_r+0x52c>
 8004948:	460a      	mov	r2, r1
 800494a:	e70c      	b.n	8004766 <_svfprintf_r+0x4de>
 800494c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004950:	f803 1b01 	strb.w	r1, [r3], #1
 8004954:	e71c      	b.n	8004790 <_svfprintf_r+0x508>
 8004956:	2230      	movs	r2, #48	; 0x30
 8004958:	4413      	add	r3, r2
 800495a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800495e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004962:	a91c      	add	r1, sp, #112	; 0x70
 8004964:	e718      	b.n	8004798 <_svfprintf_r+0x510>
 8004966:	f1b9 0f00 	cmp.w	r9, #0
 800496a:	d101      	bne.n	8004970 <_svfprintf_r+0x6e8>
 800496c:	07eb      	lsls	r3, r5, #31
 800496e:	d515      	bpl.n	800499c <_svfprintf_r+0x714>
 8004970:	9b08      	ldr	r3, [sp, #32]
 8004972:	3301      	adds	r3, #1
 8004974:	e7e4      	b.n	8004940 <_svfprintf_r+0x6b8>
 8004976:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	429a      	cmp	r2, r3
 800497c:	db06      	blt.n	800498c <_svfprintf_r+0x704>
 800497e:	07ef      	lsls	r7, r5, #31
 8004980:	d50e      	bpl.n	80049a0 <_svfprintf_r+0x718>
 8004982:	9b08      	ldr	r3, [sp, #32]
 8004984:	4413      	add	r3, r2
 8004986:	2267      	movs	r2, #103	; 0x67
 8004988:	9202      	str	r2, [sp, #8]
 800498a:	e7da      	b.n	8004942 <_svfprintf_r+0x6ba>
 800498c:	9b03      	ldr	r3, [sp, #12]
 800498e:	9908      	ldr	r1, [sp, #32]
 8004990:	2a00      	cmp	r2, #0
 8004992:	440b      	add	r3, r1
 8004994:	dcf7      	bgt.n	8004986 <_svfprintf_r+0x6fe>
 8004996:	f1c2 0201 	rsb	r2, r2, #1
 800499a:	e7f3      	b.n	8004984 <_svfprintf_r+0x6fc>
 800499c:	2301      	movs	r3, #1
 800499e:	e7d0      	b.n	8004942 <_svfprintf_r+0x6ba>
 80049a0:	4613      	mov	r3, r2
 80049a2:	e7f0      	b.n	8004986 <_svfprintf_r+0x6fe>
 80049a4:	b10b      	cbz	r3, 80049aa <_svfprintf_r+0x722>
 80049a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80049aa:	f015 0f20 	tst.w	r5, #32
 80049ae:	f107 0304 	add.w	r3, r7, #4
 80049b2:	d008      	beq.n	80049c6 <_svfprintf_r+0x73e>
 80049b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	17ce      	asrs	r6, r1, #31
 80049ba:	4608      	mov	r0, r1
 80049bc:	4631      	mov	r1, r6
 80049be:	e9c2 0100 	strd	r0, r1, [r2]
 80049c2:	461f      	mov	r7, r3
 80049c4:	e49a      	b.n	80042fc <_svfprintf_r+0x74>
 80049c6:	06ee      	lsls	r6, r5, #27
 80049c8:	d503      	bpl.n	80049d2 <_svfprintf_r+0x74a>
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ce:	6011      	str	r1, [r2, #0]
 80049d0:	e7f7      	b.n	80049c2 <_svfprintf_r+0x73a>
 80049d2:	0668      	lsls	r0, r5, #25
 80049d4:	d5f9      	bpl.n	80049ca <_svfprintf_r+0x742>
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80049dc:	8011      	strh	r1, [r2, #0]
 80049de:	e7f0      	b.n	80049c2 <_svfprintf_r+0x73a>
 80049e0:	f045 0510 	orr.w	r5, r5, #16
 80049e4:	f015 0320 	ands.w	r3, r5, #32
 80049e8:	d022      	beq.n	8004a30 <_svfprintf_r+0x7a8>
 80049ea:	3707      	adds	r7, #7
 80049ec:	f027 0707 	bic.w	r7, r7, #7
 80049f0:	f107 0308 	add.w	r3, r7, #8
 80049f4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80049f8:	9304      	str	r3, [sp, #16]
 80049fa:	2300      	movs	r3, #0
 80049fc:	2200      	movs	r2, #0
 80049fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004a02:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004a06:	f000 83db 	beq.w	80051c0 <_svfprintf_r+0xf38>
 8004a0a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8004a0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a10:	ea56 0207 	orrs.w	r2, r6, r7
 8004a14:	f040 83d9 	bne.w	80051ca <_svfprintf_r+0xf42>
 8004a18:	f1b9 0f00 	cmp.w	r9, #0
 8004a1c:	f000 80aa 	beq.w	8004b74 <_svfprintf_r+0x8ec>
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d076      	beq.n	8004b12 <_svfprintf_r+0x88a>
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f000 8091 	beq.w	8004b4c <_svfprintf_r+0x8c4>
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	2700      	movs	r7, #0
 8004a2e:	e3d2      	b.n	80051d6 <_svfprintf_r+0xf4e>
 8004a30:	1d3a      	adds	r2, r7, #4
 8004a32:	f015 0110 	ands.w	r1, r5, #16
 8004a36:	9204      	str	r2, [sp, #16]
 8004a38:	d002      	beq.n	8004a40 <_svfprintf_r+0x7b8>
 8004a3a:	683e      	ldr	r6, [r7, #0]
 8004a3c:	2700      	movs	r7, #0
 8004a3e:	e7dd      	b.n	80049fc <_svfprintf_r+0x774>
 8004a40:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8004a44:	d0f9      	beq.n	8004a3a <_svfprintf_r+0x7b2>
 8004a46:	883e      	ldrh	r6, [r7, #0]
 8004a48:	2700      	movs	r7, #0
 8004a4a:	e7d6      	b.n	80049fa <_svfprintf_r+0x772>
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	2330      	movs	r3, #48	; 0x30
 8004a52:	2278      	movs	r2, #120	; 0x78
 8004a54:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004a58:	4b14      	ldr	r3, [pc, #80]	; (8004aac <_svfprintf_r+0x824>)
 8004a5a:	683e      	ldr	r6, [r7, #0]
 8004a5c:	9311      	str	r3, [sp, #68]	; 0x44
 8004a5e:	2700      	movs	r7, #0
 8004a60:	f045 0502 	orr.w	r5, r5, #2
 8004a64:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004a68:	2302      	movs	r3, #2
 8004a6a:	9202      	str	r2, [sp, #8]
 8004a6c:	e7c6      	b.n	80049fc <_svfprintf_r+0x774>
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	2600      	movs	r6, #0
 8004a72:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004a76:	9304      	str	r3, [sp, #16]
 8004a78:	f8d7 8000 	ldr.w	r8, [r7]
 8004a7c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004a80:	d00a      	beq.n	8004a98 <_svfprintf_r+0x810>
 8004a82:	464a      	mov	r2, r9
 8004a84:	4631      	mov	r1, r6
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7fb fbb2 	bl	80001f0 <memchr>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	f000 808d 	beq.w	8004bac <_svfprintf_r+0x924>
 8004a92:	eba0 0908 	sub.w	r9, r0, r8
 8004a96:	e5cb      	b.n	8004630 <_svfprintf_r+0x3a8>
 8004a98:	4640      	mov	r0, r8
 8004a9a:	f7fb fba1 	bl	80001e0 <strlen>
 8004a9e:	4681      	mov	r9, r0
 8004aa0:	e5c6      	b.n	8004630 <_svfprintf_r+0x3a8>
 8004aa2:	bf00      	nop
 8004aa4:	08008fa8 	.word	0x08008fa8
 8004aa8:	08008fb8 	.word	0x08008fb8
 8004aac:	08008f95 	.word	0x08008f95
 8004ab0:	f045 0510 	orr.w	r5, r5, #16
 8004ab4:	06a9      	lsls	r1, r5, #26
 8004ab6:	d509      	bpl.n	8004acc <_svfprintf_r+0x844>
 8004ab8:	3707      	adds	r7, #7
 8004aba:	f027 0707 	bic.w	r7, r7, #7
 8004abe:	f107 0308 	add.w	r3, r7, #8
 8004ac2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e797      	b.n	80049fc <_svfprintf_r+0x774>
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	f015 0f10 	tst.w	r5, #16
 8004ad2:	9304      	str	r3, [sp, #16]
 8004ad4:	d001      	beq.n	8004ada <_svfprintf_r+0x852>
 8004ad6:	683e      	ldr	r6, [r7, #0]
 8004ad8:	e002      	b.n	8004ae0 <_svfprintf_r+0x858>
 8004ada:	066a      	lsls	r2, r5, #25
 8004adc:	d5fb      	bpl.n	8004ad6 <_svfprintf_r+0x84e>
 8004ade:	883e      	ldrh	r6, [r7, #0]
 8004ae0:	2700      	movs	r7, #0
 8004ae2:	e7f1      	b.n	8004ac8 <_svfprintf_r+0x840>
 8004ae4:	b10b      	cbz	r3, 8004aea <_svfprintf_r+0x862>
 8004ae6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004aea:	4ba3      	ldr	r3, [pc, #652]	; (8004d78 <_svfprintf_r+0xaf0>)
 8004aec:	e4c2      	b.n	8004474 <_svfprintf_r+0x1ec>
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	f015 0f10 	tst.w	r5, #16
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	d001      	beq.n	8004afc <_svfprintf_r+0x874>
 8004af8:	683e      	ldr	r6, [r7, #0]
 8004afa:	e002      	b.n	8004b02 <_svfprintf_r+0x87a>
 8004afc:	066e      	lsls	r6, r5, #25
 8004afe:	d5fb      	bpl.n	8004af8 <_svfprintf_r+0x870>
 8004b00:	883e      	ldrh	r6, [r7, #0]
 8004b02:	2700      	movs	r7, #0
 8004b04:	e4c2      	b.n	800448c <_svfprintf_r+0x204>
 8004b06:	4643      	mov	r3, r8
 8004b08:	e366      	b.n	80051d8 <_svfprintf_r+0xf50>
 8004b0a:	2f00      	cmp	r7, #0
 8004b0c:	bf08      	it	eq
 8004b0e:	2e0a      	cmpeq	r6, #10
 8004b10:	d205      	bcs.n	8004b1e <_svfprintf_r+0x896>
 8004b12:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004b16:	3630      	adds	r6, #48	; 0x30
 8004b18:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004b1c:	e377      	b.n	800520e <_svfprintf_r+0xf86>
 8004b1e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004b22:	4630      	mov	r0, r6
 8004b24:	4639      	mov	r1, r7
 8004b26:	220a      	movs	r2, #10
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f7fc f841 	bl	8000bb0 <__aeabi_uldivmod>
 8004b2e:	3230      	adds	r2, #48	; 0x30
 8004b30:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8004b34:	2300      	movs	r3, #0
 8004b36:	4630      	mov	r0, r6
 8004b38:	4639      	mov	r1, r7
 8004b3a:	220a      	movs	r2, #10
 8004b3c:	f7fc f838 	bl	8000bb0 <__aeabi_uldivmod>
 8004b40:	4606      	mov	r6, r0
 8004b42:	460f      	mov	r7, r1
 8004b44:	ea56 0307 	orrs.w	r3, r6, r7
 8004b48:	d1eb      	bne.n	8004b22 <_svfprintf_r+0x89a>
 8004b4a:	e360      	b.n	800520e <_svfprintf_r+0xf86>
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	2700      	movs	r7, #0
 8004b50:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004b54:	f006 030f 	and.w	r3, r6, #15
 8004b58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004b60:	0933      	lsrs	r3, r6, #4
 8004b62:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004b66:	093a      	lsrs	r2, r7, #4
 8004b68:	461e      	mov	r6, r3
 8004b6a:	4617      	mov	r7, r2
 8004b6c:	ea56 0307 	orrs.w	r3, r6, r7
 8004b70:	d1f0      	bne.n	8004b54 <_svfprintf_r+0x8cc>
 8004b72:	e34c      	b.n	800520e <_svfprintf_r+0xf86>
 8004b74:	b93b      	cbnz	r3, 8004b86 <_svfprintf_r+0x8fe>
 8004b76:	07ea      	lsls	r2, r5, #31
 8004b78:	d505      	bpl.n	8004b86 <_svfprintf_r+0x8fe>
 8004b7a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004b7e:	2330      	movs	r3, #48	; 0x30
 8004b80:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8004b84:	e343      	b.n	800520e <_svfprintf_r+0xf86>
 8004b86:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004b8a:	e340      	b.n	800520e <_svfprintf_r+0xf86>
 8004b8c:	b10b      	cbz	r3, 8004b92 <_svfprintf_r+0x90a>
 8004b8e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004b92:	9b02      	ldr	r3, [sp, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 82f7 	beq.w	8005188 <_svfprintf_r+0xf00>
 8004b9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004b9e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004ba8:	9704      	str	r7, [sp, #16]
 8004baa:	e4e8      	b.n	800457e <_svfprintf_r+0x2f6>
 8004bac:	4606      	mov	r6, r0
 8004bae:	e53f      	b.n	8004630 <_svfprintf_r+0x3a8>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	6063      	str	r3, [r4, #4]
 8004bb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bb6:	3310      	adds	r3, #16
 8004bb8:	9321      	str	r3, [sp, #132]	; 0x84
 8004bba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	9320      	str	r3, [sp, #128]	; 0x80
 8004bc2:	dc04      	bgt.n	8004bce <_svfprintf_r+0x946>
 8004bc4:	3408      	adds	r4, #8
 8004bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bc8:	3b10      	subs	r3, #16
 8004bca:	930c      	str	r3, [sp, #48]	; 0x30
 8004bcc:	e615      	b.n	80047fa <_svfprintf_r+0x572>
 8004bce:	aa1f      	add	r2, sp, #124	; 0x7c
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	4658      	mov	r0, fp
 8004bd4:	f003 fdff 	bl	80087d6 <__ssprint_r>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	f040 82b6 	bne.w	800514a <_svfprintf_r+0xec2>
 8004bde:	ac2c      	add	r4, sp, #176	; 0xb0
 8004be0:	e7f1      	b.n	8004bc6 <_svfprintf_r+0x93e>
 8004be2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004be4:	4651      	mov	r1, sl
 8004be6:	4658      	mov	r0, fp
 8004be8:	f003 fdf5 	bl	80087d6 <__ssprint_r>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	f040 82ac 	bne.w	800514a <_svfprintf_r+0xec2>
 8004bf2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004bf4:	e614      	b.n	8004820 <_svfprintf_r+0x598>
 8004bf6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	4658      	mov	r0, fp
 8004bfc:	f003 fdeb 	bl	80087d6 <__ssprint_r>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f040 82a2 	bne.w	800514a <_svfprintf_r+0xec2>
 8004c06:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c08:	e61c      	b.n	8004844 <_svfprintf_r+0x5bc>
 8004c0a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	4658      	mov	r0, fp
 8004c10:	f003 fde1 	bl	80087d6 <__ssprint_r>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f040 8298 	bne.w	800514a <_svfprintf_r+0xec2>
 8004c1a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c1c:	e622      	b.n	8004864 <_svfprintf_r+0x5dc>
 8004c1e:	2210      	movs	r2, #16
 8004c20:	6062      	str	r2, [r4, #4]
 8004c22:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c24:	3210      	adds	r2, #16
 8004c26:	9221      	str	r2, [sp, #132]	; 0x84
 8004c28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c2a:	3201      	adds	r2, #1
 8004c2c:	2a07      	cmp	r2, #7
 8004c2e:	9220      	str	r2, [sp, #128]	; 0x80
 8004c30:	dc02      	bgt.n	8004c38 <_svfprintf_r+0x9b0>
 8004c32:	3408      	adds	r4, #8
 8004c34:	3b10      	subs	r3, #16
 8004c36:	e61d      	b.n	8004874 <_svfprintf_r+0x5ec>
 8004c38:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	4658      	mov	r0, fp
 8004c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8004c40:	f003 fdc9 	bl	80087d6 <__ssprint_r>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f040 8280 	bne.w	800514a <_svfprintf_r+0xec2>
 8004c4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c4e:	e7f1      	b.n	8004c34 <_svfprintf_r+0x9ac>
 8004c50:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c52:	4651      	mov	r1, sl
 8004c54:	4658      	mov	r0, fp
 8004c56:	f003 fdbe 	bl	80087d6 <__ssprint_r>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f040 8275 	bne.w	800514a <_svfprintf_r+0xec2>
 8004c60:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c62:	e617      	b.n	8004894 <_svfprintf_r+0x60c>
 8004c64:	2310      	movs	r3, #16
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c6a:	3310      	adds	r3, #16
 8004c6c:	9321      	str	r3, [sp, #132]	; 0x84
 8004c6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c70:	3301      	adds	r3, #1
 8004c72:	2b07      	cmp	r3, #7
 8004c74:	9320      	str	r3, [sp, #128]	; 0x80
 8004c76:	dc02      	bgt.n	8004c7e <_svfprintf_r+0x9f6>
 8004c78:	3408      	adds	r4, #8
 8004c7a:	3e10      	subs	r6, #16
 8004c7c:	e60e      	b.n	800489c <_svfprintf_r+0x614>
 8004c7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c80:	4651      	mov	r1, sl
 8004c82:	4658      	mov	r0, fp
 8004c84:	f003 fda7 	bl	80087d6 <__ssprint_r>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f040 825e 	bne.w	800514a <_svfprintf_r+0xec2>
 8004c8e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c90:	e7f3      	b.n	8004c7a <_svfprintf_r+0x9f2>
 8004c92:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c94:	4651      	mov	r1, sl
 8004c96:	4658      	mov	r0, fp
 8004c98:	f003 fd9d 	bl	80087d6 <__ssprint_r>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f040 8254 	bne.w	800514a <_svfprintf_r+0xec2>
 8004ca2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ca4:	e60a      	b.n	80048bc <_svfprintf_r+0x634>
 8004ca6:	9b02      	ldr	r3, [sp, #8]
 8004ca8:	2b65      	cmp	r3, #101	; 0x65
 8004caa:	f340 81a9 	ble.w	8005000 <_svfprintf_r+0xd78>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb6:	f7fb ff0b 	bl	8000ad0 <__aeabi_dcmpeq>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d062      	beq.n	8004d84 <_svfprintf_r+0xafc>
 8004cbe:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <_svfprintf_r+0xaf4>)
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cc8:	3301      	adds	r3, #1
 8004cca:	9321      	str	r3, [sp, #132]	; 0x84
 8004ccc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cce:	3301      	adds	r3, #1
 8004cd0:	2b07      	cmp	r3, #7
 8004cd2:	9320      	str	r3, [sp, #128]	; 0x80
 8004cd4:	dc25      	bgt.n	8004d22 <_svfprintf_r+0xa9a>
 8004cd6:	3408      	adds	r4, #8
 8004cd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cda:	9a03      	ldr	r2, [sp, #12]
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	db02      	blt.n	8004ce6 <_svfprintf_r+0xa5e>
 8004ce0:	07ee      	lsls	r6, r5, #31
 8004ce2:	f57f ae02 	bpl.w	80048ea <_svfprintf_r+0x662>
 8004ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	9b08      	ldr	r3, [sp, #32]
 8004cec:	6063      	str	r3, [r4, #4]
 8004cee:	9a08      	ldr	r2, [sp, #32]
 8004cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cf2:	4413      	add	r3, r2
 8004cf4:	9321      	str	r3, [sp, #132]	; 0x84
 8004cf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	2b07      	cmp	r3, #7
 8004cfc:	9320      	str	r3, [sp, #128]	; 0x80
 8004cfe:	dc1a      	bgt.n	8004d36 <_svfprintf_r+0xaae>
 8004d00:	3408      	adds	r4, #8
 8004d02:	9b03      	ldr	r3, [sp, #12]
 8004d04:	1e5e      	subs	r6, r3, #1
 8004d06:	2e00      	cmp	r6, #0
 8004d08:	f77f adef 	ble.w	80048ea <_svfprintf_r+0x662>
 8004d0c:	4f1c      	ldr	r7, [pc, #112]	; (8004d80 <_svfprintf_r+0xaf8>)
 8004d0e:	f04f 0810 	mov.w	r8, #16
 8004d12:	2e10      	cmp	r6, #16
 8004d14:	6027      	str	r7, [r4, #0]
 8004d16:	dc18      	bgt.n	8004d4a <_svfprintf_r+0xac2>
 8004d18:	6066      	str	r6, [r4, #4]
 8004d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d1c:	441e      	add	r6, r3
 8004d1e:	9621      	str	r6, [sp, #132]	; 0x84
 8004d20:	e5d4      	b.n	80048cc <_svfprintf_r+0x644>
 8004d22:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d24:	4651      	mov	r1, sl
 8004d26:	4658      	mov	r0, fp
 8004d28:	f003 fd55 	bl	80087d6 <__ssprint_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 820c 	bne.w	800514a <_svfprintf_r+0xec2>
 8004d32:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d34:	e7d0      	b.n	8004cd8 <_svfprintf_r+0xa50>
 8004d36:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d38:	4651      	mov	r1, sl
 8004d3a:	4658      	mov	r0, fp
 8004d3c:	f003 fd4b 	bl	80087d6 <__ssprint_r>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	f040 8202 	bne.w	800514a <_svfprintf_r+0xec2>
 8004d46:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d48:	e7db      	b.n	8004d02 <_svfprintf_r+0xa7a>
 8004d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d4c:	f8c4 8004 	str.w	r8, [r4, #4]
 8004d50:	3310      	adds	r3, #16
 8004d52:	9321      	str	r3, [sp, #132]	; 0x84
 8004d54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d56:	3301      	adds	r3, #1
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	9320      	str	r3, [sp, #128]	; 0x80
 8004d5c:	dc02      	bgt.n	8004d64 <_svfprintf_r+0xadc>
 8004d5e:	3408      	adds	r4, #8
 8004d60:	3e10      	subs	r6, #16
 8004d62:	e7d6      	b.n	8004d12 <_svfprintf_r+0xa8a>
 8004d64:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d66:	4651      	mov	r1, sl
 8004d68:	4658      	mov	r0, fp
 8004d6a:	f003 fd34 	bl	80087d6 <__ssprint_r>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f040 81eb 	bne.w	800514a <_svfprintf_r+0xec2>
 8004d74:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d76:	e7f3      	b.n	8004d60 <_svfprintf_r+0xad8>
 8004d78:	08008f95 	.word	0x08008f95
 8004d7c:	08008fa6 	.word	0x08008fa6
 8004d80:	08008fb8 	.word	0x08008fb8
 8004d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	dc7a      	bgt.n	8004e80 <_svfprintf_r+0xbf8>
 8004d8a:	4b9b      	ldr	r3, [pc, #620]	; (8004ff8 <_svfprintf_r+0xd70>)
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	6063      	str	r3, [r4, #4]
 8004d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d94:	3301      	adds	r3, #1
 8004d96:	9321      	str	r3, [sp, #132]	; 0x84
 8004d98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	2b07      	cmp	r3, #7
 8004d9e:	9320      	str	r3, [sp, #128]	; 0x80
 8004da0:	dc44      	bgt.n	8004e2c <_svfprintf_r+0xba4>
 8004da2:	3408      	adds	r4, #8
 8004da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004da6:	b923      	cbnz	r3, 8004db2 <_svfprintf_r+0xb2a>
 8004da8:	9b03      	ldr	r3, [sp, #12]
 8004daa:	b913      	cbnz	r3, 8004db2 <_svfprintf_r+0xb2a>
 8004dac:	07e8      	lsls	r0, r5, #31
 8004dae:	f57f ad9c 	bpl.w	80048ea <_svfprintf_r+0x662>
 8004db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	9b08      	ldr	r3, [sp, #32]
 8004db8:	6063      	str	r3, [r4, #4]
 8004dba:	9a08      	ldr	r2, [sp, #32]
 8004dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dbe:	4413      	add	r3, r2
 8004dc0:	9321      	str	r3, [sp, #132]	; 0x84
 8004dc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	2b07      	cmp	r3, #7
 8004dc8:	9320      	str	r3, [sp, #128]	; 0x80
 8004dca:	dc39      	bgt.n	8004e40 <_svfprintf_r+0xbb8>
 8004dcc:	f104 0308 	add.w	r3, r4, #8
 8004dd0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	da19      	bge.n	8004e0a <_svfprintf_r+0xb82>
 8004dd6:	4f89      	ldr	r7, [pc, #548]	; (8004ffc <_svfprintf_r+0xd74>)
 8004dd8:	4276      	negs	r6, r6
 8004dda:	2410      	movs	r4, #16
 8004ddc:	2e10      	cmp	r6, #16
 8004dde:	601f      	str	r7, [r3, #0]
 8004de0:	dc38      	bgt.n	8004e54 <_svfprintf_r+0xbcc>
 8004de2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004de4:	605e      	str	r6, [r3, #4]
 8004de6:	4416      	add	r6, r2
 8004de8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dea:	9621      	str	r6, [sp, #132]	; 0x84
 8004dec:	3201      	adds	r2, #1
 8004dee:	2a07      	cmp	r2, #7
 8004df0:	f103 0308 	add.w	r3, r3, #8
 8004df4:	9220      	str	r2, [sp, #128]	; 0x80
 8004df6:	dd08      	ble.n	8004e0a <_svfprintf_r+0xb82>
 8004df8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	4658      	mov	r0, fp
 8004dfe:	f003 fcea 	bl	80087d6 <__ssprint_r>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	f040 81a1 	bne.w	800514a <_svfprintf_r+0xec2>
 8004e08:	ab2c      	add	r3, sp, #176	; 0xb0
 8004e0a:	9a03      	ldr	r2, [sp, #12]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	9903      	ldr	r1, [sp, #12]
 8004e10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e12:	f8c3 8000 	str.w	r8, [r3]
 8004e16:	440a      	add	r2, r1
 8004e18:	9221      	str	r2, [sp, #132]	; 0x84
 8004e1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e1c:	3201      	adds	r2, #1
 8004e1e:	2a07      	cmp	r2, #7
 8004e20:	9220      	str	r2, [sp, #128]	; 0x80
 8004e22:	f73f ad59 	bgt.w	80048d8 <_svfprintf_r+0x650>
 8004e26:	f103 0408 	add.w	r4, r3, #8
 8004e2a:	e55e      	b.n	80048ea <_svfprintf_r+0x662>
 8004e2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e2e:	4651      	mov	r1, sl
 8004e30:	4658      	mov	r0, fp
 8004e32:	f003 fcd0 	bl	80087d6 <__ssprint_r>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f040 8187 	bne.w	800514a <_svfprintf_r+0xec2>
 8004e3c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e3e:	e7b1      	b.n	8004da4 <_svfprintf_r+0xb1c>
 8004e40:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e42:	4651      	mov	r1, sl
 8004e44:	4658      	mov	r0, fp
 8004e46:	f003 fcc6 	bl	80087d6 <__ssprint_r>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	f040 817d 	bne.w	800514a <_svfprintf_r+0xec2>
 8004e50:	ab2c      	add	r3, sp, #176	; 0xb0
 8004e52:	e7bd      	b.n	8004dd0 <_svfprintf_r+0xb48>
 8004e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e56:	605c      	str	r4, [r3, #4]
 8004e58:	3210      	adds	r2, #16
 8004e5a:	9221      	str	r2, [sp, #132]	; 0x84
 8004e5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e5e:	3201      	adds	r2, #1
 8004e60:	2a07      	cmp	r2, #7
 8004e62:	9220      	str	r2, [sp, #128]	; 0x80
 8004e64:	dc02      	bgt.n	8004e6c <_svfprintf_r+0xbe4>
 8004e66:	3308      	adds	r3, #8
 8004e68:	3e10      	subs	r6, #16
 8004e6a:	e7b7      	b.n	8004ddc <_svfprintf_r+0xb54>
 8004e6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e6e:	4651      	mov	r1, sl
 8004e70:	4658      	mov	r0, fp
 8004e72:	f003 fcb0 	bl	80087d6 <__ssprint_r>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	f040 8167 	bne.w	800514a <_svfprintf_r+0xec2>
 8004e7c:	ab2c      	add	r3, sp, #176	; 0xb0
 8004e7e:	e7f3      	b.n	8004e68 <_svfprintf_r+0xbe0>
 8004e80:	9b03      	ldr	r3, [sp, #12]
 8004e82:	42bb      	cmp	r3, r7
 8004e84:	bfa8      	it	ge
 8004e86:	463b      	movge	r3, r7
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	461e      	mov	r6, r3
 8004e8c:	dd0b      	ble.n	8004ea6 <_svfprintf_r+0xc1e>
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e92:	f8c4 8000 	str.w	r8, [r4]
 8004e96:	4433      	add	r3, r6
 8004e98:	9321      	str	r3, [sp, #132]	; 0x84
 8004e9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	2b07      	cmp	r3, #7
 8004ea0:	9320      	str	r3, [sp, #128]	; 0x80
 8004ea2:	dc5f      	bgt.n	8004f64 <_svfprintf_r+0xcdc>
 8004ea4:	3408      	adds	r4, #8
 8004ea6:	2e00      	cmp	r6, #0
 8004ea8:	bfac      	ite	ge
 8004eaa:	1bbe      	subge	r6, r7, r6
 8004eac:	463e      	movlt	r6, r7
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	dd0f      	ble.n	8004ed2 <_svfprintf_r+0xc4a>
 8004eb2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004ffc <_svfprintf_r+0xd74>
 8004eb6:	f8c4 9000 	str.w	r9, [r4]
 8004eba:	2e10      	cmp	r6, #16
 8004ebc:	dc5c      	bgt.n	8004f78 <_svfprintf_r+0xcf0>
 8004ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ec0:	6066      	str	r6, [r4, #4]
 8004ec2:	441e      	add	r6, r3
 8004ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ec6:	9621      	str	r6, [sp, #132]	; 0x84
 8004ec8:	3301      	adds	r3, #1
 8004eca:	2b07      	cmp	r3, #7
 8004ecc:	9320      	str	r3, [sp, #128]	; 0x80
 8004ece:	dc6a      	bgt.n	8004fa6 <_svfprintf_r+0xd1e>
 8004ed0:	3408      	adds	r4, #8
 8004ed2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ed4:	9a03      	ldr	r2, [sp, #12]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	db01      	blt.n	8004ede <_svfprintf_r+0xc56>
 8004eda:	07e9      	lsls	r1, r5, #31
 8004edc:	d50d      	bpl.n	8004efa <_svfprintf_r+0xc72>
 8004ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	9b08      	ldr	r3, [sp, #32]
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	9a08      	ldr	r2, [sp, #32]
 8004ee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eea:	4413      	add	r3, r2
 8004eec:	9321      	str	r3, [sp, #132]	; 0x84
 8004eee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	2b07      	cmp	r3, #7
 8004ef4:	9320      	str	r3, [sp, #128]	; 0x80
 8004ef6:	dc60      	bgt.n	8004fba <_svfprintf_r+0xd32>
 8004ef8:	3408      	adds	r4, #8
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	9a03      	ldr	r2, [sp, #12]
 8004efe:	1bde      	subs	r6, r3, r7
 8004f00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	429e      	cmp	r6, r3
 8004f06:	bfa8      	it	ge
 8004f08:	461e      	movge	r6, r3
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	dd0b      	ble.n	8004f26 <_svfprintf_r+0xc9e>
 8004f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f10:	6066      	str	r6, [r4, #4]
 8004f12:	4433      	add	r3, r6
 8004f14:	9321      	str	r3, [sp, #132]	; 0x84
 8004f16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f18:	3301      	adds	r3, #1
 8004f1a:	4447      	add	r7, r8
 8004f1c:	2b07      	cmp	r3, #7
 8004f1e:	6027      	str	r7, [r4, #0]
 8004f20:	9320      	str	r3, [sp, #128]	; 0x80
 8004f22:	dc54      	bgt.n	8004fce <_svfprintf_r+0xd46>
 8004f24:	3408      	adds	r4, #8
 8004f26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f28:	9a03      	ldr	r2, [sp, #12]
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	eba2 0303 	sub.w	r3, r2, r3
 8004f30:	bfac      	ite	ge
 8004f32:	1b9e      	subge	r6, r3, r6
 8004f34:	461e      	movlt	r6, r3
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	f77f acd7 	ble.w	80048ea <_svfprintf_r+0x662>
 8004f3c:	4f2f      	ldr	r7, [pc, #188]	; (8004ffc <_svfprintf_r+0xd74>)
 8004f3e:	f04f 0810 	mov.w	r8, #16
 8004f42:	2e10      	cmp	r6, #16
 8004f44:	6027      	str	r7, [r4, #0]
 8004f46:	f77f aee7 	ble.w	8004d18 <_svfprintf_r+0xa90>
 8004f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f4c:	f8c4 8004 	str.w	r8, [r4, #4]
 8004f50:	3310      	adds	r3, #16
 8004f52:	9321      	str	r3, [sp, #132]	; 0x84
 8004f54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f56:	3301      	adds	r3, #1
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	9320      	str	r3, [sp, #128]	; 0x80
 8004f5c:	dc41      	bgt.n	8004fe2 <_svfprintf_r+0xd5a>
 8004f5e:	3408      	adds	r4, #8
 8004f60:	3e10      	subs	r6, #16
 8004f62:	e7ee      	b.n	8004f42 <_svfprintf_r+0xcba>
 8004f64:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f66:	4651      	mov	r1, sl
 8004f68:	4658      	mov	r0, fp
 8004f6a:	f003 fc34 	bl	80087d6 <__ssprint_r>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	f040 80eb 	bne.w	800514a <_svfprintf_r+0xec2>
 8004f74:	ac2c      	add	r4, sp, #176	; 0xb0
 8004f76:	e796      	b.n	8004ea6 <_svfprintf_r+0xc1e>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	6063      	str	r3, [r4, #4]
 8004f7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f7e:	3310      	adds	r3, #16
 8004f80:	9321      	str	r3, [sp, #132]	; 0x84
 8004f82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f84:	3301      	adds	r3, #1
 8004f86:	2b07      	cmp	r3, #7
 8004f88:	9320      	str	r3, [sp, #128]	; 0x80
 8004f8a:	dc02      	bgt.n	8004f92 <_svfprintf_r+0xd0a>
 8004f8c:	3408      	adds	r4, #8
 8004f8e:	3e10      	subs	r6, #16
 8004f90:	e791      	b.n	8004eb6 <_svfprintf_r+0xc2e>
 8004f92:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f94:	4651      	mov	r1, sl
 8004f96:	4658      	mov	r0, fp
 8004f98:	f003 fc1d 	bl	80087d6 <__ssprint_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f040 80d4 	bne.w	800514a <_svfprintf_r+0xec2>
 8004fa2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fa4:	e7f3      	b.n	8004f8e <_svfprintf_r+0xd06>
 8004fa6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fa8:	4651      	mov	r1, sl
 8004faa:	4658      	mov	r0, fp
 8004fac:	f003 fc13 	bl	80087d6 <__ssprint_r>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 80ca 	bne.w	800514a <_svfprintf_r+0xec2>
 8004fb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fb8:	e78b      	b.n	8004ed2 <_svfprintf_r+0xc4a>
 8004fba:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fbc:	4651      	mov	r1, sl
 8004fbe:	4658      	mov	r0, fp
 8004fc0:	f003 fc09 	bl	80087d6 <__ssprint_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f040 80c0 	bne.w	800514a <_svfprintf_r+0xec2>
 8004fca:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fcc:	e795      	b.n	8004efa <_svfprintf_r+0xc72>
 8004fce:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fd0:	4651      	mov	r1, sl
 8004fd2:	4658      	mov	r0, fp
 8004fd4:	f003 fbff 	bl	80087d6 <__ssprint_r>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	f040 80b6 	bne.w	800514a <_svfprintf_r+0xec2>
 8004fde:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fe0:	e7a1      	b.n	8004f26 <_svfprintf_r+0xc9e>
 8004fe2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f003 fbf5 	bl	80087d6 <__ssprint_r>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f040 80ac 	bne.w	800514a <_svfprintf_r+0xec2>
 8004ff2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ff4:	e7b4      	b.n	8004f60 <_svfprintf_r+0xcd8>
 8004ff6:	bf00      	nop
 8004ff8:	08008fa6 	.word	0x08008fa6
 8004ffc:	08008fb8 	.word	0x08008fb8
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	2b01      	cmp	r3, #1
 8005004:	dc01      	bgt.n	800500a <_svfprintf_r+0xd82>
 8005006:	07ea      	lsls	r2, r5, #31
 8005008:	d576      	bpl.n	80050f8 <_svfprintf_r+0xe70>
 800500a:	2301      	movs	r3, #1
 800500c:	6063      	str	r3, [r4, #4]
 800500e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005010:	f8c4 8000 	str.w	r8, [r4]
 8005014:	3301      	adds	r3, #1
 8005016:	9321      	str	r3, [sp, #132]	; 0x84
 8005018:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800501a:	3301      	adds	r3, #1
 800501c:	2b07      	cmp	r3, #7
 800501e:	9320      	str	r3, [sp, #128]	; 0x80
 8005020:	dc36      	bgt.n	8005090 <_svfprintf_r+0xe08>
 8005022:	3408      	adds	r4, #8
 8005024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	9b08      	ldr	r3, [sp, #32]
 800502a:	6063      	str	r3, [r4, #4]
 800502c:	9a08      	ldr	r2, [sp, #32]
 800502e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005030:	4413      	add	r3, r2
 8005032:	9321      	str	r3, [sp, #132]	; 0x84
 8005034:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005036:	3301      	adds	r3, #1
 8005038:	2b07      	cmp	r3, #7
 800503a:	9320      	str	r3, [sp, #128]	; 0x80
 800503c:	dc31      	bgt.n	80050a2 <_svfprintf_r+0xe1a>
 800503e:	3408      	adds	r4, #8
 8005040:	2300      	movs	r3, #0
 8005042:	2200      	movs	r2, #0
 8005044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005048:	f7fb fd42 	bl	8000ad0 <__aeabi_dcmpeq>
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	1e5e      	subs	r6, r3, #1
 8005050:	2800      	cmp	r0, #0
 8005052:	d12f      	bne.n	80050b4 <_svfprintf_r+0xe2c>
 8005054:	f108 0301 	add.w	r3, r8, #1
 8005058:	e884 0048 	stmia.w	r4, {r3, r6}
 800505c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800505e:	9a03      	ldr	r2, [sp, #12]
 8005060:	3b01      	subs	r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	9321      	str	r3, [sp, #132]	; 0x84
 8005066:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005068:	3301      	adds	r3, #1
 800506a:	2b07      	cmp	r3, #7
 800506c:	9320      	str	r3, [sp, #128]	; 0x80
 800506e:	dd4a      	ble.n	8005106 <_svfprintf_r+0xe7e>
 8005070:	aa1f      	add	r2, sp, #124	; 0x7c
 8005072:	4651      	mov	r1, sl
 8005074:	4658      	mov	r0, fp
 8005076:	f003 fbae 	bl	80087d6 <__ssprint_r>
 800507a:	2800      	cmp	r0, #0
 800507c:	d165      	bne.n	800514a <_svfprintf_r+0xec2>
 800507e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005080:	ab1b      	add	r3, sp, #108	; 0x6c
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800508a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800508c:	4413      	add	r3, r2
 800508e:	e41c      	b.n	80048ca <_svfprintf_r+0x642>
 8005090:	aa1f      	add	r2, sp, #124	; 0x7c
 8005092:	4651      	mov	r1, sl
 8005094:	4658      	mov	r0, fp
 8005096:	f003 fb9e 	bl	80087d6 <__ssprint_r>
 800509a:	2800      	cmp	r0, #0
 800509c:	d155      	bne.n	800514a <_svfprintf_r+0xec2>
 800509e:	ac2c      	add	r4, sp, #176	; 0xb0
 80050a0:	e7c0      	b.n	8005024 <_svfprintf_r+0xd9c>
 80050a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80050a4:	4651      	mov	r1, sl
 80050a6:	4658      	mov	r0, fp
 80050a8:	f003 fb95 	bl	80087d6 <__ssprint_r>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d14c      	bne.n	800514a <_svfprintf_r+0xec2>
 80050b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80050b2:	e7c5      	b.n	8005040 <_svfprintf_r+0xdb8>
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	dde3      	ble.n	8005080 <_svfprintf_r+0xdf8>
 80050b8:	4f59      	ldr	r7, [pc, #356]	; (8005220 <_svfprintf_r+0xf98>)
 80050ba:	f04f 0810 	mov.w	r8, #16
 80050be:	2e10      	cmp	r6, #16
 80050c0:	6027      	str	r7, [r4, #0]
 80050c2:	dc04      	bgt.n	80050ce <_svfprintf_r+0xe46>
 80050c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050c6:	6066      	str	r6, [r4, #4]
 80050c8:	441e      	add	r6, r3
 80050ca:	9621      	str	r6, [sp, #132]	; 0x84
 80050cc:	e7cb      	b.n	8005066 <_svfprintf_r+0xdde>
 80050ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050d0:	f8c4 8004 	str.w	r8, [r4, #4]
 80050d4:	3310      	adds	r3, #16
 80050d6:	9321      	str	r3, [sp, #132]	; 0x84
 80050d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050da:	3301      	adds	r3, #1
 80050dc:	2b07      	cmp	r3, #7
 80050de:	9320      	str	r3, [sp, #128]	; 0x80
 80050e0:	dc02      	bgt.n	80050e8 <_svfprintf_r+0xe60>
 80050e2:	3408      	adds	r4, #8
 80050e4:	3e10      	subs	r6, #16
 80050e6:	e7ea      	b.n	80050be <_svfprintf_r+0xe36>
 80050e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80050ea:	4651      	mov	r1, sl
 80050ec:	4658      	mov	r0, fp
 80050ee:	f003 fb72 	bl	80087d6 <__ssprint_r>
 80050f2:	bb50      	cbnz	r0, 800514a <_svfprintf_r+0xec2>
 80050f4:	ac2c      	add	r4, sp, #176	; 0xb0
 80050f6:	e7f5      	b.n	80050e4 <_svfprintf_r+0xe5c>
 80050f8:	2301      	movs	r3, #1
 80050fa:	6063      	str	r3, [r4, #4]
 80050fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050fe:	f8c4 8000 	str.w	r8, [r4]
 8005102:	3301      	adds	r3, #1
 8005104:	e7ae      	b.n	8005064 <_svfprintf_r+0xddc>
 8005106:	3408      	adds	r4, #8
 8005108:	e7ba      	b.n	8005080 <_svfprintf_r+0xdf8>
 800510a:	3408      	adds	r4, #8
 800510c:	f7ff bbed 	b.w	80048ea <_svfprintf_r+0x662>
 8005110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005114:	1a9d      	subs	r5, r3, r2
 8005116:	2d00      	cmp	r5, #0
 8005118:	f77f abea 	ble.w	80048f0 <_svfprintf_r+0x668>
 800511c:	2610      	movs	r6, #16
 800511e:	4b41      	ldr	r3, [pc, #260]	; (8005224 <_svfprintf_r+0xf9c>)
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	2d10      	cmp	r5, #16
 8005124:	dc1b      	bgt.n	800515e <_svfprintf_r+0xed6>
 8005126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005128:	6065      	str	r5, [r4, #4]
 800512a:	441d      	add	r5, r3
 800512c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800512e:	9521      	str	r5, [sp, #132]	; 0x84
 8005130:	3301      	adds	r3, #1
 8005132:	2b07      	cmp	r3, #7
 8005134:	9320      	str	r3, [sp, #128]	; 0x80
 8005136:	f77f abdb 	ble.w	80048f0 <_svfprintf_r+0x668>
 800513a:	aa1f      	add	r2, sp, #124	; 0x7c
 800513c:	4651      	mov	r1, sl
 800513e:	4658      	mov	r0, fp
 8005140:	f003 fb49 	bl	80087d6 <__ssprint_r>
 8005144:	2800      	cmp	r0, #0
 8005146:	f43f abd3 	beq.w	80048f0 <_svfprintf_r+0x668>
 800514a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800514e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005154:	bf18      	it	ne
 8005156:	f04f 33ff 	movne.w	r3, #4294967295
 800515a:	f7ff b8b9 	b.w	80042d0 <_svfprintf_r+0x48>
 800515e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005160:	6066      	str	r6, [r4, #4]
 8005162:	3310      	adds	r3, #16
 8005164:	9321      	str	r3, [sp, #132]	; 0x84
 8005166:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005168:	3301      	adds	r3, #1
 800516a:	2b07      	cmp	r3, #7
 800516c:	9320      	str	r3, [sp, #128]	; 0x80
 800516e:	dc02      	bgt.n	8005176 <_svfprintf_r+0xeee>
 8005170:	3408      	adds	r4, #8
 8005172:	3d10      	subs	r5, #16
 8005174:	e7d3      	b.n	800511e <_svfprintf_r+0xe96>
 8005176:	aa1f      	add	r2, sp, #124	; 0x7c
 8005178:	4651      	mov	r1, sl
 800517a:	4658      	mov	r0, fp
 800517c:	f003 fb2b 	bl	80087d6 <__ssprint_r>
 8005180:	2800      	cmp	r0, #0
 8005182:	d1e2      	bne.n	800514a <_svfprintf_r+0xec2>
 8005184:	ac2c      	add	r4, sp, #176	; 0xb0
 8005186:	e7f4      	b.n	8005172 <_svfprintf_r+0xeea>
 8005188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0dd      	beq.n	800514a <_svfprintf_r+0xec2>
 800518e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005190:	4651      	mov	r1, sl
 8005192:	4658      	mov	r0, fp
 8005194:	f003 fb1f 	bl	80087d6 <__ssprint_r>
 8005198:	e7d7      	b.n	800514a <_svfprintf_r+0xec2>
 800519a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800519e:	4610      	mov	r0, r2
 80051a0:	4619      	mov	r1, r3
 80051a2:	f7fb fcc7 	bl	8000b34 <__aeabi_dcmpun>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f43f aa44 	beq.w	8004634 <_svfprintf_r+0x3ac>
 80051ac:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <_svfprintf_r+0xfa0>)
 80051ae:	4a1f      	ldr	r2, [pc, #124]	; (800522c <_svfprintf_r+0xfa4>)
 80051b0:	f7ff ba34 	b.w	800461c <_svfprintf_r+0x394>
 80051b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051b6:	eba3 0308 	sub.w	r3, r3, r8
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	f7ff bab5 	b.w	800472a <_svfprintf_r+0x4a2>
 80051c0:	ea56 0207 	orrs.w	r2, r6, r7
 80051c4:	950b      	str	r5, [sp, #44]	; 0x2c
 80051c6:	f43f ac2b 	beq.w	8004a20 <_svfprintf_r+0x798>
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	f43f ac9d 	beq.w	8004b0a <_svfprintf_r+0x882>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	f43f acbd 	beq.w	8004b50 <_svfprintf_r+0x8c8>
 80051d6:	ab2c      	add	r3, sp, #176	; 0xb0
 80051d8:	08f1      	lsrs	r1, r6, #3
 80051da:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80051de:	08f8      	lsrs	r0, r7, #3
 80051e0:	f006 0207 	and.w	r2, r6, #7
 80051e4:	4607      	mov	r7, r0
 80051e6:	460e      	mov	r6, r1
 80051e8:	3230      	adds	r2, #48	; 0x30
 80051ea:	ea56 0107 	orrs.w	r1, r6, r7
 80051ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80051f2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80051f6:	f47f ac86 	bne.w	8004b06 <_svfprintf_r+0x87e>
 80051fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051fc:	07c9      	lsls	r1, r1, #31
 80051fe:	d506      	bpl.n	800520e <_svfprintf_r+0xf86>
 8005200:	2a30      	cmp	r2, #48	; 0x30
 8005202:	d004      	beq.n	800520e <_svfprintf_r+0xf86>
 8005204:	2230      	movs	r2, #48	; 0x30
 8005206:	f808 2c01 	strb.w	r2, [r8, #-1]
 800520a:	f1a3 0802 	sub.w	r8, r3, #2
 800520e:	464e      	mov	r6, r9
 8005210:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005214:	eba9 0908 	sub.w	r9, r9, r8
 8005218:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800521a:	2700      	movs	r7, #0
 800521c:	f7ff bad1 	b.w	80047c2 <_svfprintf_r+0x53a>
 8005220:	08008fb8 	.word	0x08008fb8
 8005224:	08008fa8 	.word	0x08008fa8
 8005228:	08008f7c 	.word	0x08008f7c
 800522c:	08008f80 	.word	0x08008f80

08005230 <_vfprintf_r>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	b0bd      	sub	sp, #244	; 0xf4
 8005236:	4688      	mov	r8, r1
 8005238:	4615      	mov	r5, r2
 800523a:	461c      	mov	r4, r3
 800523c:	461f      	mov	r7, r3
 800523e:	4683      	mov	fp, r0
 8005240:	f002 fb60 	bl	8007904 <_localeconv_r>
 8005244:	6803      	ldr	r3, [r0, #0]
 8005246:	930d      	str	r3, [sp, #52]	; 0x34
 8005248:	4618      	mov	r0, r3
 800524a:	f7fa ffc9 	bl	80001e0 <strlen>
 800524e:	9009      	str	r0, [sp, #36]	; 0x24
 8005250:	f1bb 0f00 	cmp.w	fp, #0
 8005254:	d005      	beq.n	8005262 <_vfprintf_r+0x32>
 8005256:	f8db 3018 	ldr.w	r3, [fp, #24]
 800525a:	b913      	cbnz	r3, 8005262 <_vfprintf_r+0x32>
 800525c:	4658      	mov	r0, fp
 800525e:	f002 f853 	bl	8007308 <__sinit>
 8005262:	4b99      	ldr	r3, [pc, #612]	; (80054c8 <_vfprintf_r+0x298>)
 8005264:	4598      	cmp	r8, r3
 8005266:	d137      	bne.n	80052d8 <_vfprintf_r+0xa8>
 8005268:	f8db 8004 	ldr.w	r8, [fp, #4]
 800526c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8005270:	07d8      	lsls	r0, r3, #31
 8005272:	d407      	bmi.n	8005284 <_vfprintf_r+0x54>
 8005274:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005278:	0599      	lsls	r1, r3, #22
 800527a:	d403      	bmi.n	8005284 <_vfprintf_r+0x54>
 800527c:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8005280:	f002 fb50 	bl	8007924 <__retarget_lock_acquire_recursive>
 8005284:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8005288:	049a      	lsls	r2, r3, #18
 800528a:	d409      	bmi.n	80052a0 <_vfprintf_r+0x70>
 800528c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005290:	f8a8 300c 	strh.w	r3, [r8, #12]
 8005294:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8005298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529c:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 80052a0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80052a4:	071e      	lsls	r6, r3, #28
 80052a6:	d502      	bpl.n	80052ae <_vfprintf_r+0x7e>
 80052a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80052ac:	bb03      	cbnz	r3, 80052f0 <_vfprintf_r+0xc0>
 80052ae:	4641      	mov	r1, r8
 80052b0:	4658      	mov	r0, fp
 80052b2:	f001 f839 	bl	8006328 <__swsetup_r>
 80052b6:	b1d8      	cbz	r0, 80052f0 <_vfprintf_r+0xc0>
 80052b8:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80052bc:	07dd      	lsls	r5, r3, #31
 80052be:	d407      	bmi.n	80052d0 <_vfprintf_r+0xa0>
 80052c0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80052c4:	059c      	lsls	r4, r3, #22
 80052c6:	d403      	bmi.n	80052d0 <_vfprintf_r+0xa0>
 80052c8:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80052cc:	f002 fb2b 	bl	8007926 <__retarget_lock_release_recursive>
 80052d0:	f04f 33ff 	mov.w	r3, #4294967295
 80052d4:	930a      	str	r3, [sp, #40]	; 0x28
 80052d6:	e026      	b.n	8005326 <_vfprintf_r+0xf6>
 80052d8:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <_vfprintf_r+0x29c>)
 80052da:	4598      	cmp	r8, r3
 80052dc:	d102      	bne.n	80052e4 <_vfprintf_r+0xb4>
 80052de:	f8db 8008 	ldr.w	r8, [fp, #8]
 80052e2:	e7c3      	b.n	800526c <_vfprintf_r+0x3c>
 80052e4:	4b7a      	ldr	r3, [pc, #488]	; (80054d0 <_vfprintf_r+0x2a0>)
 80052e6:	4598      	cmp	r8, r3
 80052e8:	bf08      	it	eq
 80052ea:	f8db 800c 	ldreq.w	r8, [fp, #12]
 80052ee:	e7bd      	b.n	800526c <_vfprintf_r+0x3c>
 80052f0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80052f4:	f003 021a 	and.w	r2, r3, #26
 80052f8:	2a0a      	cmp	r2, #10
 80052fa:	d118      	bne.n	800532e <_vfprintf_r+0xfe>
 80052fc:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8005300:	2a00      	cmp	r2, #0
 8005302:	db14      	blt.n	800532e <_vfprintf_r+0xfe>
 8005304:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8005308:	07d0      	lsls	r0, r2, #31
 800530a:	d405      	bmi.n	8005318 <_vfprintf_r+0xe8>
 800530c:	0599      	lsls	r1, r3, #22
 800530e:	d403      	bmi.n	8005318 <_vfprintf_r+0xe8>
 8005310:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8005314:	f002 fb07 	bl	8007926 <__retarget_lock_release_recursive>
 8005318:	4623      	mov	r3, r4
 800531a:	462a      	mov	r2, r5
 800531c:	4641      	mov	r1, r8
 800531e:	4658      	mov	r0, fp
 8005320:	f000 ffc2 	bl	80062a8 <__sbprintf>
 8005324:	900a      	str	r0, [sp, #40]	; 0x28
 8005326:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005328:	b03d      	add	sp, #244	; 0xf4
 800532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532e:	ed9f 7b64 	vldr	d7, [pc, #400]	; 80054c0 <_vfprintf_r+0x290>
 8005332:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005336:	2300      	movs	r3, #0
 8005338:	ac2c      	add	r4, sp, #176	; 0xb0
 800533a:	941f      	str	r4, [sp, #124]	; 0x7c
 800533c:	9321      	str	r3, [sp, #132]	; 0x84
 800533e:	9320      	str	r3, [sp, #128]	; 0x80
 8005340:	9505      	str	r5, [sp, #20]
 8005342:	9303      	str	r3, [sp, #12]
 8005344:	9311      	str	r3, [sp, #68]	; 0x44
 8005346:	9310      	str	r3, [sp, #64]	; 0x40
 8005348:	930a      	str	r3, [sp, #40]	; 0x28
 800534a:	9d05      	ldr	r5, [sp, #20]
 800534c:	462b      	mov	r3, r5
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b112      	cbz	r2, 800535a <_vfprintf_r+0x12a>
 8005354:	2a25      	cmp	r2, #37	; 0x25
 8005356:	f040 8083 	bne.w	8005460 <_vfprintf_r+0x230>
 800535a:	9b05      	ldr	r3, [sp, #20]
 800535c:	1aee      	subs	r6, r5, r3
 800535e:	d00d      	beq.n	800537c <_vfprintf_r+0x14c>
 8005360:	e884 0048 	stmia.w	r4, {r3, r6}
 8005364:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005366:	4433      	add	r3, r6
 8005368:	9321      	str	r3, [sp, #132]	; 0x84
 800536a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800536c:	3301      	adds	r3, #1
 800536e:	2b07      	cmp	r3, #7
 8005370:	9320      	str	r3, [sp, #128]	; 0x80
 8005372:	dc77      	bgt.n	8005464 <_vfprintf_r+0x234>
 8005374:	3408      	adds	r4, #8
 8005376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005378:	4433      	add	r3, r6
 800537a:	930a      	str	r3, [sp, #40]	; 0x28
 800537c:	782b      	ldrb	r3, [r5, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8739 	beq.w	80061f6 <_vfprintf_r+0xfc6>
 8005384:	2300      	movs	r3, #0
 8005386:	1c69      	adds	r1, r5, #1
 8005388:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800538c:	461a      	mov	r2, r3
 800538e:	f04f 3aff 	mov.w	sl, #4294967295
 8005392:	930b      	str	r3, [sp, #44]	; 0x2c
 8005394:	461d      	mov	r5, r3
 8005396:	200a      	movs	r0, #10
 8005398:	1c4e      	adds	r6, r1, #1
 800539a:	7809      	ldrb	r1, [r1, #0]
 800539c:	9605      	str	r6, [sp, #20]
 800539e:	9102      	str	r1, [sp, #8]
 80053a0:	9902      	ldr	r1, [sp, #8]
 80053a2:	3920      	subs	r1, #32
 80053a4:	2958      	cmp	r1, #88	; 0x58
 80053a6:	f200 841d 	bhi.w	8005be4 <_vfprintf_r+0x9b4>
 80053aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80053ae:	00b3      	.short	0x00b3
 80053b0:	041b041b 	.word	0x041b041b
 80053b4:	041b00b8 	.word	0x041b00b8
 80053b8:	041b041b 	.word	0x041b041b
 80053bc:	041b041b 	.word	0x041b041b
 80053c0:	00bb041b 	.word	0x00bb041b
 80053c4:	041b0065 	.word	0x041b0065
 80053c8:	00c700c4 	.word	0x00c700c4
 80053cc:	00e4041b 	.word	0x00e4041b
 80053d0:	00e700e7 	.word	0x00e700e7
 80053d4:	00e700e7 	.word	0x00e700e7
 80053d8:	00e700e7 	.word	0x00e700e7
 80053dc:	00e700e7 	.word	0x00e700e7
 80053e0:	041b00e7 	.word	0x041b00e7
 80053e4:	041b041b 	.word	0x041b041b
 80053e8:	041b041b 	.word	0x041b041b
 80053ec:	041b041b 	.word	0x041b041b
 80053f0:	041b041b 	.word	0x041b041b
 80053f4:	011b041b 	.word	0x011b041b
 80053f8:	041b0131 	.word	0x041b0131
 80053fc:	041b0131 	.word	0x041b0131
 8005400:	041b041b 	.word	0x041b041b
 8005404:	00fa041b 	.word	0x00fa041b
 8005408:	041b041b 	.word	0x041b041b
 800540c:	041b0346 	.word	0x041b0346
 8005410:	041b041b 	.word	0x041b041b
 8005414:	041b041b 	.word	0x041b041b
 8005418:	041b03ad 	.word	0x041b03ad
 800541c:	0093041b 	.word	0x0093041b
 8005420:	041b041b 	.word	0x041b041b
 8005424:	041b041b 	.word	0x041b041b
 8005428:	041b041b 	.word	0x041b041b
 800542c:	041b041b 	.word	0x041b041b
 8005430:	041b041b 	.word	0x041b041b
 8005434:	006b010d 	.word	0x006b010d
 8005438:	01310131 	.word	0x01310131
 800543c:	00fd0131 	.word	0x00fd0131
 8005440:	041b006b 	.word	0x041b006b
 8005444:	0100041b 	.word	0x0100041b
 8005448:	0328041b 	.word	0x0328041b
 800544c:	037c0348 	.word	0x037c0348
 8005450:	041b0107 	.word	0x041b0107
 8005454:	041b038d 	.word	0x041b038d
 8005458:	041b03af 	.word	0x041b03af
 800545c:	03c7041b 	.word	0x03c7041b
 8005460:	461d      	mov	r5, r3
 8005462:	e773      	b.n	800534c <_vfprintf_r+0x11c>
 8005464:	aa1f      	add	r2, sp, #124	; 0x7c
 8005466:	4641      	mov	r1, r8
 8005468:	4658      	mov	r0, fp
 800546a:	f003 fa2e 	bl	80088ca <__sprint_r>
 800546e:	2800      	cmp	r0, #0
 8005470:	f040 8699 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005474:	ac2c      	add	r4, sp, #176	; 0xb0
 8005476:	e77e      	b.n	8005376 <_vfprintf_r+0x146>
 8005478:	2301      	movs	r3, #1
 800547a:	222b      	movs	r2, #43	; 0x2b
 800547c:	9905      	ldr	r1, [sp, #20]
 800547e:	e78b      	b.n	8005398 <_vfprintf_r+0x168>
 8005480:	460f      	mov	r7, r1
 8005482:	e7fb      	b.n	800547c <_vfprintf_r+0x24c>
 8005484:	b10b      	cbz	r3, 800548a <_vfprintf_r+0x25a>
 8005486:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800548a:	06aa      	lsls	r2, r5, #26
 800548c:	f140 80b0 	bpl.w	80055f0 <_vfprintf_r+0x3c0>
 8005490:	3707      	adds	r7, #7
 8005492:	f027 0707 	bic.w	r7, r7, #7
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	2e00      	cmp	r6, #0
 80054a2:	f177 0300 	sbcs.w	r3, r7, #0
 80054a6:	da06      	bge.n	80054b6 <_vfprintf_r+0x286>
 80054a8:	4276      	negs	r6, r6
 80054aa:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80054ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80054b2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80054b6:	2301      	movs	r3, #1
 80054b8:	e2d0      	b.n	8005a5c <_vfprintf_r+0x82c>
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
	...
 80054c8:	08009018 	.word	0x08009018
 80054cc:	08009038 	.word	0x08009038
 80054d0:	08008ff8 	.word	0x08008ff8
 80054d4:	b10b      	cbz	r3, 80054da <_vfprintf_r+0x2aa>
 80054d6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80054da:	4ba2      	ldr	r3, [pc, #648]	; (8005764 <_vfprintf_r+0x534>)
 80054dc:	9311      	str	r3, [sp, #68]	; 0x44
 80054de:	06a9      	lsls	r1, r5, #26
 80054e0:	f140 8331 	bpl.w	8005b46 <_vfprintf_r+0x916>
 80054e4:	3707      	adds	r7, #7
 80054e6:	f027 0707 	bic.w	r7, r7, #7
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	e9d7 6700 	ldrd	r6, r7, [r7]
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	07eb      	lsls	r3, r5, #31
 80054f6:	d50b      	bpl.n	8005510 <_vfprintf_r+0x2e0>
 80054f8:	ea56 0307 	orrs.w	r3, r6, r7
 80054fc:	d008      	beq.n	8005510 <_vfprintf_r+0x2e0>
 80054fe:	2330      	movs	r3, #48	; 0x30
 8005500:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005504:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005508:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800550c:	f045 0502 	orr.w	r5, r5, #2
 8005510:	2302      	movs	r3, #2
 8005512:	e2a0      	b.n	8005a56 <_vfprintf_r+0x826>
 8005514:	2a00      	cmp	r2, #0
 8005516:	d1b1      	bne.n	800547c <_vfprintf_r+0x24c>
 8005518:	2301      	movs	r3, #1
 800551a:	2220      	movs	r2, #32
 800551c:	e7ae      	b.n	800547c <_vfprintf_r+0x24c>
 800551e:	f045 0501 	orr.w	r5, r5, #1
 8005522:	e7ab      	b.n	800547c <_vfprintf_r+0x24c>
 8005524:	683e      	ldr	r6, [r7, #0]
 8005526:	960b      	str	r6, [sp, #44]	; 0x2c
 8005528:	2e00      	cmp	r6, #0
 800552a:	f107 0104 	add.w	r1, r7, #4
 800552e:	daa7      	bge.n	8005480 <_vfprintf_r+0x250>
 8005530:	4276      	negs	r6, r6
 8005532:	960b      	str	r6, [sp, #44]	; 0x2c
 8005534:	460f      	mov	r7, r1
 8005536:	f045 0504 	orr.w	r5, r5, #4
 800553a:	e79f      	b.n	800547c <_vfprintf_r+0x24c>
 800553c:	9905      	ldr	r1, [sp, #20]
 800553e:	1c4e      	adds	r6, r1, #1
 8005540:	7809      	ldrb	r1, [r1, #0]
 8005542:	9102      	str	r1, [sp, #8]
 8005544:	292a      	cmp	r1, #42	; 0x2a
 8005546:	d010      	beq.n	800556a <_vfprintf_r+0x33a>
 8005548:	f04f 0a00 	mov.w	sl, #0
 800554c:	9605      	str	r6, [sp, #20]
 800554e:	9902      	ldr	r1, [sp, #8]
 8005550:	3930      	subs	r1, #48	; 0x30
 8005552:	2909      	cmp	r1, #9
 8005554:	f63f af24 	bhi.w	80053a0 <_vfprintf_r+0x170>
 8005558:	fb00 1a0a 	mla	sl, r0, sl, r1
 800555c:	9905      	ldr	r1, [sp, #20]
 800555e:	460e      	mov	r6, r1
 8005560:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005564:	9102      	str	r1, [sp, #8]
 8005566:	9605      	str	r6, [sp, #20]
 8005568:	e7f1      	b.n	800554e <_vfprintf_r+0x31e>
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	9605      	str	r6, [sp, #20]
 800556e:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 8005572:	3704      	adds	r7, #4
 8005574:	e782      	b.n	800547c <_vfprintf_r+0x24c>
 8005576:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800557a:	e77f      	b.n	800547c <_vfprintf_r+0x24c>
 800557c:	2100      	movs	r1, #0
 800557e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005580:	9902      	ldr	r1, [sp, #8]
 8005582:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005584:	3930      	subs	r1, #48	; 0x30
 8005586:	fb00 1106 	mla	r1, r0, r6, r1
 800558a:	910b      	str	r1, [sp, #44]	; 0x2c
 800558c:	9905      	ldr	r1, [sp, #20]
 800558e:	460e      	mov	r6, r1
 8005590:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005594:	9102      	str	r1, [sp, #8]
 8005596:	9902      	ldr	r1, [sp, #8]
 8005598:	9605      	str	r6, [sp, #20]
 800559a:	3930      	subs	r1, #48	; 0x30
 800559c:	2909      	cmp	r1, #9
 800559e:	d9ef      	bls.n	8005580 <_vfprintf_r+0x350>
 80055a0:	e6fe      	b.n	80053a0 <_vfprintf_r+0x170>
 80055a2:	f045 0508 	orr.w	r5, r5, #8
 80055a6:	e769      	b.n	800547c <_vfprintf_r+0x24c>
 80055a8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80055ac:	e766      	b.n	800547c <_vfprintf_r+0x24c>
 80055ae:	9905      	ldr	r1, [sp, #20]
 80055b0:	7809      	ldrb	r1, [r1, #0]
 80055b2:	296c      	cmp	r1, #108	; 0x6c
 80055b4:	d105      	bne.n	80055c2 <_vfprintf_r+0x392>
 80055b6:	9905      	ldr	r1, [sp, #20]
 80055b8:	3101      	adds	r1, #1
 80055ba:	9105      	str	r1, [sp, #20]
 80055bc:	f045 0520 	orr.w	r5, r5, #32
 80055c0:	e75c      	b.n	800547c <_vfprintf_r+0x24c>
 80055c2:	f045 0510 	orr.w	r5, r5, #16
 80055c6:	e759      	b.n	800547c <_vfprintf_r+0x24c>
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	2600      	movs	r6, #0
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80055d4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80055d8:	f04f 0a01 	mov.w	sl, #1
 80055dc:	9608      	str	r6, [sp, #32]
 80055de:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 80055e2:	e11e      	b.n	8005822 <_vfprintf_r+0x5f2>
 80055e4:	b10b      	cbz	r3, 80055ea <_vfprintf_r+0x3ba>
 80055e6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80055ea:	f045 0510 	orr.w	r5, r5, #16
 80055ee:	e74c      	b.n	800548a <_vfprintf_r+0x25a>
 80055f0:	f015 0f10 	tst.w	r5, #16
 80055f4:	f107 0304 	add.w	r3, r7, #4
 80055f8:	d003      	beq.n	8005602 <_vfprintf_r+0x3d2>
 80055fa:	683e      	ldr	r6, [r7, #0]
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	17f7      	asrs	r7, r6, #31
 8005600:	e74e      	b.n	80054a0 <_vfprintf_r+0x270>
 8005602:	683e      	ldr	r6, [r7, #0]
 8005604:	9304      	str	r3, [sp, #16]
 8005606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800560a:	bf18      	it	ne
 800560c:	b236      	sxthne	r6, r6
 800560e:	e7f6      	b.n	80055fe <_vfprintf_r+0x3ce>
 8005610:	b10b      	cbz	r3, 8005616 <_vfprintf_r+0x3e6>
 8005612:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005616:	3707      	adds	r7, #7
 8005618:	f027 0707 	bic.w	r7, r7, #7
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	ed97 7b00 	vldr	d7, [r7]
 8005626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800562a:	9b06      	ldr	r3, [sp, #24]
 800562c:	9312      	str	r3, [sp, #72]	; 0x48
 800562e:	9b07      	ldr	r3, [sp, #28]
 8005630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005634:	9313      	str	r3, [sp, #76]	; 0x4c
 8005636:	f04f 32ff 	mov.w	r2, #4294967295
 800563a:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <_vfprintf_r+0x538>)
 800563c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005640:	f7fb fa78 	bl	8000b34 <__aeabi_dcmpun>
 8005644:	2800      	cmp	r0, #0
 8005646:	f040 85e3 	bne.w	8006210 <_vfprintf_r+0xfe0>
 800564a:	f04f 32ff 	mov.w	r2, #4294967295
 800564e:	4b46      	ldr	r3, [pc, #280]	; (8005768 <_vfprintf_r+0x538>)
 8005650:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005654:	f7fb fa50 	bl	8000af8 <__aeabi_dcmple>
 8005658:	2800      	cmp	r0, #0
 800565a:	f040 85d9 	bne.w	8006210 <_vfprintf_r+0xfe0>
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005666:	f7fb fa3d 	bl	8000ae4 <__aeabi_dcmplt>
 800566a:	b110      	cbz	r0, 8005672 <_vfprintf_r+0x442>
 800566c:	232d      	movs	r3, #45	; 0x2d
 800566e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005672:	4b3e      	ldr	r3, [pc, #248]	; (800576c <_vfprintf_r+0x53c>)
 8005674:	4a3e      	ldr	r2, [pc, #248]	; (8005770 <_vfprintf_r+0x540>)
 8005676:	9902      	ldr	r1, [sp, #8]
 8005678:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800567c:	2947      	cmp	r1, #71	; 0x47
 800567e:	bfcc      	ite	gt
 8005680:	4691      	movgt	r9, r2
 8005682:	4699      	movle	r9, r3
 8005684:	f04f 0a03 	mov.w	sl, #3
 8005688:	2600      	movs	r6, #0
 800568a:	9608      	str	r6, [sp, #32]
 800568c:	e0c9      	b.n	8005822 <_vfprintf_r+0x5f2>
 800568e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005692:	d022      	beq.n	80056da <_vfprintf_r+0x4aa>
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	f023 0320 	bic.w	r3, r3, #32
 800569a:	2b47      	cmp	r3, #71	; 0x47
 800569c:	d104      	bne.n	80056a8 <_vfprintf_r+0x478>
 800569e:	f1ba 0f00 	cmp.w	sl, #0
 80056a2:	bf08      	it	eq
 80056a4:	f04f 0a01 	moveq.w	sl, #1
 80056a8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80056ac:	9314      	str	r3, [sp, #80]	; 0x50
 80056ae:	9b07      	ldr	r3, [sp, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	da15      	bge.n	80056e0 <_vfprintf_r+0x4b0>
 80056b4:	9b06      	ldr	r3, [sp, #24]
 80056b6:	930e      	str	r3, [sp, #56]	; 0x38
 80056b8:	9b07      	ldr	r3, [sp, #28]
 80056ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80056be:	930f      	str	r3, [sp, #60]	; 0x3c
 80056c0:	232d      	movs	r3, #45	; 0x2d
 80056c2:	930c      	str	r3, [sp, #48]	; 0x30
 80056c4:	9b02      	ldr	r3, [sp, #8]
 80056c6:	f023 0720 	bic.w	r7, r3, #32
 80056ca:	2f46      	cmp	r7, #70	; 0x46
 80056cc:	d00e      	beq.n	80056ec <_vfprintf_r+0x4bc>
 80056ce:	2f45      	cmp	r7, #69	; 0x45
 80056d0:	d146      	bne.n	8005760 <_vfprintf_r+0x530>
 80056d2:	f10a 0601 	add.w	r6, sl, #1
 80056d6:	2102      	movs	r1, #2
 80056d8:	e00a      	b.n	80056f0 <_vfprintf_r+0x4c0>
 80056da:	f04f 0a06 	mov.w	sl, #6
 80056de:	e7e3      	b.n	80056a8 <_vfprintf_r+0x478>
 80056e0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80056e4:	2300      	movs	r3, #0
 80056e6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80056ea:	e7ea      	b.n	80056c2 <_vfprintf_r+0x492>
 80056ec:	4656      	mov	r6, sl
 80056ee:	2103      	movs	r1, #3
 80056f0:	ab1d      	add	r3, sp, #116	; 0x74
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	ab1a      	add	r3, sp, #104	; 0x68
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4632      	mov	r2, r6
 80056fa:	ab19      	add	r3, sp, #100	; 0x64
 80056fc:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8005700:	4658      	mov	r0, fp
 8005702:	f000 ff0d 	bl	8006520 <_dtoa_r>
 8005706:	2f47      	cmp	r7, #71	; 0x47
 8005708:	4681      	mov	r9, r0
 800570a:	d102      	bne.n	8005712 <_vfprintf_r+0x4e2>
 800570c:	07eb      	lsls	r3, r5, #31
 800570e:	f140 858c 	bpl.w	800622a <_vfprintf_r+0xffa>
 8005712:	eb09 0306 	add.w	r3, r9, r6
 8005716:	2f46      	cmp	r7, #70	; 0x46
 8005718:	9303      	str	r3, [sp, #12]
 800571a:	d111      	bne.n	8005740 <_vfprintf_r+0x510>
 800571c:	f899 3000 	ldrb.w	r3, [r9]
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	d109      	bne.n	8005738 <_vfprintf_r+0x508>
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800572c:	f7fb f9d0 	bl	8000ad0 <__aeabi_dcmpeq>
 8005730:	b910      	cbnz	r0, 8005738 <_vfprintf_r+0x508>
 8005732:	f1c6 0601 	rsb	r6, r6, #1
 8005736:	9619      	str	r6, [sp, #100]	; 0x64
 8005738:	9a03      	ldr	r2, [sp, #12]
 800573a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800573c:	441a      	add	r2, r3
 800573e:	9203      	str	r2, [sp, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	2300      	movs	r3, #0
 8005744:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005748:	f7fb f9c2 	bl	8000ad0 <__aeabi_dcmpeq>
 800574c:	b990      	cbnz	r0, 8005774 <_vfprintf_r+0x544>
 800574e:	2230      	movs	r2, #48	; 0x30
 8005750:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005752:	9903      	ldr	r1, [sp, #12]
 8005754:	4299      	cmp	r1, r3
 8005756:	d90f      	bls.n	8005778 <_vfprintf_r+0x548>
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	911d      	str	r1, [sp, #116]	; 0x74
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e7f7      	b.n	8005750 <_vfprintf_r+0x520>
 8005760:	4656      	mov	r6, sl
 8005762:	e7b8      	b.n	80056d6 <_vfprintf_r+0x4a6>
 8005764:	08008f84 	.word	0x08008f84
 8005768:	7fefffff 	.word	0x7fefffff
 800576c:	08008f74 	.word	0x08008f74
 8005770:	08008f78 	.word	0x08008f78
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	931d      	str	r3, [sp, #116]	; 0x74
 8005778:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800577a:	2f47      	cmp	r7, #71	; 0x47
 800577c:	eba3 0309 	sub.w	r3, r3, r9
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	f040 80f8 	bne.w	8005976 <_vfprintf_r+0x746>
 8005786:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005788:	1cdf      	adds	r7, r3, #3
 800578a:	db02      	blt.n	8005792 <_vfprintf_r+0x562>
 800578c:	459a      	cmp	sl, r3
 800578e:	f280 811f 	bge.w	80059d0 <_vfprintf_r+0x7a0>
 8005792:	9b02      	ldr	r3, [sp, #8]
 8005794:	3b02      	subs	r3, #2
 8005796:	9302      	str	r3, [sp, #8]
 8005798:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800579a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800579e:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80057a2:	1e53      	subs	r3, r2, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	9319      	str	r3, [sp, #100]	; 0x64
 80057a8:	bfb6      	itet	lt
 80057aa:	f1c2 0301 	rsblt	r3, r2, #1
 80057ae:	222b      	movge	r2, #43	; 0x2b
 80057b0:	222d      	movlt	r2, #45	; 0x2d
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80057b8:	f340 80fa 	ble.w	80059b0 <_vfprintf_r+0x780>
 80057bc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80057c0:	260a      	movs	r6, #10
 80057c2:	fb93 f0f6 	sdiv	r0, r3, r6
 80057c6:	fb06 3310 	mls	r3, r6, r0, r3
 80057ca:	3330      	adds	r3, #48	; 0x30
 80057cc:	2809      	cmp	r0, #9
 80057ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057d2:	f102 31ff 	add.w	r1, r2, #4294967295
 80057d6:	4603      	mov	r3, r0
 80057d8:	f300 80e3 	bgt.w	80059a2 <_vfprintf_r+0x772>
 80057dc:	3330      	adds	r3, #48	; 0x30
 80057de:	f801 3c01 	strb.w	r3, [r1, #-1]
 80057e2:	3a02      	subs	r2, #2
 80057e4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80057e8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80057ec:	4282      	cmp	r2, r0
 80057ee:	4619      	mov	r1, r3
 80057f0:	f0c0 80d9 	bcc.w	80059a6 <_vfprintf_r+0x776>
 80057f4:	9a03      	ldr	r2, [sp, #12]
 80057f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80057f8:	1acb      	subs	r3, r1, r3
 80057fa:	2a01      	cmp	r2, #1
 80057fc:	9310      	str	r3, [sp, #64]	; 0x40
 80057fe:	eb03 0a02 	add.w	sl, r3, r2
 8005802:	dc03      	bgt.n	800580c <_vfprintf_r+0x5dc>
 8005804:	f015 0301 	ands.w	r3, r5, #1
 8005808:	9308      	str	r3, [sp, #32]
 800580a:	d003      	beq.n	8005814 <_vfprintf_r+0x5e4>
 800580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580e:	449a      	add	sl, r3
 8005810:	2300      	movs	r3, #0
 8005812:	9308      	str	r3, [sp, #32]
 8005814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005816:	b113      	cbz	r3, 800581e <_vfprintf_r+0x5ee>
 8005818:	232d      	movs	r3, #45	; 0x2d
 800581a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800581e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005820:	2600      	movs	r6, #0
 8005822:	4556      	cmp	r6, sl
 8005824:	4633      	mov	r3, r6
 8005826:	bfb8      	it	lt
 8005828:	4653      	movlt	r3, sl
 800582a:	930c      	str	r3, [sp, #48]	; 0x30
 800582c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005830:	b113      	cbz	r3, 8005838 <_vfprintf_r+0x608>
 8005832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005834:	3301      	adds	r3, #1
 8005836:	930c      	str	r3, [sp, #48]	; 0x30
 8005838:	f015 0302 	ands.w	r3, r5, #2
 800583c:	9314      	str	r3, [sp, #80]	; 0x50
 800583e:	bf1e      	ittt	ne
 8005840:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8005842:	3302      	addne	r3, #2
 8005844:	930c      	strne	r3, [sp, #48]	; 0x30
 8005846:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800584a:	9315      	str	r3, [sp, #84]	; 0x54
 800584c:	d114      	bne.n	8005878 <_vfprintf_r+0x648>
 800584e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005850:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005852:	1a9f      	subs	r7, r3, r2
 8005854:	2f00      	cmp	r7, #0
 8005856:	dd0f      	ble.n	8005878 <_vfprintf_r+0x648>
 8005858:	4ba8      	ldr	r3, [pc, #672]	; (8005afc <_vfprintf_r+0x8cc>)
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	2f10      	cmp	r7, #16
 800585e:	f300 81d3 	bgt.w	8005c08 <_vfprintf_r+0x9d8>
 8005862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005864:	6067      	str	r7, [r4, #4]
 8005866:	441f      	add	r7, r3
 8005868:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800586a:	9721      	str	r7, [sp, #132]	; 0x84
 800586c:	3301      	adds	r3, #1
 800586e:	2b07      	cmp	r3, #7
 8005870:	9320      	str	r3, [sp, #128]	; 0x80
 8005872:	f300 81e0 	bgt.w	8005c36 <_vfprintf_r+0xa06>
 8005876:	3408      	adds	r4, #8
 8005878:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800587c:	b173      	cbz	r3, 800589c <_vfprintf_r+0x66c>
 800587e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	2301      	movs	r3, #1
 8005886:	6063      	str	r3, [r4, #4]
 8005888:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800588a:	3301      	adds	r3, #1
 800588c:	9321      	str	r3, [sp, #132]	; 0x84
 800588e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005890:	3301      	adds	r3, #1
 8005892:	2b07      	cmp	r3, #7
 8005894:	9320      	str	r3, [sp, #128]	; 0x80
 8005896:	f300 81d8 	bgt.w	8005c4a <_vfprintf_r+0xa1a>
 800589a:	3408      	adds	r4, #8
 800589c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800589e:	b16b      	cbz	r3, 80058bc <_vfprintf_r+0x68c>
 80058a0:	ab18      	add	r3, sp, #96	; 0x60
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	2302      	movs	r3, #2
 80058a6:	6063      	str	r3, [r4, #4]
 80058a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058aa:	3302      	adds	r3, #2
 80058ac:	9321      	str	r3, [sp, #132]	; 0x84
 80058ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058b0:	3301      	adds	r3, #1
 80058b2:	2b07      	cmp	r3, #7
 80058b4:	9320      	str	r3, [sp, #128]	; 0x80
 80058b6:	f300 81d2 	bgt.w	8005c5e <_vfprintf_r+0xa2e>
 80058ba:	3408      	adds	r4, #8
 80058bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058be:	2b80      	cmp	r3, #128	; 0x80
 80058c0:	d114      	bne.n	80058ec <_vfprintf_r+0x6bc>
 80058c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058c6:	1a9f      	subs	r7, r3, r2
 80058c8:	2f00      	cmp	r7, #0
 80058ca:	dd0f      	ble.n	80058ec <_vfprintf_r+0x6bc>
 80058cc:	4b8c      	ldr	r3, [pc, #560]	; (8005b00 <_vfprintf_r+0x8d0>)
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	2f10      	cmp	r7, #16
 80058d2:	f300 81ce 	bgt.w	8005c72 <_vfprintf_r+0xa42>
 80058d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058d8:	6067      	str	r7, [r4, #4]
 80058da:	441f      	add	r7, r3
 80058dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058de:	9721      	str	r7, [sp, #132]	; 0x84
 80058e0:	3301      	adds	r3, #1
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	9320      	str	r3, [sp, #128]	; 0x80
 80058e6:	f300 81dd 	bgt.w	8005ca4 <_vfprintf_r+0xa74>
 80058ea:	3408      	adds	r4, #8
 80058ec:	eba6 060a 	sub.w	r6, r6, sl
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	dd0f      	ble.n	8005914 <_vfprintf_r+0x6e4>
 80058f4:	4f82      	ldr	r7, [pc, #520]	; (8005b00 <_vfprintf_r+0x8d0>)
 80058f6:	6027      	str	r7, [r4, #0]
 80058f8:	2e10      	cmp	r6, #16
 80058fa:	f300 81dd 	bgt.w	8005cb8 <_vfprintf_r+0xa88>
 80058fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005900:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005902:	6066      	str	r6, [r4, #4]
 8005904:	3301      	adds	r3, #1
 8005906:	4406      	add	r6, r0
 8005908:	2b07      	cmp	r3, #7
 800590a:	9621      	str	r6, [sp, #132]	; 0x84
 800590c:	9320      	str	r3, [sp, #128]	; 0x80
 800590e:	f300 81ea 	bgt.w	8005ce6 <_vfprintf_r+0xab6>
 8005912:	3408      	adds	r4, #8
 8005914:	05e9      	lsls	r1, r5, #23
 8005916:	f100 81f0 	bmi.w	8005cfa <_vfprintf_r+0xaca>
 800591a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800591c:	e884 0600 	stmia.w	r4, {r9, sl}
 8005920:	4453      	add	r3, sl
 8005922:	9321      	str	r3, [sp, #132]	; 0x84
 8005924:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005926:	3301      	adds	r3, #1
 8005928:	2b07      	cmp	r3, #7
 800592a:	9320      	str	r3, [sp, #128]	; 0x80
 800592c:	f340 841b 	ble.w	8006166 <_vfprintf_r+0xf36>
 8005930:	aa1f      	add	r2, sp, #124	; 0x7c
 8005932:	4641      	mov	r1, r8
 8005934:	4658      	mov	r0, fp
 8005936:	f002 ffc8 	bl	80088ca <__sprint_r>
 800593a:	2800      	cmp	r0, #0
 800593c:	f040 8433 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005940:	ac2c      	add	r4, sp, #176	; 0xb0
 8005942:	0768      	lsls	r0, r5, #29
 8005944:	f100 8412 	bmi.w	800616c <_vfprintf_r+0xf3c>
 8005948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800594c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800594e:	428a      	cmp	r2, r1
 8005950:	bfac      	ite	ge
 8005952:	189b      	addge	r3, r3, r2
 8005954:	185b      	addlt	r3, r3, r1
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800595a:	b13b      	cbz	r3, 800596c <_vfprintf_r+0x73c>
 800595c:	aa1f      	add	r2, sp, #124	; 0x7c
 800595e:	4641      	mov	r1, r8
 8005960:	4658      	mov	r0, fp
 8005962:	f002 ffb2 	bl	80088ca <__sprint_r>
 8005966:	2800      	cmp	r0, #0
 8005968:	f040 841d 	bne.w	80061a6 <_vfprintf_r+0xf76>
 800596c:	2300      	movs	r3, #0
 800596e:	9320      	str	r3, [sp, #128]	; 0x80
 8005970:	9f04      	ldr	r7, [sp, #16]
 8005972:	ac2c      	add	r4, sp, #176	; 0xb0
 8005974:	e4e9      	b.n	800534a <_vfprintf_r+0x11a>
 8005976:	9b02      	ldr	r3, [sp, #8]
 8005978:	2b65      	cmp	r3, #101	; 0x65
 800597a:	f77f af0d 	ble.w	8005798 <_vfprintf_r+0x568>
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	2b66      	cmp	r3, #102	; 0x66
 8005982:	d125      	bne.n	80059d0 <_vfprintf_r+0x7a0>
 8005984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005986:	2b00      	cmp	r3, #0
 8005988:	dd1a      	ble.n	80059c0 <_vfprintf_r+0x790>
 800598a:	f1ba 0f00 	cmp.w	sl, #0
 800598e:	d101      	bne.n	8005994 <_vfprintf_r+0x764>
 8005990:	07ee      	lsls	r6, r5, #31
 8005992:	d502      	bpl.n	800599a <_vfprintf_r+0x76a>
 8005994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005996:	4413      	add	r3, r2
 8005998:	4453      	add	r3, sl
 800599a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800599c:	9208      	str	r2, [sp, #32]
 800599e:	469a      	mov	sl, r3
 80059a0:	e738      	b.n	8005814 <_vfprintf_r+0x5e4>
 80059a2:	460a      	mov	r2, r1
 80059a4:	e70d      	b.n	80057c2 <_vfprintf_r+0x592>
 80059a6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e71d      	b.n	80057ec <_vfprintf_r+0x5bc>
 80059b0:	2230      	movs	r2, #48	; 0x30
 80059b2:	4413      	add	r3, r2
 80059b4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80059b8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80059bc:	a91c      	add	r1, sp, #112	; 0x70
 80059be:	e719      	b.n	80057f4 <_vfprintf_r+0x5c4>
 80059c0:	f1ba 0f00 	cmp.w	sl, #0
 80059c4:	d101      	bne.n	80059ca <_vfprintf_r+0x79a>
 80059c6:	07ed      	lsls	r5, r5, #31
 80059c8:	d515      	bpl.n	80059f6 <_vfprintf_r+0x7c6>
 80059ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059cc:	3301      	adds	r3, #1
 80059ce:	e7e3      	b.n	8005998 <_vfprintf_r+0x768>
 80059d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80059d2:	9b03      	ldr	r3, [sp, #12]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	db06      	blt.n	80059e6 <_vfprintf_r+0x7b6>
 80059d8:	07e8      	lsls	r0, r5, #31
 80059da:	d50e      	bpl.n	80059fa <_vfprintf_r+0x7ca>
 80059dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059de:	4413      	add	r3, r2
 80059e0:	2267      	movs	r2, #103	; 0x67
 80059e2:	9202      	str	r2, [sp, #8]
 80059e4:	e7d9      	b.n	800599a <_vfprintf_r+0x76a>
 80059e6:	9b03      	ldr	r3, [sp, #12]
 80059e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059ea:	2a00      	cmp	r2, #0
 80059ec:	440b      	add	r3, r1
 80059ee:	dcf7      	bgt.n	80059e0 <_vfprintf_r+0x7b0>
 80059f0:	f1c2 0201 	rsb	r2, r2, #1
 80059f4:	e7f3      	b.n	80059de <_vfprintf_r+0x7ae>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e7cf      	b.n	800599a <_vfprintf_r+0x76a>
 80059fa:	4613      	mov	r3, r2
 80059fc:	e7f0      	b.n	80059e0 <_vfprintf_r+0x7b0>
 80059fe:	b10b      	cbz	r3, 8005a04 <_vfprintf_r+0x7d4>
 8005a00:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005a04:	f015 0f20 	tst.w	r5, #32
 8005a08:	f107 0304 	add.w	r3, r7, #4
 8005a0c:	d008      	beq.n	8005a20 <_vfprintf_r+0x7f0>
 8005a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	17ce      	asrs	r6, r1, #31
 8005a14:	4608      	mov	r0, r1
 8005a16:	4631      	mov	r1, r6
 8005a18:	e9c2 0100 	strd	r0, r1, [r2]
 8005a1c:	461f      	mov	r7, r3
 8005a1e:	e494      	b.n	800534a <_vfprintf_r+0x11a>
 8005a20:	06e9      	lsls	r1, r5, #27
 8005a22:	d503      	bpl.n	8005a2c <_vfprintf_r+0x7fc>
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a28:	6011      	str	r1, [r2, #0]
 8005a2a:	e7f7      	b.n	8005a1c <_vfprintf_r+0x7ec>
 8005a2c:	066a      	lsls	r2, r5, #25
 8005a2e:	d5f9      	bpl.n	8005a24 <_vfprintf_r+0x7f4>
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005a36:	8011      	strh	r1, [r2, #0]
 8005a38:	e7f0      	b.n	8005a1c <_vfprintf_r+0x7ec>
 8005a3a:	f045 0510 	orr.w	r5, r5, #16
 8005a3e:	f015 0320 	ands.w	r3, r5, #32
 8005a42:	d022      	beq.n	8005a8a <_vfprintf_r+0x85a>
 8005a44:	3707      	adds	r7, #7
 8005a46:	f027 0707 	bic.w	r7, r7, #7
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	2300      	movs	r3, #0
 8005a56:	2200      	movs	r2, #0
 8005a58:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005a5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005a60:	f000 83e8 	beq.w	8006234 <_vfprintf_r+0x1004>
 8005a64:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8005a68:	9208      	str	r2, [sp, #32]
 8005a6a:	ea56 0207 	orrs.w	r2, r6, r7
 8005a6e:	f040 83e6 	bne.w	800623e <_vfprintf_r+0x100e>
 8005a72:	f1ba 0f00 	cmp.w	sl, #0
 8005a76:	f000 80a9 	beq.w	8005bcc <_vfprintf_r+0x99c>
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d075      	beq.n	8005b6a <_vfprintf_r+0x93a>
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	f000 8090 	beq.w	8005ba4 <_vfprintf_r+0x974>
 8005a84:	2600      	movs	r6, #0
 8005a86:	2700      	movs	r7, #0
 8005a88:	e3df      	b.n	800624a <_vfprintf_r+0x101a>
 8005a8a:	1d3a      	adds	r2, r7, #4
 8005a8c:	f015 0110 	ands.w	r1, r5, #16
 8005a90:	9204      	str	r2, [sp, #16]
 8005a92:	d002      	beq.n	8005a9a <_vfprintf_r+0x86a>
 8005a94:	683e      	ldr	r6, [r7, #0]
 8005a96:	2700      	movs	r7, #0
 8005a98:	e7dd      	b.n	8005a56 <_vfprintf_r+0x826>
 8005a9a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005a9e:	d0f9      	beq.n	8005a94 <_vfprintf_r+0x864>
 8005aa0:	883e      	ldrh	r6, [r7, #0]
 8005aa2:	2700      	movs	r7, #0
 8005aa4:	e7d6      	b.n	8005a54 <_vfprintf_r+0x824>
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	2330      	movs	r3, #48	; 0x30
 8005aac:	2278      	movs	r2, #120	; 0x78
 8005aae:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005ab2:	4b14      	ldr	r3, [pc, #80]	; (8005b04 <_vfprintf_r+0x8d4>)
 8005ab4:	683e      	ldr	r6, [r7, #0]
 8005ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8005ab8:	2700      	movs	r7, #0
 8005aba:	f045 0502 	orr.w	r5, r5, #2
 8005abe:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	9202      	str	r2, [sp, #8]
 8005ac6:	e7c6      	b.n	8005a56 <_vfprintf_r+0x826>
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	2600      	movs	r6, #0
 8005acc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	f8d7 9000 	ldr.w	r9, [r7]
 8005ad6:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005ada:	d00a      	beq.n	8005af2 <_vfprintf_r+0x8c2>
 8005adc:	4652      	mov	r2, sl
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4648      	mov	r0, r9
 8005ae2:	f7fa fb85 	bl	80001f0 <memchr>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f000 808c 	beq.w	8005c04 <_vfprintf_r+0x9d4>
 8005aec:	eba0 0a09 	sub.w	sl, r0, r9
 8005af0:	e5cb      	b.n	800568a <_vfprintf_r+0x45a>
 8005af2:	4648      	mov	r0, r9
 8005af4:	f7fa fb74 	bl	80001e0 <strlen>
 8005af8:	4682      	mov	sl, r0
 8005afa:	e5c6      	b.n	800568a <_vfprintf_r+0x45a>
 8005afc:	08008fc8 	.word	0x08008fc8
 8005b00:	08008fd8 	.word	0x08008fd8
 8005b04:	08008f95 	.word	0x08008f95
 8005b08:	f045 0510 	orr.w	r5, r5, #16
 8005b0c:	06ae      	lsls	r6, r5, #26
 8005b0e:	d509      	bpl.n	8005b24 <_vfprintf_r+0x8f4>
 8005b10:	3707      	adds	r7, #7
 8005b12:	f027 0707 	bic.w	r7, r7, #7
 8005b16:	f107 0308 	add.w	r3, r7, #8
 8005b1a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	2301      	movs	r3, #1
 8005b22:	e798      	b.n	8005a56 <_vfprintf_r+0x826>
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	f015 0f10 	tst.w	r5, #16
 8005b2a:	9304      	str	r3, [sp, #16]
 8005b2c:	d001      	beq.n	8005b32 <_vfprintf_r+0x902>
 8005b2e:	683e      	ldr	r6, [r7, #0]
 8005b30:	e002      	b.n	8005b38 <_vfprintf_r+0x908>
 8005b32:	0668      	lsls	r0, r5, #25
 8005b34:	d5fb      	bpl.n	8005b2e <_vfprintf_r+0x8fe>
 8005b36:	883e      	ldrh	r6, [r7, #0]
 8005b38:	2700      	movs	r7, #0
 8005b3a:	e7f1      	b.n	8005b20 <_vfprintf_r+0x8f0>
 8005b3c:	b10b      	cbz	r3, 8005b42 <_vfprintf_r+0x912>
 8005b3e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005b42:	4ba2      	ldr	r3, [pc, #648]	; (8005dcc <_vfprintf_r+0xb9c>)
 8005b44:	e4ca      	b.n	80054dc <_vfprintf_r+0x2ac>
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	f015 0f10 	tst.w	r5, #16
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	d001      	beq.n	8005b54 <_vfprintf_r+0x924>
 8005b50:	683e      	ldr	r6, [r7, #0]
 8005b52:	e002      	b.n	8005b5a <_vfprintf_r+0x92a>
 8005b54:	066a      	lsls	r2, r5, #25
 8005b56:	d5fb      	bpl.n	8005b50 <_vfprintf_r+0x920>
 8005b58:	883e      	ldrh	r6, [r7, #0]
 8005b5a:	2700      	movs	r7, #0
 8005b5c:	e4ca      	b.n	80054f4 <_vfprintf_r+0x2c4>
 8005b5e:	464b      	mov	r3, r9
 8005b60:	e374      	b.n	800624c <_vfprintf_r+0x101c>
 8005b62:	2f00      	cmp	r7, #0
 8005b64:	bf08      	it	eq
 8005b66:	2e0a      	cmpeq	r6, #10
 8005b68:	d205      	bcs.n	8005b76 <_vfprintf_r+0x946>
 8005b6a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8005b6e:	3630      	adds	r6, #48	; 0x30
 8005b70:	f809 6d41 	strb.w	r6, [r9, #-65]!
 8005b74:	e385      	b.n	8006282 <_vfprintf_r+0x1052>
 8005b76:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	220a      	movs	r2, #10
 8005b80:	2300      	movs	r3, #0
 8005b82:	f7fb f815 	bl	8000bb0 <__aeabi_uldivmod>
 8005b86:	3230      	adds	r2, #48	; 0x30
 8005b88:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4630      	mov	r0, r6
 8005b90:	4639      	mov	r1, r7
 8005b92:	220a      	movs	r2, #10
 8005b94:	f7fb f80c 	bl	8000bb0 <__aeabi_uldivmod>
 8005b98:	4606      	mov	r6, r0
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	ea56 0307 	orrs.w	r3, r6, r7
 8005ba0:	d1eb      	bne.n	8005b7a <_vfprintf_r+0x94a>
 8005ba2:	e36e      	b.n	8006282 <_vfprintf_r+0x1052>
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	2700      	movs	r7, #0
 8005ba8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005bac:	f006 030f 	and.w	r3, r6, #15
 8005bb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bb2:	5cd3      	ldrb	r3, [r2, r3]
 8005bb4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005bb8:	0933      	lsrs	r3, r6, #4
 8005bba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005bbe:	093a      	lsrs	r2, r7, #4
 8005bc0:	461e      	mov	r6, r3
 8005bc2:	4617      	mov	r7, r2
 8005bc4:	ea56 0307 	orrs.w	r3, r6, r7
 8005bc8:	d1f0      	bne.n	8005bac <_vfprintf_r+0x97c>
 8005bca:	e35a      	b.n	8006282 <_vfprintf_r+0x1052>
 8005bcc:	b93b      	cbnz	r3, 8005bde <_vfprintf_r+0x9ae>
 8005bce:	07e8      	lsls	r0, r5, #31
 8005bd0:	d505      	bpl.n	8005bde <_vfprintf_r+0x9ae>
 8005bd2:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8005bd6:	2330      	movs	r3, #48	; 0x30
 8005bd8:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8005bdc:	e351      	b.n	8006282 <_vfprintf_r+0x1052>
 8005bde:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005be2:	e34e      	b.n	8006282 <_vfprintf_r+0x1052>
 8005be4:	b10b      	cbz	r3, 8005bea <_vfprintf_r+0x9ba>
 8005be6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005bea:	9b02      	ldr	r3, [sp, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8302 	beq.w	80061f6 <_vfprintf_r+0xfc6>
 8005bf2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005bf6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005bfa:	2600      	movs	r6, #0
 8005bfc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005c00:	9704      	str	r7, [sp, #16]
 8005c02:	e4e9      	b.n	80055d8 <_vfprintf_r+0x3a8>
 8005c04:	4606      	mov	r6, r0
 8005c06:	e540      	b.n	800568a <_vfprintf_r+0x45a>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	6063      	str	r3, [r4, #4]
 8005c0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c0e:	3310      	adds	r3, #16
 8005c10:	9321      	str	r3, [sp, #132]	; 0x84
 8005c12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c14:	3301      	adds	r3, #1
 8005c16:	2b07      	cmp	r3, #7
 8005c18:	9320      	str	r3, [sp, #128]	; 0x80
 8005c1a:	dc02      	bgt.n	8005c22 <_vfprintf_r+0x9f2>
 8005c1c:	3408      	adds	r4, #8
 8005c1e:	3f10      	subs	r7, #16
 8005c20:	e61a      	b.n	8005858 <_vfprintf_r+0x628>
 8005c22:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c24:	4641      	mov	r1, r8
 8005c26:	4658      	mov	r0, fp
 8005c28:	f002 fe4f 	bl	80088ca <__sprint_r>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	f040 82ba 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005c32:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c34:	e7f3      	b.n	8005c1e <_vfprintf_r+0x9ee>
 8005c36:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c38:	4641      	mov	r1, r8
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	f002 fe45 	bl	80088ca <__sprint_r>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	f040 82b0 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005c46:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c48:	e616      	b.n	8005878 <_vfprintf_r+0x648>
 8005c4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	4658      	mov	r0, fp
 8005c50:	f002 fe3b 	bl	80088ca <__sprint_r>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	f040 82a6 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005c5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c5c:	e61e      	b.n	800589c <_vfprintf_r+0x66c>
 8005c5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c60:	4641      	mov	r1, r8
 8005c62:	4658      	mov	r0, fp
 8005c64:	f002 fe31 	bl	80088ca <__sprint_r>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f040 829c 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005c6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005c70:	e624      	b.n	80058bc <_vfprintf_r+0x68c>
 8005c72:	2210      	movs	r2, #16
 8005c74:	6062      	str	r2, [r4, #4]
 8005c76:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c78:	3210      	adds	r2, #16
 8005c7a:	9221      	str	r2, [sp, #132]	; 0x84
 8005c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c7e:	3201      	adds	r2, #1
 8005c80:	2a07      	cmp	r2, #7
 8005c82:	9220      	str	r2, [sp, #128]	; 0x80
 8005c84:	dc02      	bgt.n	8005c8c <_vfprintf_r+0xa5c>
 8005c86:	3408      	adds	r4, #8
 8005c88:	3f10      	subs	r7, #16
 8005c8a:	e620      	b.n	80058ce <_vfprintf_r+0x69e>
 8005c8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005c8e:	4641      	mov	r1, r8
 8005c90:	4658      	mov	r0, fp
 8005c92:	9314      	str	r3, [sp, #80]	; 0x50
 8005c94:	f002 fe19 	bl	80088ca <__sprint_r>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f040 8284 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005c9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ca2:	e7f1      	b.n	8005c88 <_vfprintf_r+0xa58>
 8005ca4:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	4658      	mov	r0, fp
 8005caa:	f002 fe0e 	bl	80088ca <__sprint_r>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f040 8279 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005cb4:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cb6:	e619      	b.n	80058ec <_vfprintf_r+0x6bc>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	6063      	str	r3, [r4, #4]
 8005cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	9321      	str	r3, [sp, #132]	; 0x84
 8005cc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	2b07      	cmp	r3, #7
 8005cc8:	9320      	str	r3, [sp, #128]	; 0x80
 8005cca:	dc02      	bgt.n	8005cd2 <_vfprintf_r+0xaa2>
 8005ccc:	3408      	adds	r4, #8
 8005cce:	3e10      	subs	r6, #16
 8005cd0:	e611      	b.n	80058f6 <_vfprintf_r+0x6c6>
 8005cd2:	aa1f      	add	r2, sp, #124	; 0x7c
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	4658      	mov	r0, fp
 8005cd8:	f002 fdf7 	bl	80088ca <__sprint_r>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f040 8262 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005ce2:	ac2c      	add	r4, sp, #176	; 0xb0
 8005ce4:	e7f3      	b.n	8005cce <_vfprintf_r+0xa9e>
 8005ce6:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ce8:	4641      	mov	r1, r8
 8005cea:	4658      	mov	r0, fp
 8005cec:	f002 fded 	bl	80088ca <__sprint_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f040 8258 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005cf6:	ac2c      	add	r4, sp, #176	; 0xb0
 8005cf8:	e60c      	b.n	8005914 <_vfprintf_r+0x6e4>
 8005cfa:	9b02      	ldr	r3, [sp, #8]
 8005cfc:	2b65      	cmp	r3, #101	; 0x65
 8005cfe:	f340 81ad 	ble.w	800605c <_vfprintf_r+0xe2c>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0a:	f7fa fee1 	bl	8000ad0 <__aeabi_dcmpeq>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d062      	beq.n	8005dd8 <_vfprintf_r+0xba8>
 8005d12:	4b2f      	ldr	r3, [pc, #188]	; (8005dd0 <_vfprintf_r+0xba0>)
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	2301      	movs	r3, #1
 8005d18:	6063      	str	r3, [r4, #4]
 8005d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	9321      	str	r3, [sp, #132]	; 0x84
 8005d20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d22:	3301      	adds	r3, #1
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	9320      	str	r3, [sp, #128]	; 0x80
 8005d28:	dc25      	bgt.n	8005d76 <_vfprintf_r+0xb46>
 8005d2a:	3408      	adds	r4, #8
 8005d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d2e:	9a03      	ldr	r2, [sp, #12]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	db02      	blt.n	8005d3a <_vfprintf_r+0xb0a>
 8005d34:	07ea      	lsls	r2, r5, #31
 8005d36:	f57f ae04 	bpl.w	8005942 <_vfprintf_r+0x712>
 8005d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	6063      	str	r3, [r4, #4]
 8005d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d46:	4413      	add	r3, r2
 8005d48:	9321      	str	r3, [sp, #132]	; 0x84
 8005d4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	2b07      	cmp	r3, #7
 8005d50:	9320      	str	r3, [sp, #128]	; 0x80
 8005d52:	dc1a      	bgt.n	8005d8a <_vfprintf_r+0xb5a>
 8005d54:	3408      	adds	r4, #8
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	1e5e      	subs	r6, r3, #1
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	f77f adf1 	ble.w	8005942 <_vfprintf_r+0x712>
 8005d60:	4f1c      	ldr	r7, [pc, #112]	; (8005dd4 <_vfprintf_r+0xba4>)
 8005d62:	f04f 0910 	mov.w	r9, #16
 8005d66:	2e10      	cmp	r6, #16
 8005d68:	6027      	str	r7, [r4, #0]
 8005d6a:	dc18      	bgt.n	8005d9e <_vfprintf_r+0xb6e>
 8005d6c:	6066      	str	r6, [r4, #4]
 8005d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d70:	441e      	add	r6, r3
 8005d72:	9621      	str	r6, [sp, #132]	; 0x84
 8005d74:	e5d6      	b.n	8005924 <_vfprintf_r+0x6f4>
 8005d76:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d78:	4641      	mov	r1, r8
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f002 fda5 	bl	80088ca <__sprint_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	f040 8210 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005d86:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d88:	e7d0      	b.n	8005d2c <_vfprintf_r+0xafc>
 8005d8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	4658      	mov	r0, fp
 8005d90:	f002 fd9b 	bl	80088ca <__sprint_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f040 8206 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005d9a:	ac2c      	add	r4, sp, #176	; 0xb0
 8005d9c:	e7db      	b.n	8005d56 <_vfprintf_r+0xb26>
 8005d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005da0:	f8c4 9004 	str.w	r9, [r4, #4]
 8005da4:	3310      	adds	r3, #16
 8005da6:	9321      	str	r3, [sp, #132]	; 0x84
 8005da8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005daa:	3301      	adds	r3, #1
 8005dac:	2b07      	cmp	r3, #7
 8005dae:	9320      	str	r3, [sp, #128]	; 0x80
 8005db0:	dc02      	bgt.n	8005db8 <_vfprintf_r+0xb88>
 8005db2:	3408      	adds	r4, #8
 8005db4:	3e10      	subs	r6, #16
 8005db6:	e7d6      	b.n	8005d66 <_vfprintf_r+0xb36>
 8005db8:	aa1f      	add	r2, sp, #124	; 0x7c
 8005dba:	4641      	mov	r1, r8
 8005dbc:	4658      	mov	r0, fp
 8005dbe:	f002 fd84 	bl	80088ca <__sprint_r>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f040 81ef 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005dc8:	ac2c      	add	r4, sp, #176	; 0xb0
 8005dca:	e7f3      	b.n	8005db4 <_vfprintf_r+0xb84>
 8005dcc:	08008f95 	.word	0x08008f95
 8005dd0:	08008fa6 	.word	0x08008fa6
 8005dd4:	08008fd8 	.word	0x08008fd8
 8005dd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dc7a      	bgt.n	8005ed4 <_vfprintf_r+0xca4>
 8005dde:	4b9d      	ldr	r3, [pc, #628]	; (8006054 <_vfprintf_r+0xe24>)
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	2301      	movs	r3, #1
 8005de4:	6063      	str	r3, [r4, #4]
 8005de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005de8:	3301      	adds	r3, #1
 8005dea:	9321      	str	r3, [sp, #132]	; 0x84
 8005dec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005dee:	3301      	adds	r3, #1
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	9320      	str	r3, [sp, #128]	; 0x80
 8005df4:	dc44      	bgt.n	8005e80 <_vfprintf_r+0xc50>
 8005df6:	3408      	adds	r4, #8
 8005df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dfa:	b923      	cbnz	r3, 8005e06 <_vfprintf_r+0xbd6>
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	b913      	cbnz	r3, 8005e06 <_vfprintf_r+0xbd6>
 8005e00:	07eb      	lsls	r3, r5, #31
 8005e02:	f57f ad9e 	bpl.w	8005942 <_vfprintf_r+0x712>
 8005e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0c:	6063      	str	r3, [r4, #4]
 8005e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e12:	4413      	add	r3, r2
 8005e14:	9321      	str	r3, [sp, #132]	; 0x84
 8005e16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e18:	3301      	adds	r3, #1
 8005e1a:	2b07      	cmp	r3, #7
 8005e1c:	9320      	str	r3, [sp, #128]	; 0x80
 8005e1e:	dc39      	bgt.n	8005e94 <_vfprintf_r+0xc64>
 8005e20:	f104 0308 	add.w	r3, r4, #8
 8005e24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005e26:	2e00      	cmp	r6, #0
 8005e28:	da19      	bge.n	8005e5e <_vfprintf_r+0xc2e>
 8005e2a:	4f8b      	ldr	r7, [pc, #556]	; (8006058 <_vfprintf_r+0xe28>)
 8005e2c:	4276      	negs	r6, r6
 8005e2e:	2410      	movs	r4, #16
 8005e30:	2e10      	cmp	r6, #16
 8005e32:	601f      	str	r7, [r3, #0]
 8005e34:	dc38      	bgt.n	8005ea8 <_vfprintf_r+0xc78>
 8005e36:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e38:	605e      	str	r6, [r3, #4]
 8005e3a:	4416      	add	r6, r2
 8005e3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e3e:	9621      	str	r6, [sp, #132]	; 0x84
 8005e40:	3201      	adds	r2, #1
 8005e42:	2a07      	cmp	r2, #7
 8005e44:	f103 0308 	add.w	r3, r3, #8
 8005e48:	9220      	str	r2, [sp, #128]	; 0x80
 8005e4a:	dd08      	ble.n	8005e5e <_vfprintf_r+0xc2e>
 8005e4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e4e:	4641      	mov	r1, r8
 8005e50:	4658      	mov	r0, fp
 8005e52:	f002 fd3a 	bl	80088ca <__sprint_r>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f040 81a5 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005e5c:	ab2c      	add	r3, sp, #176	; 0xb0
 8005e5e:	9a03      	ldr	r2, [sp, #12]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	9903      	ldr	r1, [sp, #12]
 8005e64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e66:	f8c3 9000 	str.w	r9, [r3]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	9221      	str	r2, [sp, #132]	; 0x84
 8005e6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e70:	3201      	adds	r2, #1
 8005e72:	2a07      	cmp	r2, #7
 8005e74:	9220      	str	r2, [sp, #128]	; 0x80
 8005e76:	f73f ad5b 	bgt.w	8005930 <_vfprintf_r+0x700>
 8005e7a:	f103 0408 	add.w	r4, r3, #8
 8005e7e:	e560      	b.n	8005942 <_vfprintf_r+0x712>
 8005e80:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e82:	4641      	mov	r1, r8
 8005e84:	4658      	mov	r0, fp
 8005e86:	f002 fd20 	bl	80088ca <__sprint_r>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	f040 818b 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005e90:	ac2c      	add	r4, sp, #176	; 0xb0
 8005e92:	e7b1      	b.n	8005df8 <_vfprintf_r+0xbc8>
 8005e94:	aa1f      	add	r2, sp, #124	; 0x7c
 8005e96:	4641      	mov	r1, r8
 8005e98:	4658      	mov	r0, fp
 8005e9a:	f002 fd16 	bl	80088ca <__sprint_r>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f040 8181 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005ea4:	ab2c      	add	r3, sp, #176	; 0xb0
 8005ea6:	e7bd      	b.n	8005e24 <_vfprintf_r+0xbf4>
 8005ea8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005eaa:	605c      	str	r4, [r3, #4]
 8005eac:	3210      	adds	r2, #16
 8005eae:	9221      	str	r2, [sp, #132]	; 0x84
 8005eb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005eb2:	3201      	adds	r2, #1
 8005eb4:	2a07      	cmp	r2, #7
 8005eb6:	9220      	str	r2, [sp, #128]	; 0x80
 8005eb8:	dc02      	bgt.n	8005ec0 <_vfprintf_r+0xc90>
 8005eba:	3308      	adds	r3, #8
 8005ebc:	3e10      	subs	r6, #16
 8005ebe:	e7b7      	b.n	8005e30 <_vfprintf_r+0xc00>
 8005ec0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ec2:	4641      	mov	r1, r8
 8005ec4:	4658      	mov	r0, fp
 8005ec6:	f002 fd00 	bl	80088ca <__sprint_r>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f040 816b 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005ed0:	ab2c      	add	r3, sp, #176	; 0xb0
 8005ed2:	e7f3      	b.n	8005ebc <_vfprintf_r+0xc8c>
 8005ed4:	9b08      	ldr	r3, [sp, #32]
 8005ed6:	9a03      	ldr	r2, [sp, #12]
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	bfa8      	it	ge
 8005edc:	4613      	movge	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	461e      	mov	r6, r3
 8005ee2:	dd0b      	ble.n	8005efc <_vfprintf_r+0xccc>
 8005ee4:	6063      	str	r3, [r4, #4]
 8005ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee8:	f8c4 9000 	str.w	r9, [r4]
 8005eec:	4433      	add	r3, r6
 8005eee:	9321      	str	r3, [sp, #132]	; 0x84
 8005ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	2b07      	cmp	r3, #7
 8005ef6:	9320      	str	r3, [sp, #128]	; 0x80
 8005ef8:	dc62      	bgt.n	8005fc0 <_vfprintf_r+0xd90>
 8005efa:	3408      	adds	r4, #8
 8005efc:	9b08      	ldr	r3, [sp, #32]
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	bfa8      	it	ge
 8005f02:	1b9b      	subge	r3, r3, r6
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	461e      	mov	r6, r3
 8005f08:	dd0f      	ble.n	8005f2a <_vfprintf_r+0xcfa>
 8005f0a:	4f53      	ldr	r7, [pc, #332]	; (8006058 <_vfprintf_r+0xe28>)
 8005f0c:	f04f 0a10 	mov.w	sl, #16
 8005f10:	2e10      	cmp	r6, #16
 8005f12:	6027      	str	r7, [r4, #0]
 8005f14:	dc5e      	bgt.n	8005fd4 <_vfprintf_r+0xda4>
 8005f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f18:	6066      	str	r6, [r4, #4]
 8005f1a:	441e      	add	r6, r3
 8005f1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f1e:	9621      	str	r6, [sp, #132]	; 0x84
 8005f20:	3301      	adds	r3, #1
 8005f22:	2b07      	cmp	r3, #7
 8005f24:	9320      	str	r3, [sp, #128]	; 0x80
 8005f26:	dc6c      	bgt.n	8006002 <_vfprintf_r+0xdd2>
 8005f28:	3408      	adds	r4, #8
 8005f2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f2c:	9a03      	ldr	r2, [sp, #12]
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	db01      	blt.n	8005f36 <_vfprintf_r+0xd06>
 8005f32:	07ef      	lsls	r7, r5, #31
 8005f34:	d50d      	bpl.n	8005f52 <_vfprintf_r+0xd22>
 8005f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f42:	4413      	add	r3, r2
 8005f44:	9321      	str	r3, [sp, #132]	; 0x84
 8005f46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f48:	3301      	adds	r3, #1
 8005f4a:	2b07      	cmp	r3, #7
 8005f4c:	9320      	str	r3, [sp, #128]	; 0x80
 8005f4e:	dc62      	bgt.n	8006016 <_vfprintf_r+0xde6>
 8005f50:	3408      	adds	r4, #8
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	9a08      	ldr	r2, [sp, #32]
 8005f56:	1a9e      	subs	r6, r3, r2
 8005f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f5a:	9a03      	ldr	r2, [sp, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	429e      	cmp	r6, r3
 8005f60:	bfa8      	it	ge
 8005f62:	461e      	movge	r6, r3
 8005f64:	2e00      	cmp	r6, #0
 8005f66:	dd0c      	ble.n	8005f82 <_vfprintf_r+0xd52>
 8005f68:	9b08      	ldr	r3, [sp, #32]
 8005f6a:	444b      	add	r3, r9
 8005f6c:	e884 0048 	stmia.w	r4, {r3, r6}
 8005f70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f72:	4433      	add	r3, r6
 8005f74:	9321      	str	r3, [sp, #132]	; 0x84
 8005f76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005f78:	3301      	adds	r3, #1
 8005f7a:	2b07      	cmp	r3, #7
 8005f7c:	9320      	str	r3, [sp, #128]	; 0x80
 8005f7e:	dc54      	bgt.n	800602a <_vfprintf_r+0xdfa>
 8005f80:	3408      	adds	r4, #8
 8005f82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f84:	9a03      	ldr	r2, [sp, #12]
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	eba2 0303 	sub.w	r3, r2, r3
 8005f8c:	bfac      	ite	ge
 8005f8e:	1b9e      	subge	r6, r3, r6
 8005f90:	461e      	movlt	r6, r3
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	f77f acd5 	ble.w	8005942 <_vfprintf_r+0x712>
 8005f98:	4f2f      	ldr	r7, [pc, #188]	; (8006058 <_vfprintf_r+0xe28>)
 8005f9a:	f04f 0910 	mov.w	r9, #16
 8005f9e:	2e10      	cmp	r6, #16
 8005fa0:	6027      	str	r7, [r4, #0]
 8005fa2:	f77f aee3 	ble.w	8005d6c <_vfprintf_r+0xb3c>
 8005fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa8:	f8c4 9004 	str.w	r9, [r4, #4]
 8005fac:	3310      	adds	r3, #16
 8005fae:	9321      	str	r3, [sp, #132]	; 0x84
 8005fb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	2b07      	cmp	r3, #7
 8005fb6:	9320      	str	r3, [sp, #128]	; 0x80
 8005fb8:	dc41      	bgt.n	800603e <_vfprintf_r+0xe0e>
 8005fba:	3408      	adds	r4, #8
 8005fbc:	3e10      	subs	r6, #16
 8005fbe:	e7ee      	b.n	8005f9e <_vfprintf_r+0xd6e>
 8005fc0:	aa1f      	add	r2, sp, #124	; 0x7c
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	4658      	mov	r0, fp
 8005fc6:	f002 fc80 	bl	80088ca <__sprint_r>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f040 80eb 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005fd0:	ac2c      	add	r4, sp, #176	; 0xb0
 8005fd2:	e793      	b.n	8005efc <_vfprintf_r+0xccc>
 8005fd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fd6:	f8c4 a004 	str.w	sl, [r4, #4]
 8005fda:	3310      	adds	r3, #16
 8005fdc:	9321      	str	r3, [sp, #132]	; 0x84
 8005fde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	2b07      	cmp	r3, #7
 8005fe4:	9320      	str	r3, [sp, #128]	; 0x80
 8005fe6:	dc02      	bgt.n	8005fee <_vfprintf_r+0xdbe>
 8005fe8:	3408      	adds	r4, #8
 8005fea:	3e10      	subs	r6, #16
 8005fec:	e790      	b.n	8005f10 <_vfprintf_r+0xce0>
 8005fee:	aa1f      	add	r2, sp, #124	; 0x7c
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4658      	mov	r0, fp
 8005ff4:	f002 fc69 	bl	80088ca <__sprint_r>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f040 80d4 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8005ffe:	ac2c      	add	r4, sp, #176	; 0xb0
 8006000:	e7f3      	b.n	8005fea <_vfprintf_r+0xdba>
 8006002:	aa1f      	add	r2, sp, #124	; 0x7c
 8006004:	4641      	mov	r1, r8
 8006006:	4658      	mov	r0, fp
 8006008:	f002 fc5f 	bl	80088ca <__sprint_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 80ca 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8006012:	ac2c      	add	r4, sp, #176	; 0xb0
 8006014:	e789      	b.n	8005f2a <_vfprintf_r+0xcfa>
 8006016:	aa1f      	add	r2, sp, #124	; 0x7c
 8006018:	4641      	mov	r1, r8
 800601a:	4658      	mov	r0, fp
 800601c:	f002 fc55 	bl	80088ca <__sprint_r>
 8006020:	2800      	cmp	r0, #0
 8006022:	f040 80c0 	bne.w	80061a6 <_vfprintf_r+0xf76>
 8006026:	ac2c      	add	r4, sp, #176	; 0xb0
 8006028:	e793      	b.n	8005f52 <_vfprintf_r+0xd22>
 800602a:	aa1f      	add	r2, sp, #124	; 0x7c
 800602c:	4641      	mov	r1, r8
 800602e:	4658      	mov	r0, fp
 8006030:	f002 fc4b 	bl	80088ca <__sprint_r>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 80b6 	bne.w	80061a6 <_vfprintf_r+0xf76>
 800603a:	ac2c      	add	r4, sp, #176	; 0xb0
 800603c:	e7a1      	b.n	8005f82 <_vfprintf_r+0xd52>
 800603e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006040:	4641      	mov	r1, r8
 8006042:	4658      	mov	r0, fp
 8006044:	f002 fc41 	bl	80088ca <__sprint_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 80ac 	bne.w	80061a6 <_vfprintf_r+0xf76>
 800604e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006050:	e7b4      	b.n	8005fbc <_vfprintf_r+0xd8c>
 8006052:	bf00      	nop
 8006054:	08008fa6 	.word	0x08008fa6
 8006058:	08008fd8 	.word	0x08008fd8
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	2b01      	cmp	r3, #1
 8006060:	dc01      	bgt.n	8006066 <_vfprintf_r+0xe36>
 8006062:	07ee      	lsls	r6, r5, #31
 8006064:	d576      	bpl.n	8006154 <_vfprintf_r+0xf24>
 8006066:	2301      	movs	r3, #1
 8006068:	6063      	str	r3, [r4, #4]
 800606a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800606c:	f8c4 9000 	str.w	r9, [r4]
 8006070:	3301      	adds	r3, #1
 8006072:	9321      	str	r3, [sp, #132]	; 0x84
 8006074:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006076:	3301      	adds	r3, #1
 8006078:	2b07      	cmp	r3, #7
 800607a:	9320      	str	r3, [sp, #128]	; 0x80
 800607c:	dc36      	bgt.n	80060ec <_vfprintf_r+0xebc>
 800607e:	3408      	adds	r4, #8
 8006080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800608a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800608c:	4413      	add	r3, r2
 800608e:	9321      	str	r3, [sp, #132]	; 0x84
 8006090:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006092:	3301      	adds	r3, #1
 8006094:	2b07      	cmp	r3, #7
 8006096:	9320      	str	r3, [sp, #128]	; 0x80
 8006098:	dc31      	bgt.n	80060fe <_vfprintf_r+0xece>
 800609a:	3408      	adds	r4, #8
 800609c:	2300      	movs	r3, #0
 800609e:	2200      	movs	r2, #0
 80060a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060a4:	f7fa fd14 	bl	8000ad0 <__aeabi_dcmpeq>
 80060a8:	9b03      	ldr	r3, [sp, #12]
 80060aa:	1e5e      	subs	r6, r3, #1
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d12f      	bne.n	8006110 <_vfprintf_r+0xee0>
 80060b0:	f109 0301 	add.w	r3, r9, #1
 80060b4:	e884 0048 	stmia.w	r4, {r3, r6}
 80060b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ba:	9a03      	ldr	r2, [sp, #12]
 80060bc:	3b01      	subs	r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	9321      	str	r3, [sp, #132]	; 0x84
 80060c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060c4:	3301      	adds	r3, #1
 80060c6:	2b07      	cmp	r3, #7
 80060c8:	9320      	str	r3, [sp, #128]	; 0x80
 80060ca:	dd4a      	ble.n	8006162 <_vfprintf_r+0xf32>
 80060cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80060ce:	4641      	mov	r1, r8
 80060d0:	4658      	mov	r0, fp
 80060d2:	f002 fbfa 	bl	80088ca <__sprint_r>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d165      	bne.n	80061a6 <_vfprintf_r+0xf76>
 80060da:	ac2c      	add	r4, sp, #176	; 0xb0
 80060dc:	ab1b      	add	r3, sp, #108	; 0x6c
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060e2:	6063      	str	r3, [r4, #4]
 80060e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060e8:	4413      	add	r3, r2
 80060ea:	e41a      	b.n	8005922 <_vfprintf_r+0x6f2>
 80060ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80060ee:	4641      	mov	r1, r8
 80060f0:	4658      	mov	r0, fp
 80060f2:	f002 fbea 	bl	80088ca <__sprint_r>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d155      	bne.n	80061a6 <_vfprintf_r+0xf76>
 80060fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80060fc:	e7c0      	b.n	8006080 <_vfprintf_r+0xe50>
 80060fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8006100:	4641      	mov	r1, r8
 8006102:	4658      	mov	r0, fp
 8006104:	f002 fbe1 	bl	80088ca <__sprint_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	d14c      	bne.n	80061a6 <_vfprintf_r+0xf76>
 800610c:	ac2c      	add	r4, sp, #176	; 0xb0
 800610e:	e7c5      	b.n	800609c <_vfprintf_r+0xe6c>
 8006110:	2e00      	cmp	r6, #0
 8006112:	dde3      	ble.n	80060dc <_vfprintf_r+0xeac>
 8006114:	4f60      	ldr	r7, [pc, #384]	; (8006298 <_vfprintf_r+0x1068>)
 8006116:	f04f 0910 	mov.w	r9, #16
 800611a:	2e10      	cmp	r6, #16
 800611c:	6027      	str	r7, [r4, #0]
 800611e:	dc04      	bgt.n	800612a <_vfprintf_r+0xefa>
 8006120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006122:	6066      	str	r6, [r4, #4]
 8006124:	441e      	add	r6, r3
 8006126:	9621      	str	r6, [sp, #132]	; 0x84
 8006128:	e7cb      	b.n	80060c2 <_vfprintf_r+0xe92>
 800612a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800612c:	f8c4 9004 	str.w	r9, [r4, #4]
 8006130:	3310      	adds	r3, #16
 8006132:	9321      	str	r3, [sp, #132]	; 0x84
 8006134:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006136:	3301      	adds	r3, #1
 8006138:	2b07      	cmp	r3, #7
 800613a:	9320      	str	r3, [sp, #128]	; 0x80
 800613c:	dc02      	bgt.n	8006144 <_vfprintf_r+0xf14>
 800613e:	3408      	adds	r4, #8
 8006140:	3e10      	subs	r6, #16
 8006142:	e7ea      	b.n	800611a <_vfprintf_r+0xeea>
 8006144:	aa1f      	add	r2, sp, #124	; 0x7c
 8006146:	4641      	mov	r1, r8
 8006148:	4658      	mov	r0, fp
 800614a:	f002 fbbe 	bl	80088ca <__sprint_r>
 800614e:	bb50      	cbnz	r0, 80061a6 <_vfprintf_r+0xf76>
 8006150:	ac2c      	add	r4, sp, #176	; 0xb0
 8006152:	e7f5      	b.n	8006140 <_vfprintf_r+0xf10>
 8006154:	2301      	movs	r3, #1
 8006156:	6063      	str	r3, [r4, #4]
 8006158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615a:	f8c4 9000 	str.w	r9, [r4]
 800615e:	3301      	adds	r3, #1
 8006160:	e7ae      	b.n	80060c0 <_vfprintf_r+0xe90>
 8006162:	3408      	adds	r4, #8
 8006164:	e7ba      	b.n	80060dc <_vfprintf_r+0xeac>
 8006166:	3408      	adds	r4, #8
 8006168:	f7ff bbeb 	b.w	8005942 <_vfprintf_r+0x712>
 800616c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006170:	1a9d      	subs	r5, r3, r2
 8006172:	2d00      	cmp	r5, #0
 8006174:	f77f abe8 	ble.w	8005948 <_vfprintf_r+0x718>
 8006178:	2610      	movs	r6, #16
 800617a:	4b48      	ldr	r3, [pc, #288]	; (800629c <_vfprintf_r+0x106c>)
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	2d10      	cmp	r5, #16
 8006180:	dc24      	bgt.n	80061cc <_vfprintf_r+0xf9c>
 8006182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006184:	6065      	str	r5, [r4, #4]
 8006186:	441d      	add	r5, r3
 8006188:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800618a:	9521      	str	r5, [sp, #132]	; 0x84
 800618c:	3301      	adds	r3, #1
 800618e:	2b07      	cmp	r3, #7
 8006190:	9320      	str	r3, [sp, #128]	; 0x80
 8006192:	f77f abd9 	ble.w	8005948 <_vfprintf_r+0x718>
 8006196:	aa1f      	add	r2, sp, #124	; 0x7c
 8006198:	4641      	mov	r1, r8
 800619a:	4658      	mov	r0, fp
 800619c:	f002 fb95 	bl	80088ca <__sprint_r>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	f43f abd1 	beq.w	8005948 <_vfprintf_r+0x718>
 80061a6:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80061aa:	07d9      	lsls	r1, r3, #31
 80061ac:	d407      	bmi.n	80061be <_vfprintf_r+0xf8e>
 80061ae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80061b2:	059a      	lsls	r2, r3, #22
 80061b4:	d403      	bmi.n	80061be <_vfprintf_r+0xf8e>
 80061b6:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80061ba:	f001 fbb4 	bl	8007926 <__retarget_lock_release_recursive>
 80061be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80061c2:	065b      	lsls	r3, r3, #25
 80061c4:	f57f a8af 	bpl.w	8005326 <_vfprintf_r+0xf6>
 80061c8:	f7ff b882 	b.w	80052d0 <_vfprintf_r+0xa0>
 80061cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ce:	6066      	str	r6, [r4, #4]
 80061d0:	3310      	adds	r3, #16
 80061d2:	9321      	str	r3, [sp, #132]	; 0x84
 80061d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061d6:	3301      	adds	r3, #1
 80061d8:	2b07      	cmp	r3, #7
 80061da:	9320      	str	r3, [sp, #128]	; 0x80
 80061dc:	dc02      	bgt.n	80061e4 <_vfprintf_r+0xfb4>
 80061de:	3408      	adds	r4, #8
 80061e0:	3d10      	subs	r5, #16
 80061e2:	e7ca      	b.n	800617a <_vfprintf_r+0xf4a>
 80061e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80061e6:	4641      	mov	r1, r8
 80061e8:	4658      	mov	r0, fp
 80061ea:	f002 fb6e 	bl	80088ca <__sprint_r>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d1d9      	bne.n	80061a6 <_vfprintf_r+0xf76>
 80061f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80061f4:	e7f4      	b.n	80061e0 <_vfprintf_r+0xfb0>
 80061f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061f8:	b913      	cbnz	r3, 8006200 <_vfprintf_r+0xfd0>
 80061fa:	2300      	movs	r3, #0
 80061fc:	9320      	str	r3, [sp, #128]	; 0x80
 80061fe:	e7d2      	b.n	80061a6 <_vfprintf_r+0xf76>
 8006200:	aa1f      	add	r2, sp, #124	; 0x7c
 8006202:	4641      	mov	r1, r8
 8006204:	4658      	mov	r0, fp
 8006206:	f002 fb60 	bl	80088ca <__sprint_r>
 800620a:	2800      	cmp	r0, #0
 800620c:	d0f5      	beq.n	80061fa <_vfprintf_r+0xfca>
 800620e:	e7ca      	b.n	80061a6 <_vfprintf_r+0xf76>
 8006210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006214:	4610      	mov	r0, r2
 8006216:	4619      	mov	r1, r3
 8006218:	f7fa fc8c 	bl	8000b34 <__aeabi_dcmpun>
 800621c:	2800      	cmp	r0, #0
 800621e:	f43f aa36 	beq.w	800568e <_vfprintf_r+0x45e>
 8006222:	4b1f      	ldr	r3, [pc, #124]	; (80062a0 <_vfprintf_r+0x1070>)
 8006224:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <_vfprintf_r+0x1074>)
 8006226:	f7ff ba26 	b.w	8005676 <_vfprintf_r+0x446>
 800622a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800622c:	1a1b      	subs	r3, r3, r0
 800622e:	9303      	str	r3, [sp, #12]
 8006230:	f7ff baa9 	b.w	8005786 <_vfprintf_r+0x556>
 8006234:	ea56 0207 	orrs.w	r2, r6, r7
 8006238:	9508      	str	r5, [sp, #32]
 800623a:	f43f ac1e 	beq.w	8005a7a <_vfprintf_r+0x84a>
 800623e:	2b01      	cmp	r3, #1
 8006240:	f43f ac8f 	beq.w	8005b62 <_vfprintf_r+0x932>
 8006244:	2b02      	cmp	r3, #2
 8006246:	f43f acaf 	beq.w	8005ba8 <_vfprintf_r+0x978>
 800624a:	ab2c      	add	r3, sp, #176	; 0xb0
 800624c:	08f1      	lsrs	r1, r6, #3
 800624e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006252:	08f8      	lsrs	r0, r7, #3
 8006254:	f006 0207 	and.w	r2, r6, #7
 8006258:	4607      	mov	r7, r0
 800625a:	460e      	mov	r6, r1
 800625c:	3230      	adds	r2, #48	; 0x30
 800625e:	ea56 0107 	orrs.w	r1, r6, r7
 8006262:	f103 39ff 	add.w	r9, r3, #4294967295
 8006266:	f803 2c01 	strb.w	r2, [r3, #-1]
 800626a:	f47f ac78 	bne.w	8005b5e <_vfprintf_r+0x92e>
 800626e:	9908      	ldr	r1, [sp, #32]
 8006270:	07cd      	lsls	r5, r1, #31
 8006272:	d506      	bpl.n	8006282 <_vfprintf_r+0x1052>
 8006274:	2a30      	cmp	r2, #48	; 0x30
 8006276:	d004      	beq.n	8006282 <_vfprintf_r+0x1052>
 8006278:	2230      	movs	r2, #48	; 0x30
 800627a:	f809 2c01 	strb.w	r2, [r9, #-1]
 800627e:	f1a3 0902 	sub.w	r9, r3, #2
 8006282:	4656      	mov	r6, sl
 8006284:	2300      	movs	r3, #0
 8006286:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 800628a:	9d08      	ldr	r5, [sp, #32]
 800628c:	9308      	str	r3, [sp, #32]
 800628e:	ebaa 0a09 	sub.w	sl, sl, r9
 8006292:	f7ff bac6 	b.w	8005822 <_vfprintf_r+0x5f2>
 8006296:	bf00      	nop
 8006298:	08008fd8 	.word	0x08008fd8
 800629c:	08008fc8 	.word	0x08008fc8
 80062a0:	08008f7c 	.word	0x08008f7c
 80062a4:	08008f80 	.word	0x08008f80

080062a8 <__sbprintf>:
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	460c      	mov	r4, r1
 80062ac:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80062b0:	461f      	mov	r7, r3
 80062b2:	8989      	ldrh	r1, [r1, #12]
 80062b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062b6:	9319      	str	r3, [sp, #100]	; 0x64
 80062b8:	89e3      	ldrh	r3, [r4, #14]
 80062ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80062be:	f021 0102 	bic.w	r1, r1, #2
 80062c2:	6a23      	ldr	r3, [r4, #32]
 80062c4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80062c8:	9308      	str	r3, [sp, #32]
 80062ca:	a91a      	add	r1, sp, #104	; 0x68
 80062cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062ce:	930a      	str	r3, [sp, #40]	; 0x28
 80062d0:	4615      	mov	r5, r2
 80062d2:	2300      	movs	r3, #0
 80062d4:	4606      	mov	r6, r0
 80062d6:	9100      	str	r1, [sp, #0]
 80062d8:	9104      	str	r1, [sp, #16]
 80062da:	a816      	add	r0, sp, #88	; 0x58
 80062dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062e0:	9102      	str	r1, [sp, #8]
 80062e2:	9105      	str	r1, [sp, #20]
 80062e4:	9306      	str	r3, [sp, #24]
 80062e6:	f001 fb1b 	bl	8007920 <__retarget_lock_init_recursive>
 80062ea:	462a      	mov	r2, r5
 80062ec:	463b      	mov	r3, r7
 80062ee:	4669      	mov	r1, sp
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7fe ff9d 	bl	8005230 <_vfprintf_r>
 80062f6:	1e05      	subs	r5, r0, #0
 80062f8:	db07      	blt.n	800630a <__sbprintf+0x62>
 80062fa:	4669      	mov	r1, sp
 80062fc:	4630      	mov	r0, r6
 80062fe:	f000 ff6f 	bl	80071e0 <_fflush_r>
 8006302:	2800      	cmp	r0, #0
 8006304:	bf18      	it	ne
 8006306:	f04f 35ff 	movne.w	r5, #4294967295
 800630a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800630e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006310:	065b      	lsls	r3, r3, #25
 8006312:	bf42      	ittt	mi
 8006314:	89a3      	ldrhmi	r3, [r4, #12]
 8006316:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800631a:	81a3      	strhmi	r3, [r4, #12]
 800631c:	f001 fb01 	bl	8007922 <__retarget_lock_close_recursive>
 8006320:	4628      	mov	r0, r5
 8006322:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8006326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006328 <__swsetup_r>:
 8006328:	4b32      	ldr	r3, [pc, #200]	; (80063f4 <__swsetup_r+0xcc>)
 800632a:	b570      	push	{r4, r5, r6, lr}
 800632c:	681d      	ldr	r5, [r3, #0]
 800632e:	4606      	mov	r6, r0
 8006330:	460c      	mov	r4, r1
 8006332:	b125      	cbz	r5, 800633e <__swsetup_r+0x16>
 8006334:	69ab      	ldr	r3, [r5, #24]
 8006336:	b913      	cbnz	r3, 800633e <__swsetup_r+0x16>
 8006338:	4628      	mov	r0, r5
 800633a:	f000 ffe5 	bl	8007308 <__sinit>
 800633e:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <__swsetup_r+0xd0>)
 8006340:	429c      	cmp	r4, r3
 8006342:	d10f      	bne.n	8006364 <__swsetup_r+0x3c>
 8006344:	686c      	ldr	r4, [r5, #4]
 8006346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800634a:	b29a      	uxth	r2, r3
 800634c:	0715      	lsls	r5, r2, #28
 800634e:	d42c      	bmi.n	80063aa <__swsetup_r+0x82>
 8006350:	06d0      	lsls	r0, r2, #27
 8006352:	d411      	bmi.n	8006378 <__swsetup_r+0x50>
 8006354:	2209      	movs	r2, #9
 8006356:	6032      	str	r2, [r6, #0]
 8006358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	4b25      	ldr	r3, [pc, #148]	; (80063fc <__swsetup_r+0xd4>)
 8006366:	429c      	cmp	r4, r3
 8006368:	d101      	bne.n	800636e <__swsetup_r+0x46>
 800636a:	68ac      	ldr	r4, [r5, #8]
 800636c:	e7eb      	b.n	8006346 <__swsetup_r+0x1e>
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <__swsetup_r+0xd8>)
 8006370:	429c      	cmp	r4, r3
 8006372:	bf08      	it	eq
 8006374:	68ec      	ldreq	r4, [r5, #12]
 8006376:	e7e6      	b.n	8006346 <__swsetup_r+0x1e>
 8006378:	0751      	lsls	r1, r2, #29
 800637a:	d512      	bpl.n	80063a2 <__swsetup_r+0x7a>
 800637c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800637e:	b141      	cbz	r1, 8006392 <__swsetup_r+0x6a>
 8006380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006384:	4299      	cmp	r1, r3
 8006386:	d002      	beq.n	800638e <__swsetup_r+0x66>
 8006388:	4630      	mov	r0, r6
 800638a:	f001 f893 	bl	80074b4 <_free_r>
 800638e:	2300      	movs	r3, #0
 8006390:	6363      	str	r3, [r4, #52]	; 0x34
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006398:	81a3      	strh	r3, [r4, #12]
 800639a:	2300      	movs	r3, #0
 800639c:	6063      	str	r3, [r4, #4]
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f043 0308 	orr.w	r3, r3, #8
 80063a8:	81a3      	strh	r3, [r4, #12]
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	b94b      	cbnz	r3, 80063c2 <__swsetup_r+0x9a>
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d003      	beq.n	80063c2 <__swsetup_r+0x9a>
 80063ba:	4621      	mov	r1, r4
 80063bc:	4630      	mov	r0, r6
 80063be:	f001 fadf 	bl	8007980 <__smakebuf_r>
 80063c2:	89a2      	ldrh	r2, [r4, #12]
 80063c4:	f012 0301 	ands.w	r3, r2, #1
 80063c8:	d00c      	beq.n	80063e4 <__swsetup_r+0xbc>
 80063ca:	2300      	movs	r3, #0
 80063cc:	60a3      	str	r3, [r4, #8]
 80063ce:	6963      	ldr	r3, [r4, #20]
 80063d0:	425b      	negs	r3, r3
 80063d2:	61a3      	str	r3, [r4, #24]
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	b953      	cbnz	r3, 80063ee <__swsetup_r+0xc6>
 80063d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80063e0:	d1ba      	bne.n	8006358 <__swsetup_r+0x30>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	0792      	lsls	r2, r2, #30
 80063e6:	bf58      	it	pl
 80063e8:	6963      	ldrpl	r3, [r4, #20]
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	e7f2      	b.n	80063d4 <__swsetup_r+0xac>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e7f7      	b.n	80063e2 <__swsetup_r+0xba>
 80063f2:	bf00      	nop
 80063f4:	2000001c 	.word	0x2000001c
 80063f8:	08009018 	.word	0x08009018
 80063fc:	08009038 	.word	0x08009038
 8006400:	08008ff8 	.word	0x08008ff8

08006404 <quorem>:
 8006404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	6903      	ldr	r3, [r0, #16]
 800640a:	690c      	ldr	r4, [r1, #16]
 800640c:	429c      	cmp	r4, r3
 800640e:	4680      	mov	r8, r0
 8006410:	f300 8082 	bgt.w	8006518 <quorem+0x114>
 8006414:	3c01      	subs	r4, #1
 8006416:	f101 0714 	add.w	r7, r1, #20
 800641a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800641e:	f100 0614 	add.w	r6, r0, #20
 8006422:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006426:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800642a:	eb06 030e 	add.w	r3, r6, lr
 800642e:	3501      	adds	r5, #1
 8006430:	eb07 090e 	add.w	r9, r7, lr
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	fbb0 f5f5 	udiv	r5, r0, r5
 800643a:	b395      	cbz	r5, 80064a2 <quorem+0x9e>
 800643c:	f04f 0a00 	mov.w	sl, #0
 8006440:	4638      	mov	r0, r7
 8006442:	46b4      	mov	ip, r6
 8006444:	46d3      	mov	fp, sl
 8006446:	f850 2b04 	ldr.w	r2, [r0], #4
 800644a:	b293      	uxth	r3, r2
 800644c:	fb05 a303 	mla	r3, r5, r3, sl
 8006450:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006454:	b29b      	uxth	r3, r3
 8006456:	ebab 0303 	sub.w	r3, fp, r3
 800645a:	0c12      	lsrs	r2, r2, #16
 800645c:	f8bc b000 	ldrh.w	fp, [ip]
 8006460:	fb05 a202 	mla	r2, r5, r2, sl
 8006464:	fa13 f38b 	uxtah	r3, r3, fp
 8006468:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800646c:	fa1f fb82 	uxth.w	fp, r2
 8006470:	f8dc 2000 	ldr.w	r2, [ip]
 8006474:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800647c:	b29b      	uxth	r3, r3
 800647e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006482:	4581      	cmp	r9, r0
 8006484:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006488:	f84c 3b04 	str.w	r3, [ip], #4
 800648c:	d2db      	bcs.n	8006446 <quorem+0x42>
 800648e:	f856 300e 	ldr.w	r3, [r6, lr]
 8006492:	b933      	cbnz	r3, 80064a2 <quorem+0x9e>
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	3b04      	subs	r3, #4
 8006498:	429e      	cmp	r6, r3
 800649a:	461a      	mov	r2, r3
 800649c:	d330      	bcc.n	8006500 <quorem+0xfc>
 800649e:	f8c8 4010 	str.w	r4, [r8, #16]
 80064a2:	4640      	mov	r0, r8
 80064a4:	f001 fefd 	bl	80082a2 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	db25      	blt.n	80064f8 <quorem+0xf4>
 80064ac:	3501      	adds	r5, #1
 80064ae:	4630      	mov	r0, r6
 80064b0:	f04f 0e00 	mov.w	lr, #0
 80064b4:	f857 2b04 	ldr.w	r2, [r7], #4
 80064b8:	f8d0 c000 	ldr.w	ip, [r0]
 80064bc:	b293      	uxth	r3, r2
 80064be:	ebae 0303 	sub.w	r3, lr, r3
 80064c2:	0c12      	lsrs	r2, r2, #16
 80064c4:	fa13 f38c 	uxtah	r3, r3, ip
 80064c8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80064cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064d6:	45b9      	cmp	r9, r7
 80064d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80064dc:	f840 3b04 	str.w	r3, [r0], #4
 80064e0:	d2e8      	bcs.n	80064b4 <quorem+0xb0>
 80064e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80064e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80064ea:	b92a      	cbnz	r2, 80064f8 <quorem+0xf4>
 80064ec:	3b04      	subs	r3, #4
 80064ee:	429e      	cmp	r6, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	d30b      	bcc.n	800650c <quorem+0x108>
 80064f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80064f8:	4628      	mov	r0, r5
 80064fa:	b003      	add	sp, #12
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	3b04      	subs	r3, #4
 8006504:	2a00      	cmp	r2, #0
 8006506:	d1ca      	bne.n	800649e <quorem+0x9a>
 8006508:	3c01      	subs	r4, #1
 800650a:	e7c5      	b.n	8006498 <quorem+0x94>
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	3b04      	subs	r3, #4
 8006510:	2a00      	cmp	r2, #0
 8006512:	d1ef      	bne.n	80064f4 <quorem+0xf0>
 8006514:	3c01      	subs	r4, #1
 8006516:	e7ea      	b.n	80064ee <quorem+0xea>
 8006518:	2000      	movs	r0, #0
 800651a:	e7ee      	b.n	80064fa <quorem+0xf6>
 800651c:	0000      	movs	r0, r0
	...

08006520 <_dtoa_r>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	ec57 6b10 	vmov	r6, r7, d0
 8006528:	b097      	sub	sp, #92	; 0x5c
 800652a:	e9cd 6700 	strd	r6, r7, [sp]
 800652e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006530:	9107      	str	r1, [sp, #28]
 8006532:	4604      	mov	r4, r0
 8006534:	920a      	str	r2, [sp, #40]	; 0x28
 8006536:	930f      	str	r3, [sp, #60]	; 0x3c
 8006538:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800653a:	b93e      	cbnz	r6, 800654c <_dtoa_r+0x2c>
 800653c:	2010      	movs	r0, #16
 800653e:	f001 fa5f 	bl	8007a00 <malloc>
 8006542:	6260      	str	r0, [r4, #36]	; 0x24
 8006544:	6046      	str	r6, [r0, #4]
 8006546:	6086      	str	r6, [r0, #8]
 8006548:	6006      	str	r6, [r0, #0]
 800654a:	60c6      	str	r6, [r0, #12]
 800654c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654e:	6819      	ldr	r1, [r3, #0]
 8006550:	b151      	cbz	r1, 8006568 <_dtoa_r+0x48>
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	604a      	str	r2, [r1, #4]
 8006556:	2301      	movs	r3, #1
 8006558:	4093      	lsls	r3, r2
 800655a:	608b      	str	r3, [r1, #8]
 800655c:	4620      	mov	r0, r4
 800655e:	f001 fccb 	bl	8007ef8 <_Bfree>
 8006562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	bfbf      	itttt	lt
 800656e:	2301      	movlt	r3, #1
 8006570:	602b      	strlt	r3, [r5, #0]
 8006572:	9b01      	ldrlt	r3, [sp, #4]
 8006574:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006578:	bfb2      	itee	lt
 800657a:	9301      	strlt	r3, [sp, #4]
 800657c:	2300      	movge	r3, #0
 800657e:	602b      	strge	r3, [r5, #0]
 8006580:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006584:	4ba8      	ldr	r3, [pc, #672]	; (8006828 <_dtoa_r+0x308>)
 8006586:	ea33 0308 	bics.w	r3, r3, r8
 800658a:	d11b      	bne.n	80065c4 <_dtoa_r+0xa4>
 800658c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800658e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	b923      	cbnz	r3, 80065a2 <_dtoa_r+0x82>
 8006598:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800659c:	2800      	cmp	r0, #0
 800659e:	f000 8578 	beq.w	8007092 <_dtoa_r+0xb72>
 80065a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065a4:	b953      	cbnz	r3, 80065bc <_dtoa_r+0x9c>
 80065a6:	4ba1      	ldr	r3, [pc, #644]	; (800682c <_dtoa_r+0x30c>)
 80065a8:	e021      	b.n	80065ee <_dtoa_r+0xce>
 80065aa:	4ba1      	ldr	r3, [pc, #644]	; (8006830 <_dtoa_r+0x310>)
 80065ac:	9302      	str	r3, [sp, #8]
 80065ae:	3308      	adds	r3, #8
 80065b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	9802      	ldr	r0, [sp, #8]
 80065b6:	b017      	add	sp, #92	; 0x5c
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	4b9b      	ldr	r3, [pc, #620]	; (800682c <_dtoa_r+0x30c>)
 80065be:	9302      	str	r3, [sp, #8]
 80065c0:	3303      	adds	r3, #3
 80065c2:	e7f5      	b.n	80065b0 <_dtoa_r+0x90>
 80065c4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa fa7e 	bl	8000ad0 <__aeabi_dcmpeq>
 80065d4:	4681      	mov	r9, r0
 80065d6:	b160      	cbz	r0, 80065f2 <_dtoa_r+0xd2>
 80065d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065da:	2301      	movs	r3, #1
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8553 	beq.w	800708c <_dtoa_r+0xb6c>
 80065e6:	4b93      	ldr	r3, [pc, #588]	; (8006834 <_dtoa_r+0x314>)
 80065e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	e7e0      	b.n	80065b4 <_dtoa_r+0x94>
 80065f2:	aa14      	add	r2, sp, #80	; 0x50
 80065f4:	a915      	add	r1, sp, #84	; 0x54
 80065f6:	ec47 6b10 	vmov	d0, r6, r7
 80065fa:	4620      	mov	r0, r4
 80065fc:	f001 fec9 	bl	8008392 <__d2b>
 8006600:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006604:	4682      	mov	sl, r0
 8006606:	2d00      	cmp	r5, #0
 8006608:	d07e      	beq.n	8006708 <_dtoa_r+0x1e8>
 800660a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800660e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006612:	4630      	mov	r0, r6
 8006614:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006618:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800661c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006620:	2200      	movs	r2, #0
 8006622:	4b85      	ldr	r3, [pc, #532]	; (8006838 <_dtoa_r+0x318>)
 8006624:	f7f9 fe38 	bl	8000298 <__aeabi_dsub>
 8006628:	a379      	add	r3, pc, #484	; (adr r3, 8006810 <_dtoa_r+0x2f0>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7f9 ffe7 	bl	8000600 <__aeabi_dmul>
 8006632:	a379      	add	r3, pc, #484	; (adr r3, 8006818 <_dtoa_r+0x2f8>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 fe30 	bl	800029c <__adddf3>
 800663c:	4606      	mov	r6, r0
 800663e:	4628      	mov	r0, r5
 8006640:	460f      	mov	r7, r1
 8006642:	f7f9 ff77 	bl	8000534 <__aeabi_i2d>
 8006646:	a376      	add	r3, pc, #472	; (adr r3, 8006820 <_dtoa_r+0x300>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7f9 ffd8 	bl	8000600 <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7f9 fe20 	bl	800029c <__adddf3>
 800665c:	4606      	mov	r6, r0
 800665e:	460f      	mov	r7, r1
 8006660:	f7fa fa7e 	bl	8000b60 <__aeabi_d2iz>
 8006664:	2200      	movs	r2, #0
 8006666:	4683      	mov	fp, r0
 8006668:	2300      	movs	r3, #0
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7fa fa39 	bl	8000ae4 <__aeabi_dcmplt>
 8006672:	b158      	cbz	r0, 800668c <_dtoa_r+0x16c>
 8006674:	4658      	mov	r0, fp
 8006676:	f7f9 ff5d 	bl	8000534 <__aeabi_i2d>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4630      	mov	r0, r6
 8006680:	4639      	mov	r1, r7
 8006682:	f7fa fa25 	bl	8000ad0 <__aeabi_dcmpeq>
 8006686:	b908      	cbnz	r0, 800668c <_dtoa_r+0x16c>
 8006688:	f10b 3bff 	add.w	fp, fp, #4294967295
 800668c:	f1bb 0f16 	cmp.w	fp, #22
 8006690:	d859      	bhi.n	8006746 <_dtoa_r+0x226>
 8006692:	496a      	ldr	r1, [pc, #424]	; (800683c <_dtoa_r+0x31c>)
 8006694:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800669c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a0:	f7fa fa3e 	bl	8000b20 <__aeabi_dcmpgt>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d050      	beq.n	800674a <_dtoa_r+0x22a>
 80066a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066ac:	2300      	movs	r3, #0
 80066ae:	930e      	str	r3, [sp, #56]	; 0x38
 80066b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066b2:	1b5d      	subs	r5, r3, r5
 80066b4:	1e6b      	subs	r3, r5, #1
 80066b6:	9306      	str	r3, [sp, #24]
 80066b8:	bf45      	ittet	mi
 80066ba:	f1c5 0301 	rsbmi	r3, r5, #1
 80066be:	9305      	strmi	r3, [sp, #20]
 80066c0:	2300      	movpl	r3, #0
 80066c2:	2300      	movmi	r3, #0
 80066c4:	bf4c      	ite	mi
 80066c6:	9306      	strmi	r3, [sp, #24]
 80066c8:	9305      	strpl	r3, [sp, #20]
 80066ca:	f1bb 0f00 	cmp.w	fp, #0
 80066ce:	db3e      	blt.n	800674e <_dtoa_r+0x22e>
 80066d0:	9b06      	ldr	r3, [sp, #24]
 80066d2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066d6:	445b      	add	r3, fp
 80066d8:	9306      	str	r3, [sp, #24]
 80066da:	2300      	movs	r3, #0
 80066dc:	9308      	str	r3, [sp, #32]
 80066de:	9b07      	ldr	r3, [sp, #28]
 80066e0:	2b09      	cmp	r3, #9
 80066e2:	f200 80af 	bhi.w	8006844 <_dtoa_r+0x324>
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	bfc4      	itt	gt
 80066ea:	3b04      	subgt	r3, #4
 80066ec:	9307      	strgt	r3, [sp, #28]
 80066ee:	9b07      	ldr	r3, [sp, #28]
 80066f0:	f1a3 0302 	sub.w	r3, r3, #2
 80066f4:	bfcc      	ite	gt
 80066f6:	2600      	movgt	r6, #0
 80066f8:	2601      	movle	r6, #1
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	f200 80ae 	bhi.w	800685c <_dtoa_r+0x33c>
 8006700:	e8df f003 	tbb	[pc, r3]
 8006704:	772f8482 	.word	0x772f8482
 8006708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800670a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800670c:	441d      	add	r5, r3
 800670e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006712:	2b20      	cmp	r3, #32
 8006714:	dd11      	ble.n	800673a <_dtoa_r+0x21a>
 8006716:	9a00      	ldr	r2, [sp, #0]
 8006718:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800671c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006720:	fa22 f000 	lsr.w	r0, r2, r0
 8006724:	fa08 f303 	lsl.w	r3, r8, r3
 8006728:	4318      	orrs	r0, r3
 800672a:	f7f9 fef3 	bl	8000514 <__aeabi_ui2d>
 800672e:	2301      	movs	r3, #1
 8006730:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006734:	3d01      	subs	r5, #1
 8006736:	9312      	str	r3, [sp, #72]	; 0x48
 8006738:	e772      	b.n	8006620 <_dtoa_r+0x100>
 800673a:	f1c3 0020 	rsb	r0, r3, #32
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	fa03 f000 	lsl.w	r0, r3, r0
 8006744:	e7f1      	b.n	800672a <_dtoa_r+0x20a>
 8006746:	2301      	movs	r3, #1
 8006748:	e7b1      	b.n	80066ae <_dtoa_r+0x18e>
 800674a:	900e      	str	r0, [sp, #56]	; 0x38
 800674c:	e7b0      	b.n	80066b0 <_dtoa_r+0x190>
 800674e:	9b05      	ldr	r3, [sp, #20]
 8006750:	eba3 030b 	sub.w	r3, r3, fp
 8006754:	9305      	str	r3, [sp, #20]
 8006756:	f1cb 0300 	rsb	r3, fp, #0
 800675a:	9308      	str	r3, [sp, #32]
 800675c:	2300      	movs	r3, #0
 800675e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006760:	e7bd      	b.n	80066de <_dtoa_r+0x1be>
 8006762:	2301      	movs	r3, #1
 8006764:	9309      	str	r3, [sp, #36]	; 0x24
 8006766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	dd7a      	ble.n	8006862 <_dtoa_r+0x342>
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006772:	2200      	movs	r2, #0
 8006774:	606a      	str	r2, [r5, #4]
 8006776:	2104      	movs	r1, #4
 8006778:	f101 0214 	add.w	r2, r1, #20
 800677c:	429a      	cmp	r2, r3
 800677e:	d975      	bls.n	800686c <_dtoa_r+0x34c>
 8006780:	6869      	ldr	r1, [r5, #4]
 8006782:	4620      	mov	r0, r4
 8006784:	f001 fb84 	bl	8007e90 <_Balloc>
 8006788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800678a:	6028      	str	r0, [r5, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	9302      	str	r3, [sp, #8]
 8006790:	9b03      	ldr	r3, [sp, #12]
 8006792:	2b0e      	cmp	r3, #14
 8006794:	f200 80e5 	bhi.w	8006962 <_dtoa_r+0x442>
 8006798:	2e00      	cmp	r6, #0
 800679a:	f000 80e2 	beq.w	8006962 <_dtoa_r+0x442>
 800679e:	ed9d 7b00 	vldr	d7, [sp]
 80067a2:	f1bb 0f00 	cmp.w	fp, #0
 80067a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80067aa:	dd74      	ble.n	8006896 <_dtoa_r+0x376>
 80067ac:	4a23      	ldr	r2, [pc, #140]	; (800683c <_dtoa_r+0x31c>)
 80067ae:	f00b 030f 	and.w	r3, fp, #15
 80067b2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80067b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067ba:	06f0      	lsls	r0, r6, #27
 80067bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067c0:	d559      	bpl.n	8006876 <_dtoa_r+0x356>
 80067c2:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <_dtoa_r+0x320>)
 80067c4:	ec51 0b17 	vmov	r0, r1, d7
 80067c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067cc:	f7fa f842 	bl	8000854 <__aeabi_ddiv>
 80067d0:	e9cd 0100 	strd	r0, r1, [sp]
 80067d4:	f006 060f 	and.w	r6, r6, #15
 80067d8:	2503      	movs	r5, #3
 80067da:	4f19      	ldr	r7, [pc, #100]	; (8006840 <_dtoa_r+0x320>)
 80067dc:	2e00      	cmp	r6, #0
 80067de:	d14c      	bne.n	800687a <_dtoa_r+0x35a>
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067e8:	f7fa f834 	bl	8000854 <__aeabi_ddiv>
 80067ec:	e9cd 0100 	strd	r0, r1, [sp]
 80067f0:	e06a      	b.n	80068c8 <_dtoa_r+0x3a8>
 80067f2:	2301      	movs	r3, #1
 80067f4:	9309      	str	r3, [sp, #36]	; 0x24
 80067f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f8:	445b      	add	r3, fp
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	3301      	adds	r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	bfb8      	it	lt
 8006804:	2301      	movlt	r3, #1
 8006806:	e7b3      	b.n	8006770 <_dtoa_r+0x250>
 8006808:	2300      	movs	r3, #0
 800680a:	e7ab      	b.n	8006764 <_dtoa_r+0x244>
 800680c:	2300      	movs	r3, #0
 800680e:	e7f1      	b.n	80067f4 <_dtoa_r+0x2d4>
 8006810:	636f4361 	.word	0x636f4361
 8006814:	3fd287a7 	.word	0x3fd287a7
 8006818:	8b60c8b3 	.word	0x8b60c8b3
 800681c:	3fc68a28 	.word	0x3fc68a28
 8006820:	509f79fb 	.word	0x509f79fb
 8006824:	3fd34413 	.word	0x3fd34413
 8006828:	7ff00000 	.word	0x7ff00000
 800682c:	08008ff1 	.word	0x08008ff1
 8006830:	08008fe8 	.word	0x08008fe8
 8006834:	08008fa7 	.word	0x08008fa7
 8006838:	3ff80000 	.word	0x3ff80000
 800683c:	08009080 	.word	0x08009080
 8006840:	08009058 	.word	0x08009058
 8006844:	2601      	movs	r6, #1
 8006846:	2300      	movs	r3, #0
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	9609      	str	r6, [sp, #36]	; 0x24
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	9303      	str	r3, [sp, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	2312      	movs	r3, #18
 8006858:	920a      	str	r2, [sp, #40]	; 0x28
 800685a:	e789      	b.n	8006770 <_dtoa_r+0x250>
 800685c:	2301      	movs	r3, #1
 800685e:	9309      	str	r3, [sp, #36]	; 0x24
 8006860:	e7f4      	b.n	800684c <_dtoa_r+0x32c>
 8006862:	2301      	movs	r3, #1
 8006864:	9304      	str	r3, [sp, #16]
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	461a      	mov	r2, r3
 800686a:	e7f5      	b.n	8006858 <_dtoa_r+0x338>
 800686c:	686a      	ldr	r2, [r5, #4]
 800686e:	3201      	adds	r2, #1
 8006870:	606a      	str	r2, [r5, #4]
 8006872:	0049      	lsls	r1, r1, #1
 8006874:	e780      	b.n	8006778 <_dtoa_r+0x258>
 8006876:	2502      	movs	r5, #2
 8006878:	e7af      	b.n	80067da <_dtoa_r+0x2ba>
 800687a:	07f1      	lsls	r1, r6, #31
 800687c:	d508      	bpl.n	8006890 <_dtoa_r+0x370>
 800687e:	4640      	mov	r0, r8
 8006880:	4649      	mov	r1, r9
 8006882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006886:	f7f9 febb 	bl	8000600 <__aeabi_dmul>
 800688a:	3501      	adds	r5, #1
 800688c:	4680      	mov	r8, r0
 800688e:	4689      	mov	r9, r1
 8006890:	1076      	asrs	r6, r6, #1
 8006892:	3708      	adds	r7, #8
 8006894:	e7a2      	b.n	80067dc <_dtoa_r+0x2bc>
 8006896:	f000 809d 	beq.w	80069d4 <_dtoa_r+0x4b4>
 800689a:	f1cb 0600 	rsb	r6, fp, #0
 800689e:	4b9f      	ldr	r3, [pc, #636]	; (8006b1c <_dtoa_r+0x5fc>)
 80068a0:	4f9f      	ldr	r7, [pc, #636]	; (8006b20 <_dtoa_r+0x600>)
 80068a2:	f006 020f 	and.w	r2, r6, #15
 80068a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068b2:	f7f9 fea5 	bl	8000600 <__aeabi_dmul>
 80068b6:	e9cd 0100 	strd	r0, r1, [sp]
 80068ba:	1136      	asrs	r6, r6, #4
 80068bc:	2300      	movs	r3, #0
 80068be:	2502      	movs	r5, #2
 80068c0:	2e00      	cmp	r6, #0
 80068c2:	d17c      	bne.n	80069be <_dtoa_r+0x49e>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d191      	bne.n	80067ec <_dtoa_r+0x2cc>
 80068c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8084 	beq.w	80069d8 <_dtoa_r+0x4b8>
 80068d0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80068d4:	2200      	movs	r2, #0
 80068d6:	4b93      	ldr	r3, [pc, #588]	; (8006b24 <_dtoa_r+0x604>)
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	f7fa f902 	bl	8000ae4 <__aeabi_dcmplt>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d079      	beq.n	80069d8 <_dtoa_r+0x4b8>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d076      	beq.n	80069d8 <_dtoa_r+0x4b8>
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dd34      	ble.n	800695a <_dtoa_r+0x43a>
 80068f0:	2200      	movs	r2, #0
 80068f2:	4b8d      	ldr	r3, [pc, #564]	; (8006b28 <_dtoa_r+0x608>)
 80068f4:	4640      	mov	r0, r8
 80068f6:	4649      	mov	r1, r9
 80068f8:	f7f9 fe82 	bl	8000600 <__aeabi_dmul>
 80068fc:	e9cd 0100 	strd	r0, r1, [sp]
 8006900:	9e04      	ldr	r6, [sp, #16]
 8006902:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006906:	3501      	adds	r5, #1
 8006908:	4628      	mov	r0, r5
 800690a:	f7f9 fe13 	bl	8000534 <__aeabi_i2d>
 800690e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006912:	f7f9 fe75 	bl	8000600 <__aeabi_dmul>
 8006916:	2200      	movs	r2, #0
 8006918:	4b84      	ldr	r3, [pc, #528]	; (8006b2c <_dtoa_r+0x60c>)
 800691a:	f7f9 fcbf 	bl	800029c <__adddf3>
 800691e:	4680      	mov	r8, r0
 8006920:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006924:	2e00      	cmp	r6, #0
 8006926:	d15a      	bne.n	80069de <_dtoa_r+0x4be>
 8006928:	2200      	movs	r2, #0
 800692a:	4b81      	ldr	r3, [pc, #516]	; (8006b30 <_dtoa_r+0x610>)
 800692c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006930:	f7f9 fcb2 	bl	8000298 <__aeabi_dsub>
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	e9cd 0100 	strd	r0, r1, [sp]
 800693c:	f7fa f8f0 	bl	8000b20 <__aeabi_dcmpgt>
 8006940:	2800      	cmp	r0, #0
 8006942:	f040 829b 	bne.w	8006e7c <_dtoa_r+0x95c>
 8006946:	4642      	mov	r2, r8
 8006948:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800694c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006950:	f7fa f8c8 	bl	8000ae4 <__aeabi_dcmplt>
 8006954:	2800      	cmp	r0, #0
 8006956:	f040 828f 	bne.w	8006e78 <_dtoa_r+0x958>
 800695a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800695e:	e9cd 2300 	strd	r2, r3, [sp]
 8006962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006964:	2b00      	cmp	r3, #0
 8006966:	f2c0 8150 	blt.w	8006c0a <_dtoa_r+0x6ea>
 800696a:	f1bb 0f0e 	cmp.w	fp, #14
 800696e:	f300 814c 	bgt.w	8006c0a <_dtoa_r+0x6ea>
 8006972:	4b6a      	ldr	r3, [pc, #424]	; (8006b1c <_dtoa_r+0x5fc>)
 8006974:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006978:	e9d3 8900 	ldrd	r8, r9, [r3]
 800697c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697e:	2b00      	cmp	r3, #0
 8006980:	f280 80da 	bge.w	8006b38 <_dtoa_r+0x618>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f300 80d6 	bgt.w	8006b38 <_dtoa_r+0x618>
 800698c:	f040 8273 	bne.w	8006e76 <_dtoa_r+0x956>
 8006990:	2200      	movs	r2, #0
 8006992:	4b67      	ldr	r3, [pc, #412]	; (8006b30 <_dtoa_r+0x610>)
 8006994:	4640      	mov	r0, r8
 8006996:	4649      	mov	r1, r9
 8006998:	f7f9 fe32 	bl	8000600 <__aeabi_dmul>
 800699c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a0:	f7fa f8b4 	bl	8000b0c <__aeabi_dcmpge>
 80069a4:	9e03      	ldr	r6, [sp, #12]
 80069a6:	4637      	mov	r7, r6
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f040 824a 	bne.w	8006e42 <_dtoa_r+0x922>
 80069ae:	9b02      	ldr	r3, [sp, #8]
 80069b0:	9a02      	ldr	r2, [sp, #8]
 80069b2:	1c5d      	adds	r5, r3, #1
 80069b4:	2331      	movs	r3, #49	; 0x31
 80069b6:	7013      	strb	r3, [r2, #0]
 80069b8:	f10b 0b01 	add.w	fp, fp, #1
 80069bc:	e245      	b.n	8006e4a <_dtoa_r+0x92a>
 80069be:	07f2      	lsls	r2, r6, #31
 80069c0:	d505      	bpl.n	80069ce <_dtoa_r+0x4ae>
 80069c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c6:	f7f9 fe1b 	bl	8000600 <__aeabi_dmul>
 80069ca:	3501      	adds	r5, #1
 80069cc:	2301      	movs	r3, #1
 80069ce:	1076      	asrs	r6, r6, #1
 80069d0:	3708      	adds	r7, #8
 80069d2:	e775      	b.n	80068c0 <_dtoa_r+0x3a0>
 80069d4:	2502      	movs	r5, #2
 80069d6:	e777      	b.n	80068c8 <_dtoa_r+0x3a8>
 80069d8:	465f      	mov	r7, fp
 80069da:	9e03      	ldr	r6, [sp, #12]
 80069dc:	e794      	b.n	8006908 <_dtoa_r+0x3e8>
 80069de:	9a02      	ldr	r2, [sp, #8]
 80069e0:	4b4e      	ldr	r3, [pc, #312]	; (8006b1c <_dtoa_r+0x5fc>)
 80069e2:	4432      	add	r2, r6
 80069e4:	9213      	str	r2, [sp, #76]	; 0x4c
 80069e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e8:	1e71      	subs	r1, r6, #1
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	d048      	beq.n	8006a80 <_dtoa_r+0x560>
 80069ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	2000      	movs	r0, #0
 80069f8:	494e      	ldr	r1, [pc, #312]	; (8006b34 <_dtoa_r+0x614>)
 80069fa:	f7f9 ff2b 	bl	8000854 <__aeabi_ddiv>
 80069fe:	4642      	mov	r2, r8
 8006a00:	464b      	mov	r3, r9
 8006a02:	f7f9 fc49 	bl	8000298 <__aeabi_dsub>
 8006a06:	9d02      	ldr	r5, [sp, #8]
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a10:	f7fa f8a6 	bl	8000b60 <__aeabi_d2iz>
 8006a14:	4606      	mov	r6, r0
 8006a16:	f7f9 fd8d 	bl	8000534 <__aeabi_i2d>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a22:	f7f9 fc39 	bl	8000298 <__aeabi_dsub>
 8006a26:	3630      	adds	r6, #48	; 0x30
 8006a28:	f805 6b01 	strb.w	r6, [r5], #1
 8006a2c:	4642      	mov	r2, r8
 8006a2e:	464b      	mov	r3, r9
 8006a30:	e9cd 0100 	strd	r0, r1, [sp]
 8006a34:	f7fa f856 	bl	8000ae4 <__aeabi_dcmplt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d165      	bne.n	8006b08 <_dtoa_r+0x5e8>
 8006a3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a40:	2000      	movs	r0, #0
 8006a42:	4938      	ldr	r1, [pc, #224]	; (8006b24 <_dtoa_r+0x604>)
 8006a44:	f7f9 fc28 	bl	8000298 <__aeabi_dsub>
 8006a48:	4642      	mov	r2, r8
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	f7fa f84a 	bl	8000ae4 <__aeabi_dcmplt>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f040 80ba 	bne.w	8006bca <_dtoa_r+0x6aa>
 8006a56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a58:	429d      	cmp	r5, r3
 8006a5a:	f43f af7e 	beq.w	800695a <_dtoa_r+0x43a>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	4b31      	ldr	r3, [pc, #196]	; (8006b28 <_dtoa_r+0x608>)
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fdcb 	bl	8000600 <__aeabi_dmul>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	4689      	mov	r9, r1
 8006a70:	4b2d      	ldr	r3, [pc, #180]	; (8006b28 <_dtoa_r+0x608>)
 8006a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a76:	f7f9 fdc3 	bl	8000600 <__aeabi_dmul>
 8006a7a:	e9cd 0100 	strd	r0, r1, [sp]
 8006a7e:	e7c5      	b.n	8006a0c <_dtoa_r+0x4ec>
 8006a80:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006a84:	4642      	mov	r2, r8
 8006a86:	464b      	mov	r3, r9
 8006a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a8c:	f7f9 fdb8 	bl	8000600 <__aeabi_dmul>
 8006a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a94:	9d02      	ldr	r5, [sp, #8]
 8006a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a9a:	f7fa f861 	bl	8000b60 <__aeabi_d2iz>
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	f7f9 fd48 	bl	8000534 <__aeabi_i2d>
 8006aa4:	3630      	adds	r6, #48	; 0x30
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aae:	f7f9 fbf3 	bl	8000298 <__aeabi_dsub>
 8006ab2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ab6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	d125      	bne.n	8006b10 <_dtoa_r+0x5f0>
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <_dtoa_r+0x614>)
 8006ac6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006aca:	f7f9 fbe7 	bl	800029c <__adddf3>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7fa f823 	bl	8000b20 <__aeabi_dcmpgt>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d175      	bne.n	8006bca <_dtoa_r+0x6aa>
 8006ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	4913      	ldr	r1, [pc, #76]	; (8006b34 <_dtoa_r+0x614>)
 8006ae6:	f7f9 fbd7 	bl	8000298 <__aeabi_dsub>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4640      	mov	r0, r8
 8006af0:	4649      	mov	r1, r9
 8006af2:	f7f9 fff7 	bl	8000ae4 <__aeabi_dcmplt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f43f af2f 	beq.w	800695a <_dtoa_r+0x43a>
 8006afc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b00:	2b30      	cmp	r3, #48	; 0x30
 8006b02:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b06:	d001      	beq.n	8006b0c <_dtoa_r+0x5ec>
 8006b08:	46bb      	mov	fp, r7
 8006b0a:	e04d      	b.n	8006ba8 <_dtoa_r+0x688>
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	e7f5      	b.n	8006afc <_dtoa_r+0x5dc>
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <_dtoa_r+0x608>)
 8006b12:	f7f9 fd75 	bl	8000600 <__aeabi_dmul>
 8006b16:	e9cd 0100 	strd	r0, r1, [sp]
 8006b1a:	e7bc      	b.n	8006a96 <_dtoa_r+0x576>
 8006b1c:	08009080 	.word	0x08009080
 8006b20:	08009058 	.word	0x08009058
 8006b24:	3ff00000 	.word	0x3ff00000
 8006b28:	40240000 	.word	0x40240000
 8006b2c:	401c0000 	.word	0x401c0000
 8006b30:	40140000 	.word	0x40140000
 8006b34:	3fe00000 	.word	0x3fe00000
 8006b38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b3c:	9d02      	ldr	r5, [sp, #8]
 8006b3e:	4642      	mov	r2, r8
 8006b40:	464b      	mov	r3, r9
 8006b42:	4630      	mov	r0, r6
 8006b44:	4639      	mov	r1, r7
 8006b46:	f7f9 fe85 	bl	8000854 <__aeabi_ddiv>
 8006b4a:	f7fa f809 	bl	8000b60 <__aeabi_d2iz>
 8006b4e:	9000      	str	r0, [sp, #0]
 8006b50:	f7f9 fcf0 	bl	8000534 <__aeabi_i2d>
 8006b54:	4642      	mov	r2, r8
 8006b56:	464b      	mov	r3, r9
 8006b58:	f7f9 fd52 	bl	8000600 <__aeabi_dmul>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4630      	mov	r0, r6
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 fb98 	bl	8000298 <__aeabi_dsub>
 8006b68:	9e00      	ldr	r6, [sp, #0]
 8006b6a:	9f03      	ldr	r7, [sp, #12]
 8006b6c:	3630      	adds	r6, #48	; 0x30
 8006b6e:	f805 6b01 	strb.w	r6, [r5], #1
 8006b72:	9e02      	ldr	r6, [sp, #8]
 8006b74:	1bae      	subs	r6, r5, r6
 8006b76:	42b7      	cmp	r7, r6
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	d138      	bne.n	8006bf0 <_dtoa_r+0x6d0>
 8006b7e:	f7f9 fb8d 	bl	800029c <__adddf3>
 8006b82:	4606      	mov	r6, r0
 8006b84:	460f      	mov	r7, r1
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	f7f9 ffa9 	bl	8000ae4 <__aeabi_dcmplt>
 8006b92:	b9c8      	cbnz	r0, 8006bc8 <_dtoa_r+0x6a8>
 8006b94:	4632      	mov	r2, r6
 8006b96:	463b      	mov	r3, r7
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 ff98 	bl	8000ad0 <__aeabi_dcmpeq>
 8006ba0:	b110      	cbz	r0, 8006ba8 <_dtoa_r+0x688>
 8006ba2:	9b00      	ldr	r3, [sp, #0]
 8006ba4:	07db      	lsls	r3, r3, #31
 8006ba6:	d40f      	bmi.n	8006bc8 <_dtoa_r+0x6a8>
 8006ba8:	4651      	mov	r1, sl
 8006baa:	4620      	mov	r0, r4
 8006bac:	f001 f9a4 	bl	8007ef8 <_Bfree>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bb4:	702b      	strb	r3, [r5, #0]
 8006bb6:	f10b 0301 	add.w	r3, fp, #1
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f43f acf8 	beq.w	80065b4 <_dtoa_r+0x94>
 8006bc4:	601d      	str	r5, [r3, #0]
 8006bc6:	e4f5      	b.n	80065b4 <_dtoa_r+0x94>
 8006bc8:	465f      	mov	r7, fp
 8006bca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bce:	2a39      	cmp	r2, #57	; 0x39
 8006bd0:	f105 33ff 	add.w	r3, r5, #4294967295
 8006bd4:	d106      	bne.n	8006be4 <_dtoa_r+0x6c4>
 8006bd6:	9a02      	ldr	r2, [sp, #8]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d107      	bne.n	8006bec <_dtoa_r+0x6cc>
 8006bdc:	2330      	movs	r3, #48	; 0x30
 8006bde:	7013      	strb	r3, [r2, #0]
 8006be0:	3701      	adds	r7, #1
 8006be2:	4613      	mov	r3, r2
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	3201      	adds	r2, #1
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e78d      	b.n	8006b08 <_dtoa_r+0x5e8>
 8006bec:	461d      	mov	r5, r3
 8006bee:	e7ec      	b.n	8006bca <_dtoa_r+0x6aa>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	4ba4      	ldr	r3, [pc, #656]	; (8006e84 <_dtoa_r+0x964>)
 8006bf4:	f7f9 fd04 	bl	8000600 <__aeabi_dmul>
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	460f      	mov	r7, r1
 8006c00:	f7f9 ff66 	bl	8000ad0 <__aeabi_dcmpeq>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d09a      	beq.n	8006b3e <_dtoa_r+0x61e>
 8006c08:	e7ce      	b.n	8006ba8 <_dtoa_r+0x688>
 8006c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	f000 80cd 	beq.w	8006dac <_dtoa_r+0x88c>
 8006c12:	9a07      	ldr	r2, [sp, #28]
 8006c14:	2a01      	cmp	r2, #1
 8006c16:	f300 80af 	bgt.w	8006d78 <_dtoa_r+0x858>
 8006c1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c1c:	2a00      	cmp	r2, #0
 8006c1e:	f000 80a7 	beq.w	8006d70 <_dtoa_r+0x850>
 8006c22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c26:	9e08      	ldr	r6, [sp, #32]
 8006c28:	9d05      	ldr	r5, [sp, #20]
 8006c2a:	9a05      	ldr	r2, [sp, #20]
 8006c2c:	441a      	add	r2, r3
 8006c2e:	9205      	str	r2, [sp, #20]
 8006c30:	9a06      	ldr	r2, [sp, #24]
 8006c32:	2101      	movs	r1, #1
 8006c34:	441a      	add	r2, r3
 8006c36:	4620      	mov	r0, r4
 8006c38:	9206      	str	r2, [sp, #24]
 8006c3a:	f001 f9fd 	bl	8008038 <__i2b>
 8006c3e:	4607      	mov	r7, r0
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	dd0c      	ble.n	8006c5e <_dtoa_r+0x73e>
 8006c44:	9b06      	ldr	r3, [sp, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dd09      	ble.n	8006c5e <_dtoa_r+0x73e>
 8006c4a:	42ab      	cmp	r3, r5
 8006c4c:	9a05      	ldr	r2, [sp, #20]
 8006c4e:	bfa8      	it	ge
 8006c50:	462b      	movge	r3, r5
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	9205      	str	r2, [sp, #20]
 8006c56:	9a06      	ldr	r2, [sp, #24]
 8006c58:	1aed      	subs	r5, r5, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	9306      	str	r3, [sp, #24]
 8006c5e:	9b08      	ldr	r3, [sp, #32]
 8006c60:	b1f3      	cbz	r3, 8006ca0 <_dtoa_r+0x780>
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80a5 	beq.w	8006db4 <_dtoa_r+0x894>
 8006c6a:	2e00      	cmp	r6, #0
 8006c6c:	dd10      	ble.n	8006c90 <_dtoa_r+0x770>
 8006c6e:	4639      	mov	r1, r7
 8006c70:	4632      	mov	r2, r6
 8006c72:	4620      	mov	r0, r4
 8006c74:	f001 fa76 	bl	8008164 <__pow5mult>
 8006c78:	4652      	mov	r2, sl
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f001 f9e3 	bl	800804a <__multiply>
 8006c84:	4651      	mov	r1, sl
 8006c86:	4680      	mov	r8, r0
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f001 f935 	bl	8007ef8 <_Bfree>
 8006c8e:	46c2      	mov	sl, r8
 8006c90:	9b08      	ldr	r3, [sp, #32]
 8006c92:	1b9a      	subs	r2, r3, r6
 8006c94:	d004      	beq.n	8006ca0 <_dtoa_r+0x780>
 8006c96:	4651      	mov	r1, sl
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f001 fa63 	bl	8008164 <__pow5mult>
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f001 f9c8 	bl	8008038 <__i2b>
 8006ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	4606      	mov	r6, r0
 8006cae:	f340 8083 	ble.w	8006db8 <_dtoa_r+0x898>
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4601      	mov	r1, r0
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f001 fa54 	bl	8008164 <__pow5mult>
 8006cbc:	9b07      	ldr	r3, [sp, #28]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	dd7c      	ble.n	8006dbe <_dtoa_r+0x89e>
 8006cc4:	f04f 0800 	mov.w	r8, #0
 8006cc8:	6933      	ldr	r3, [r6, #16]
 8006cca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cce:	6918      	ldr	r0, [r3, #16]
 8006cd0:	f001 f964 	bl	8007f9c <__hi0bits>
 8006cd4:	f1c0 0020 	rsb	r0, r0, #32
 8006cd8:	9b06      	ldr	r3, [sp, #24]
 8006cda:	4418      	add	r0, r3
 8006cdc:	f010 001f 	ands.w	r0, r0, #31
 8006ce0:	f000 8096 	beq.w	8006e10 <_dtoa_r+0x8f0>
 8006ce4:	f1c0 0320 	rsb	r3, r0, #32
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	f340 8087 	ble.w	8006dfc <_dtoa_r+0x8dc>
 8006cee:	9b05      	ldr	r3, [sp, #20]
 8006cf0:	f1c0 001c 	rsb	r0, r0, #28
 8006cf4:	4403      	add	r3, r0
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	9b06      	ldr	r3, [sp, #24]
 8006cfa:	4405      	add	r5, r0
 8006cfc:	4403      	add	r3, r0
 8006cfe:	9306      	str	r3, [sp, #24]
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dd05      	ble.n	8006d12 <_dtoa_r+0x7f2>
 8006d06:	4651      	mov	r1, sl
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f001 fa78 	bl	8008200 <__lshift>
 8006d10:	4682      	mov	sl, r0
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dd05      	ble.n	8006d24 <_dtoa_r+0x804>
 8006d18:	4631      	mov	r1, r6
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f001 fa6f 	bl	8008200 <__lshift>
 8006d22:	4606      	mov	r6, r0
 8006d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d074      	beq.n	8006e14 <_dtoa_r+0x8f4>
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	f001 fab8 	bl	80082a2 <__mcmp>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	da6e      	bge.n	8006e14 <_dtoa_r+0x8f4>
 8006d36:	2300      	movs	r3, #0
 8006d38:	4651      	mov	r1, sl
 8006d3a:	220a      	movs	r2, #10
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f001 f8f2 	bl	8007f26 <__multadd>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d48:	4682      	mov	sl, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 81a8 	beq.w	80070a0 <_dtoa_r+0xb80>
 8006d50:	2300      	movs	r3, #0
 8006d52:	4639      	mov	r1, r7
 8006d54:	220a      	movs	r2, #10
 8006d56:	4620      	mov	r0, r4
 8006d58:	f001 f8e5 	bl	8007f26 <__multadd>
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	4607      	mov	r7, r0
 8006d62:	f300 80c8 	bgt.w	8006ef6 <_dtoa_r+0x9d6>
 8006d66:	9b07      	ldr	r3, [sp, #28]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	f340 80c4 	ble.w	8006ef6 <_dtoa_r+0x9d6>
 8006d6e:	e059      	b.n	8006e24 <_dtoa_r+0x904>
 8006d70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d76:	e756      	b.n	8006c26 <_dtoa_r+0x706>
 8006d78:	9b03      	ldr	r3, [sp, #12]
 8006d7a:	1e5e      	subs	r6, r3, #1
 8006d7c:	9b08      	ldr	r3, [sp, #32]
 8006d7e:	42b3      	cmp	r3, r6
 8006d80:	bfbf      	itttt	lt
 8006d82:	9b08      	ldrlt	r3, [sp, #32]
 8006d84:	9608      	strlt	r6, [sp, #32]
 8006d86:	1af2      	sublt	r2, r6, r3
 8006d88:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006d8a:	bfb6      	itet	lt
 8006d8c:	189b      	addlt	r3, r3, r2
 8006d8e:	1b9e      	subge	r6, r3, r6
 8006d90:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	bfb8      	it	lt
 8006d96:	2600      	movlt	r6, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb9      	ittee	lt
 8006d9c:	9b05      	ldrlt	r3, [sp, #20]
 8006d9e:	9a03      	ldrlt	r2, [sp, #12]
 8006da0:	9d05      	ldrge	r5, [sp, #20]
 8006da2:	9b03      	ldrge	r3, [sp, #12]
 8006da4:	bfbc      	itt	lt
 8006da6:	1a9d      	sublt	r5, r3, r2
 8006da8:	2300      	movlt	r3, #0
 8006daa:	e73e      	b.n	8006c2a <_dtoa_r+0x70a>
 8006dac:	9e08      	ldr	r6, [sp, #32]
 8006dae:	9d05      	ldr	r5, [sp, #20]
 8006db0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006db2:	e745      	b.n	8006c40 <_dtoa_r+0x720>
 8006db4:	9a08      	ldr	r2, [sp, #32]
 8006db6:	e76e      	b.n	8006c96 <_dtoa_r+0x776>
 8006db8:	9b07      	ldr	r3, [sp, #28]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	dc19      	bgt.n	8006df2 <_dtoa_r+0x8d2>
 8006dbe:	9b00      	ldr	r3, [sp, #0]
 8006dc0:	b9bb      	cbnz	r3, 8006df2 <_dtoa_r+0x8d2>
 8006dc2:	9b01      	ldr	r3, [sp, #4]
 8006dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dc8:	b99b      	cbnz	r3, 8006df2 <_dtoa_r+0x8d2>
 8006dca:	9b01      	ldr	r3, [sp, #4]
 8006dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd0:	0d1b      	lsrs	r3, r3, #20
 8006dd2:	051b      	lsls	r3, r3, #20
 8006dd4:	b183      	cbz	r3, 8006df8 <_dtoa_r+0x8d8>
 8006dd6:	9b05      	ldr	r3, [sp, #20]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	9305      	str	r3, [sp, #20]
 8006ddc:	9b06      	ldr	r3, [sp, #24]
 8006dde:	3301      	adds	r3, #1
 8006de0:	9306      	str	r3, [sp, #24]
 8006de2:	f04f 0801 	mov.w	r8, #1
 8006de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f47f af6d 	bne.w	8006cc8 <_dtoa_r+0x7a8>
 8006dee:	2001      	movs	r0, #1
 8006df0:	e772      	b.n	8006cd8 <_dtoa_r+0x7b8>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	e7f6      	b.n	8006de6 <_dtoa_r+0x8c6>
 8006df8:	4698      	mov	r8, r3
 8006dfa:	e7f4      	b.n	8006de6 <_dtoa_r+0x8c6>
 8006dfc:	d080      	beq.n	8006d00 <_dtoa_r+0x7e0>
 8006dfe:	9a05      	ldr	r2, [sp, #20]
 8006e00:	331c      	adds	r3, #28
 8006e02:	441a      	add	r2, r3
 8006e04:	9205      	str	r2, [sp, #20]
 8006e06:	9a06      	ldr	r2, [sp, #24]
 8006e08:	441a      	add	r2, r3
 8006e0a:	441d      	add	r5, r3
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	e776      	b.n	8006cfe <_dtoa_r+0x7de>
 8006e10:	4603      	mov	r3, r0
 8006e12:	e7f4      	b.n	8006dfe <_dtoa_r+0x8de>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dc36      	bgt.n	8006e88 <_dtoa_r+0x968>
 8006e1a:	9b07      	ldr	r3, [sp, #28]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	dd33      	ble.n	8006e88 <_dtoa_r+0x968>
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	9304      	str	r3, [sp, #16]
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	b963      	cbnz	r3, 8006e42 <_dtoa_r+0x922>
 8006e28:	4631      	mov	r1, r6
 8006e2a:	2205      	movs	r2, #5
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 f87a 	bl	8007f26 <__multadd>
 8006e32:	4601      	mov	r1, r0
 8006e34:	4606      	mov	r6, r0
 8006e36:	4650      	mov	r0, sl
 8006e38:	f001 fa33 	bl	80082a2 <__mcmp>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	f73f adb6 	bgt.w	80069ae <_dtoa_r+0x48e>
 8006e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e44:	9d02      	ldr	r5, [sp, #8]
 8006e46:	ea6f 0b03 	mvn.w	fp, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9303      	str	r3, [sp, #12]
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4620      	mov	r0, r4
 8006e52:	f001 f851 	bl	8007ef8 <_Bfree>
 8006e56:	2f00      	cmp	r7, #0
 8006e58:	f43f aea6 	beq.w	8006ba8 <_dtoa_r+0x688>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	b12b      	cbz	r3, 8006e6c <_dtoa_r+0x94c>
 8006e60:	42bb      	cmp	r3, r7
 8006e62:	d003      	beq.n	8006e6c <_dtoa_r+0x94c>
 8006e64:	4619      	mov	r1, r3
 8006e66:	4620      	mov	r0, r4
 8006e68:	f001 f846 	bl	8007ef8 <_Bfree>
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f001 f842 	bl	8007ef8 <_Bfree>
 8006e74:	e698      	b.n	8006ba8 <_dtoa_r+0x688>
 8006e76:	2600      	movs	r6, #0
 8006e78:	4637      	mov	r7, r6
 8006e7a:	e7e2      	b.n	8006e42 <_dtoa_r+0x922>
 8006e7c:	46bb      	mov	fp, r7
 8006e7e:	4637      	mov	r7, r6
 8006e80:	e595      	b.n	80069ae <_dtoa_r+0x48e>
 8006e82:	bf00      	nop
 8006e84:	40240000 	.word	0x40240000
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	bb93      	cbnz	r3, 8006ef2 <_dtoa_r+0x9d2>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	9304      	str	r3, [sp, #16]
 8006e90:	9d02      	ldr	r5, [sp, #8]
 8006e92:	4631      	mov	r1, r6
 8006e94:	4650      	mov	r0, sl
 8006e96:	f7ff fab5 	bl	8006404 <quorem>
 8006e9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e9e:	f805 9b01 	strb.w	r9, [r5], #1
 8006ea2:	9b02      	ldr	r3, [sp, #8]
 8006ea4:	9a04      	ldr	r2, [sp, #16]
 8006ea6:	1aeb      	subs	r3, r5, r3
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	f300 80dc 	bgt.w	8007066 <_dtoa_r+0xb46>
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	2a01      	cmp	r2, #1
 8006eb2:	bfac      	ite	ge
 8006eb4:	189b      	addge	r3, r3, r2
 8006eb6:	3301      	addlt	r3, #1
 8006eb8:	4698      	mov	r8, r3
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9303      	str	r3, [sp, #12]
 8006ebe:	4651      	mov	r1, sl
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f001 f99c 	bl	8008200 <__lshift>
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4682      	mov	sl, r0
 8006ecc:	f001 f9e9 	bl	80082a2 <__mcmp>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	f300 808d 	bgt.w	8006ff0 <_dtoa_r+0xad0>
 8006ed6:	d103      	bne.n	8006ee0 <_dtoa_r+0x9c0>
 8006ed8:	f019 0f01 	tst.w	r9, #1
 8006edc:	f040 8088 	bne.w	8006ff0 <_dtoa_r+0xad0>
 8006ee0:	4645      	mov	r5, r8
 8006ee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ee6:	2b30      	cmp	r3, #48	; 0x30
 8006ee8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006eec:	d1af      	bne.n	8006e4e <_dtoa_r+0x92e>
 8006eee:	4615      	mov	r5, r2
 8006ef0:	e7f7      	b.n	8006ee2 <_dtoa_r+0x9c2>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	2d00      	cmp	r5, #0
 8006ef8:	dd05      	ble.n	8006f06 <_dtoa_r+0x9e6>
 8006efa:	4639      	mov	r1, r7
 8006efc:	462a      	mov	r2, r5
 8006efe:	4620      	mov	r0, r4
 8006f00:	f001 f97e 	bl	8008200 <__lshift>
 8006f04:	4607      	mov	r7, r0
 8006f06:	f1b8 0f00 	cmp.w	r8, #0
 8006f0a:	d04c      	beq.n	8006fa6 <_dtoa_r+0xa86>
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 ffbe 	bl	8007e90 <_Balloc>
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	3202      	adds	r2, #2
 8006f18:	4605      	mov	r5, r0
 8006f1a:	0092      	lsls	r2, r2, #2
 8006f1c:	f107 010c 	add.w	r1, r7, #12
 8006f20:	300c      	adds	r0, #12
 8006f22:	f000 ff83 	bl	8007e2c <memcpy>
 8006f26:	2201      	movs	r2, #1
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f001 f968 	bl	8008200 <__lshift>
 8006f30:	9b00      	ldr	r3, [sp, #0]
 8006f32:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006f36:	9703      	str	r7, [sp, #12]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	9305      	str	r3, [sp, #20]
 8006f40:	4631      	mov	r1, r6
 8006f42:	4650      	mov	r0, sl
 8006f44:	f7ff fa5e 	bl	8006404 <quorem>
 8006f48:	9903      	ldr	r1, [sp, #12]
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f50:	4650      	mov	r0, sl
 8006f52:	f001 f9a6 	bl	80082a2 <__mcmp>
 8006f56:	463a      	mov	r2, r7
 8006f58:	9000      	str	r0, [sp, #0]
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f001 f9ba 	bl	80082d6 <__mdiff>
 8006f62:	68c3      	ldr	r3, [r0, #12]
 8006f64:	4602      	mov	r2, r0
 8006f66:	bb03      	cbnz	r3, 8006faa <_dtoa_r+0xa8a>
 8006f68:	4601      	mov	r1, r0
 8006f6a:	9006      	str	r0, [sp, #24]
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	f001 f998 	bl	80082a2 <__mcmp>
 8006f72:	9a06      	ldr	r2, [sp, #24]
 8006f74:	4603      	mov	r3, r0
 8006f76:	4611      	mov	r1, r2
 8006f78:	4620      	mov	r0, r4
 8006f7a:	9306      	str	r3, [sp, #24]
 8006f7c:	f000 ffbc 	bl	8007ef8 <_Bfree>
 8006f80:	9b06      	ldr	r3, [sp, #24]
 8006f82:	b9a3      	cbnz	r3, 8006fae <_dtoa_r+0xa8e>
 8006f84:	9a07      	ldr	r2, [sp, #28]
 8006f86:	b992      	cbnz	r2, 8006fae <_dtoa_r+0xa8e>
 8006f88:	9a05      	ldr	r2, [sp, #20]
 8006f8a:	b982      	cbnz	r2, 8006fae <_dtoa_r+0xa8e>
 8006f8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f90:	d029      	beq.n	8006fe6 <_dtoa_r+0xac6>
 8006f92:	9b00      	ldr	r3, [sp, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd01      	ble.n	8006f9c <_dtoa_r+0xa7c>
 8006f98:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006f9c:	f108 0501 	add.w	r5, r8, #1
 8006fa0:	f888 9000 	strb.w	r9, [r8]
 8006fa4:	e753      	b.n	8006e4e <_dtoa_r+0x92e>
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	e7c2      	b.n	8006f30 <_dtoa_r+0xa10>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e7e3      	b.n	8006f76 <_dtoa_r+0xa56>
 8006fae:	9a00      	ldr	r2, [sp, #0]
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	db04      	blt.n	8006fbe <_dtoa_r+0xa9e>
 8006fb4:	d125      	bne.n	8007002 <_dtoa_r+0xae2>
 8006fb6:	9a07      	ldr	r2, [sp, #28]
 8006fb8:	bb1a      	cbnz	r2, 8007002 <_dtoa_r+0xae2>
 8006fba:	9a05      	ldr	r2, [sp, #20]
 8006fbc:	bb0a      	cbnz	r2, 8007002 <_dtoa_r+0xae2>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	ddec      	ble.n	8006f9c <_dtoa_r+0xa7c>
 8006fc2:	4651      	mov	r1, sl
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f001 f91a 	bl	8008200 <__lshift>
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4682      	mov	sl, r0
 8006fd0:	f001 f967 	bl	80082a2 <__mcmp>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	dc03      	bgt.n	8006fe0 <_dtoa_r+0xac0>
 8006fd8:	d1e0      	bne.n	8006f9c <_dtoa_r+0xa7c>
 8006fda:	f019 0f01 	tst.w	r9, #1
 8006fde:	d0dd      	beq.n	8006f9c <_dtoa_r+0xa7c>
 8006fe0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fe4:	d1d8      	bne.n	8006f98 <_dtoa_r+0xa78>
 8006fe6:	2339      	movs	r3, #57	; 0x39
 8006fe8:	f888 3000 	strb.w	r3, [r8]
 8006fec:	f108 0801 	add.w	r8, r8, #1
 8006ff0:	4645      	mov	r5, r8
 8006ff2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ff6:	2b39      	cmp	r3, #57	; 0x39
 8006ff8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ffc:	d03b      	beq.n	8007076 <_dtoa_r+0xb56>
 8006ffe:	3301      	adds	r3, #1
 8007000:	e040      	b.n	8007084 <_dtoa_r+0xb64>
 8007002:	2b00      	cmp	r3, #0
 8007004:	f108 0501 	add.w	r5, r8, #1
 8007008:	dd05      	ble.n	8007016 <_dtoa_r+0xaf6>
 800700a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800700e:	d0ea      	beq.n	8006fe6 <_dtoa_r+0xac6>
 8007010:	f109 0901 	add.w	r9, r9, #1
 8007014:	e7c4      	b.n	8006fa0 <_dtoa_r+0xa80>
 8007016:	9b02      	ldr	r3, [sp, #8]
 8007018:	9a04      	ldr	r2, [sp, #16]
 800701a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800701e:	1aeb      	subs	r3, r5, r3
 8007020:	4293      	cmp	r3, r2
 8007022:	46a8      	mov	r8, r5
 8007024:	f43f af4b 	beq.w	8006ebe <_dtoa_r+0x99e>
 8007028:	4651      	mov	r1, sl
 800702a:	2300      	movs	r3, #0
 800702c:	220a      	movs	r2, #10
 800702e:	4620      	mov	r0, r4
 8007030:	f000 ff79 	bl	8007f26 <__multadd>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	9903      	ldr	r1, [sp, #12]
 8007038:	42bb      	cmp	r3, r7
 800703a:	4682      	mov	sl, r0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	f04f 020a 	mov.w	r2, #10
 8007044:	4620      	mov	r0, r4
 8007046:	d104      	bne.n	8007052 <_dtoa_r+0xb32>
 8007048:	f000 ff6d 	bl	8007f26 <__multadd>
 800704c:	9003      	str	r0, [sp, #12]
 800704e:	4607      	mov	r7, r0
 8007050:	e776      	b.n	8006f40 <_dtoa_r+0xa20>
 8007052:	f000 ff68 	bl	8007f26 <__multadd>
 8007056:	2300      	movs	r3, #0
 8007058:	9003      	str	r0, [sp, #12]
 800705a:	220a      	movs	r2, #10
 800705c:	4639      	mov	r1, r7
 800705e:	4620      	mov	r0, r4
 8007060:	f000 ff61 	bl	8007f26 <__multadd>
 8007064:	e7f3      	b.n	800704e <_dtoa_r+0xb2e>
 8007066:	4651      	mov	r1, sl
 8007068:	2300      	movs	r3, #0
 800706a:	220a      	movs	r2, #10
 800706c:	4620      	mov	r0, r4
 800706e:	f000 ff5a 	bl	8007f26 <__multadd>
 8007072:	4682      	mov	sl, r0
 8007074:	e70d      	b.n	8006e92 <_dtoa_r+0x972>
 8007076:	9b02      	ldr	r3, [sp, #8]
 8007078:	4293      	cmp	r3, r2
 800707a:	d105      	bne.n	8007088 <_dtoa_r+0xb68>
 800707c:	9a02      	ldr	r2, [sp, #8]
 800707e:	f10b 0b01 	add.w	fp, fp, #1
 8007082:	2331      	movs	r3, #49	; 0x31
 8007084:	7013      	strb	r3, [r2, #0]
 8007086:	e6e2      	b.n	8006e4e <_dtoa_r+0x92e>
 8007088:	4615      	mov	r5, r2
 800708a:	e7b2      	b.n	8006ff2 <_dtoa_r+0xad2>
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <_dtoa_r+0xb94>)
 800708e:	f7ff baae 	b.w	80065ee <_dtoa_r+0xce>
 8007092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007094:	2b00      	cmp	r3, #0
 8007096:	f47f aa88 	bne.w	80065aa <_dtoa_r+0x8a>
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <_dtoa_r+0xb98>)
 800709c:	f7ff baa7 	b.w	80065ee <_dtoa_r+0xce>
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f73f aef4 	bgt.w	8006e90 <_dtoa_r+0x970>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	f77f aef0 	ble.w	8006e90 <_dtoa_r+0x970>
 80070b0:	e6b8      	b.n	8006e24 <_dtoa_r+0x904>
 80070b2:	bf00      	nop
 80070b4:	08008fa6 	.word	0x08008fa6
 80070b8:	08008fe8 	.word	0x08008fe8

080070bc <__sflush_r>:
 80070bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070c0:	b293      	uxth	r3, r2
 80070c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c6:	4605      	mov	r5, r0
 80070c8:	0718      	lsls	r0, r3, #28
 80070ca:	460c      	mov	r4, r1
 80070cc:	d461      	bmi.n	8007192 <__sflush_r+0xd6>
 80070ce:	684b      	ldr	r3, [r1, #4]
 80070d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	818a      	strh	r2, [r1, #12]
 80070d8:	dc05      	bgt.n	80070e6 <__sflush_r+0x2a>
 80070da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dc02      	bgt.n	80070e6 <__sflush_r+0x2a>
 80070e0:	2000      	movs	r0, #0
 80070e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070e8:	2e00      	cmp	r6, #0
 80070ea:	d0f9      	beq.n	80070e0 <__sflush_r+0x24>
 80070ec:	2300      	movs	r3, #0
 80070ee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070f2:	682f      	ldr	r7, [r5, #0]
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	d037      	beq.n	8007168 <__sflush_r+0xac>
 80070f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	075a      	lsls	r2, r3, #29
 80070fe:	d505      	bpl.n	800710c <__sflush_r+0x50>
 8007100:	6863      	ldr	r3, [r4, #4]
 8007102:	1ac0      	subs	r0, r0, r3
 8007104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007106:	b10b      	cbz	r3, 800710c <__sflush_r+0x50>
 8007108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800710a:	1ac0      	subs	r0, r0, r3
 800710c:	2300      	movs	r3, #0
 800710e:	4602      	mov	r2, r0
 8007110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007112:	6a21      	ldr	r1, [r4, #32]
 8007114:	4628      	mov	r0, r5
 8007116:	47b0      	blx	r6
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	d106      	bne.n	800712c <__sflush_r+0x70>
 800711e:	6829      	ldr	r1, [r5, #0]
 8007120:	291d      	cmp	r1, #29
 8007122:	d84f      	bhi.n	80071c4 <__sflush_r+0x108>
 8007124:	4a2d      	ldr	r2, [pc, #180]	; (80071dc <__sflush_r+0x120>)
 8007126:	40ca      	lsrs	r2, r1
 8007128:	07d6      	lsls	r6, r2, #31
 800712a:	d54b      	bpl.n	80071c4 <__sflush_r+0x108>
 800712c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007130:	b21b      	sxth	r3, r3
 8007132:	2200      	movs	r2, #0
 8007134:	6062      	str	r2, [r4, #4]
 8007136:	04d9      	lsls	r1, r3, #19
 8007138:	6922      	ldr	r2, [r4, #16]
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	6022      	str	r2, [r4, #0]
 800713e:	d504      	bpl.n	800714a <__sflush_r+0x8e>
 8007140:	1c42      	adds	r2, r0, #1
 8007142:	d101      	bne.n	8007148 <__sflush_r+0x8c>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b903      	cbnz	r3, 800714a <__sflush_r+0x8e>
 8007148:	6560      	str	r0, [r4, #84]	; 0x54
 800714a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800714c:	602f      	str	r7, [r5, #0]
 800714e:	2900      	cmp	r1, #0
 8007150:	d0c6      	beq.n	80070e0 <__sflush_r+0x24>
 8007152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007156:	4299      	cmp	r1, r3
 8007158:	d002      	beq.n	8007160 <__sflush_r+0xa4>
 800715a:	4628      	mov	r0, r5
 800715c:	f000 f9aa 	bl	80074b4 <_free_r>
 8007160:	2000      	movs	r0, #0
 8007162:	6360      	str	r0, [r4, #52]	; 0x34
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	6a21      	ldr	r1, [r4, #32]
 800716a:	2301      	movs	r3, #1
 800716c:	4628      	mov	r0, r5
 800716e:	47b0      	blx	r6
 8007170:	1c41      	adds	r1, r0, #1
 8007172:	d1c2      	bne.n	80070fa <__sflush_r+0x3e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0bf      	beq.n	80070fa <__sflush_r+0x3e>
 800717a:	2b1d      	cmp	r3, #29
 800717c:	d001      	beq.n	8007182 <__sflush_r+0xc6>
 800717e:	2b16      	cmp	r3, #22
 8007180:	d101      	bne.n	8007186 <__sflush_r+0xca>
 8007182:	602f      	str	r7, [r5, #0]
 8007184:	e7ac      	b.n	80070e0 <__sflush_r+0x24>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007192:	690f      	ldr	r7, [r1, #16]
 8007194:	2f00      	cmp	r7, #0
 8007196:	d0a3      	beq.n	80070e0 <__sflush_r+0x24>
 8007198:	079b      	lsls	r3, r3, #30
 800719a:	680e      	ldr	r6, [r1, #0]
 800719c:	bf08      	it	eq
 800719e:	694b      	ldreq	r3, [r1, #20]
 80071a0:	600f      	str	r7, [r1, #0]
 80071a2:	bf18      	it	ne
 80071a4:	2300      	movne	r3, #0
 80071a6:	eba6 0807 	sub.w	r8, r6, r7
 80071aa:	608b      	str	r3, [r1, #8]
 80071ac:	f1b8 0f00 	cmp.w	r8, #0
 80071b0:	dd96      	ble.n	80070e0 <__sflush_r+0x24>
 80071b2:	4643      	mov	r3, r8
 80071b4:	463a      	mov	r2, r7
 80071b6:	6a21      	ldr	r1, [r4, #32]
 80071b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b0      	blx	r6
 80071be:	2800      	cmp	r0, #0
 80071c0:	dc07      	bgt.n	80071d2 <__sflush_r+0x116>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c8:	81a3      	strh	r3, [r4, #12]
 80071ca:	f04f 30ff 	mov.w	r0, #4294967295
 80071ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d2:	4407      	add	r7, r0
 80071d4:	eba8 0800 	sub.w	r8, r8, r0
 80071d8:	e7e8      	b.n	80071ac <__sflush_r+0xf0>
 80071da:	bf00      	nop
 80071dc:	20400001 	.word	0x20400001

080071e0 <_fflush_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	690b      	ldr	r3, [r1, #16]
 80071e4:	4605      	mov	r5, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	b913      	cbnz	r3, 80071f0 <_fflush_r+0x10>
 80071ea:	2500      	movs	r5, #0
 80071ec:	4628      	mov	r0, r5
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	b118      	cbz	r0, 80071fa <_fflush_r+0x1a>
 80071f2:	6983      	ldr	r3, [r0, #24]
 80071f4:	b90b      	cbnz	r3, 80071fa <_fflush_r+0x1a>
 80071f6:	f000 f887 	bl	8007308 <__sinit>
 80071fa:	4b14      	ldr	r3, [pc, #80]	; (800724c <_fflush_r+0x6c>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d11b      	bne.n	8007238 <_fflush_r+0x58>
 8007200:	686c      	ldr	r4, [r5, #4]
 8007202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0ef      	beq.n	80071ea <_fflush_r+0xa>
 800720a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800720c:	07d0      	lsls	r0, r2, #31
 800720e:	d404      	bmi.n	800721a <_fflush_r+0x3a>
 8007210:	0599      	lsls	r1, r3, #22
 8007212:	d402      	bmi.n	800721a <_fflush_r+0x3a>
 8007214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007216:	f000 fb85 	bl	8007924 <__retarget_lock_acquire_recursive>
 800721a:	4628      	mov	r0, r5
 800721c:	4621      	mov	r1, r4
 800721e:	f7ff ff4d 	bl	80070bc <__sflush_r>
 8007222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007224:	07da      	lsls	r2, r3, #31
 8007226:	4605      	mov	r5, r0
 8007228:	d4e0      	bmi.n	80071ec <_fflush_r+0xc>
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	059b      	lsls	r3, r3, #22
 800722e:	d4dd      	bmi.n	80071ec <_fflush_r+0xc>
 8007230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007232:	f000 fb78 	bl	8007926 <__retarget_lock_release_recursive>
 8007236:	e7d9      	b.n	80071ec <_fflush_r+0xc>
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <_fflush_r+0x70>)
 800723a:	429c      	cmp	r4, r3
 800723c:	d101      	bne.n	8007242 <_fflush_r+0x62>
 800723e:	68ac      	ldr	r4, [r5, #8]
 8007240:	e7df      	b.n	8007202 <_fflush_r+0x22>
 8007242:	4b04      	ldr	r3, [pc, #16]	; (8007254 <_fflush_r+0x74>)
 8007244:	429c      	cmp	r4, r3
 8007246:	bf08      	it	eq
 8007248:	68ec      	ldreq	r4, [r5, #12]
 800724a:	e7da      	b.n	8007202 <_fflush_r+0x22>
 800724c:	08009018 	.word	0x08009018
 8007250:	08009038 	.word	0x08009038
 8007254:	08008ff8 	.word	0x08008ff8

08007258 <_cleanup_r>:
 8007258:	4901      	ldr	r1, [pc, #4]	; (8007260 <_cleanup_r+0x8>)
 800725a:	f000 bb35 	b.w	80078c8 <_fwalk_reent>
 800725e:	bf00      	nop
 8007260:	080089d5 	.word	0x080089d5

08007264 <std.isra.0>:
 8007264:	2300      	movs	r3, #0
 8007266:	b510      	push	{r4, lr}
 8007268:	4604      	mov	r4, r0
 800726a:	6003      	str	r3, [r0, #0]
 800726c:	6043      	str	r3, [r0, #4]
 800726e:	6083      	str	r3, [r0, #8]
 8007270:	8181      	strh	r1, [r0, #12]
 8007272:	6643      	str	r3, [r0, #100]	; 0x64
 8007274:	81c2      	strh	r2, [r0, #14]
 8007276:	6103      	str	r3, [r0, #16]
 8007278:	6143      	str	r3, [r0, #20]
 800727a:	6183      	str	r3, [r0, #24]
 800727c:	4619      	mov	r1, r3
 800727e:	2208      	movs	r2, #8
 8007280:	305c      	adds	r0, #92	; 0x5c
 8007282:	f7fc ff4b 	bl	800411c <memset>
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <std.isra.0+0x38>)
 8007288:	6263      	str	r3, [r4, #36]	; 0x24
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <std.isra.0+0x3c>)
 800728c:	62a3      	str	r3, [r4, #40]	; 0x28
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <std.isra.0+0x40>)
 8007290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <std.isra.0+0x44>)
 8007294:	6224      	str	r4, [r4, #32]
 8007296:	6323      	str	r3, [r4, #48]	; 0x30
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	08008751 	.word	0x08008751
 80072a0:	08008773 	.word	0x08008773
 80072a4:	080087ab 	.word	0x080087ab
 80072a8:	080087cf 	.word	0x080087cf

080072ac <__sfmoreglue>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	1e4a      	subs	r2, r1, #1
 80072b0:	2568      	movs	r5, #104	; 0x68
 80072b2:	4355      	muls	r5, r2
 80072b4:	460e      	mov	r6, r1
 80072b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072ba:	f000 fba9 	bl	8007a10 <_malloc_r>
 80072be:	4604      	mov	r4, r0
 80072c0:	b140      	cbz	r0, 80072d4 <__sfmoreglue+0x28>
 80072c2:	2100      	movs	r1, #0
 80072c4:	e880 0042 	stmia.w	r0, {r1, r6}
 80072c8:	300c      	adds	r0, #12
 80072ca:	60a0      	str	r0, [r4, #8]
 80072cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072d0:	f7fc ff24 	bl	800411c <memset>
 80072d4:	4620      	mov	r0, r4
 80072d6:	bd70      	pop	{r4, r5, r6, pc}

080072d8 <__sfp_lock_acquire>:
 80072d8:	4801      	ldr	r0, [pc, #4]	; (80072e0 <__sfp_lock_acquire+0x8>)
 80072da:	f000 bb23 	b.w	8007924 <__retarget_lock_acquire_recursive>
 80072de:	bf00      	nop
 80072e0:	20000918 	.word	0x20000918

080072e4 <__sfp_lock_release>:
 80072e4:	4801      	ldr	r0, [pc, #4]	; (80072ec <__sfp_lock_release+0x8>)
 80072e6:	f000 bb1e 	b.w	8007926 <__retarget_lock_release_recursive>
 80072ea:	bf00      	nop
 80072ec:	20000918 	.word	0x20000918

080072f0 <__sinit_lock_acquire>:
 80072f0:	4801      	ldr	r0, [pc, #4]	; (80072f8 <__sinit_lock_acquire+0x8>)
 80072f2:	f000 bb17 	b.w	8007924 <__retarget_lock_acquire_recursive>
 80072f6:	bf00      	nop
 80072f8:	20000913 	.word	0x20000913

080072fc <__sinit_lock_release>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__sinit_lock_release+0x8>)
 80072fe:	f000 bb12 	b.w	8007926 <__retarget_lock_release_recursive>
 8007302:	bf00      	nop
 8007304:	20000913 	.word	0x20000913

08007308 <__sinit>:
 8007308:	b510      	push	{r4, lr}
 800730a:	4604      	mov	r4, r0
 800730c:	f7ff fff0 	bl	80072f0 <__sinit_lock_acquire>
 8007310:	69a3      	ldr	r3, [r4, #24]
 8007312:	b11b      	cbz	r3, 800731c <__sinit+0x14>
 8007314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007318:	f7ff bff0 	b.w	80072fc <__sinit_lock_release>
 800731c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007320:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8007324:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8007328:	4b12      	ldr	r3, [pc, #72]	; (8007374 <__sinit+0x6c>)
 800732a:	4a13      	ldr	r2, [pc, #76]	; (8007378 <__sinit+0x70>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	62a2      	str	r2, [r4, #40]	; 0x28
 8007330:	429c      	cmp	r4, r3
 8007332:	bf04      	itt	eq
 8007334:	2301      	moveq	r3, #1
 8007336:	61a3      	streq	r3, [r4, #24]
 8007338:	4620      	mov	r0, r4
 800733a:	f000 f81f 	bl	800737c <__sfp>
 800733e:	6060      	str	r0, [r4, #4]
 8007340:	4620      	mov	r0, r4
 8007342:	f000 f81b 	bl	800737c <__sfp>
 8007346:	60a0      	str	r0, [r4, #8]
 8007348:	4620      	mov	r0, r4
 800734a:	f000 f817 	bl	800737c <__sfp>
 800734e:	2200      	movs	r2, #0
 8007350:	60e0      	str	r0, [r4, #12]
 8007352:	2104      	movs	r1, #4
 8007354:	6860      	ldr	r0, [r4, #4]
 8007356:	f7ff ff85 	bl	8007264 <std.isra.0>
 800735a:	2201      	movs	r2, #1
 800735c:	2109      	movs	r1, #9
 800735e:	68a0      	ldr	r0, [r4, #8]
 8007360:	f7ff ff80 	bl	8007264 <std.isra.0>
 8007364:	2202      	movs	r2, #2
 8007366:	2112      	movs	r1, #18
 8007368:	68e0      	ldr	r0, [r4, #12]
 800736a:	f7ff ff7b 	bl	8007264 <std.isra.0>
 800736e:	2301      	movs	r3, #1
 8007370:	61a3      	str	r3, [r4, #24]
 8007372:	e7cf      	b.n	8007314 <__sinit+0xc>
 8007374:	08008f70 	.word	0x08008f70
 8007378:	08007259 	.word	0x08007259

0800737c <__sfp>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	4607      	mov	r7, r0
 8007380:	f7ff ffaa 	bl	80072d8 <__sfp_lock_acquire>
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <__sfp+0x88>)
 8007386:	681e      	ldr	r6, [r3, #0]
 8007388:	69b3      	ldr	r3, [r6, #24]
 800738a:	b913      	cbnz	r3, 8007392 <__sfp+0x16>
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff ffbb 	bl	8007308 <__sinit>
 8007392:	36d8      	adds	r6, #216	; 0xd8
 8007394:	68b4      	ldr	r4, [r6, #8]
 8007396:	6873      	ldr	r3, [r6, #4]
 8007398:	3b01      	subs	r3, #1
 800739a:	d503      	bpl.n	80073a4 <__sfp+0x28>
 800739c:	6833      	ldr	r3, [r6, #0]
 800739e:	b133      	cbz	r3, 80073ae <__sfp+0x32>
 80073a0:	6836      	ldr	r6, [r6, #0]
 80073a2:	e7f7      	b.n	8007394 <__sfp+0x18>
 80073a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073a8:	b17d      	cbz	r5, 80073ca <__sfp+0x4e>
 80073aa:	3468      	adds	r4, #104	; 0x68
 80073ac:	e7f4      	b.n	8007398 <__sfp+0x1c>
 80073ae:	2104      	movs	r1, #4
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff ff7b 	bl	80072ac <__sfmoreglue>
 80073b6:	4604      	mov	r4, r0
 80073b8:	6030      	str	r0, [r6, #0]
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d1f0      	bne.n	80073a0 <__sfp+0x24>
 80073be:	f7ff ff91 	bl	80072e4 <__sfp_lock_release>
 80073c2:	230c      	movs	r3, #12
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	4620      	mov	r0, r4
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073ce:	81e3      	strh	r3, [r4, #14]
 80073d0:	2301      	movs	r3, #1
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073d8:	6665      	str	r5, [r4, #100]	; 0x64
 80073da:	f000 faa1 	bl	8007920 <__retarget_lock_init_recursive>
 80073de:	f7ff ff81 	bl	80072e4 <__sfp_lock_release>
 80073e2:	6025      	str	r5, [r4, #0]
 80073e4:	60a5      	str	r5, [r4, #8]
 80073e6:	6065      	str	r5, [r4, #4]
 80073e8:	6125      	str	r5, [r4, #16]
 80073ea:	6165      	str	r5, [r4, #20]
 80073ec:	61a5      	str	r5, [r4, #24]
 80073ee:	2208      	movs	r2, #8
 80073f0:	4629      	mov	r1, r5
 80073f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073f6:	f7fc fe91 	bl	800411c <memset>
 80073fa:	6365      	str	r5, [r4, #52]	; 0x34
 80073fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80073fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8007400:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007402:	e7e0      	b.n	80073c6 <__sfp+0x4a>
 8007404:	08008f70 	.word	0x08008f70

08007408 <_malloc_trim_r>:
 8007408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800740c:	4f25      	ldr	r7, [pc, #148]	; (80074a4 <_malloc_trim_r+0x9c>)
 800740e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80074b0 <_malloc_trim_r+0xa8>
 8007412:	4689      	mov	r9, r1
 8007414:	4606      	mov	r6, r0
 8007416:	f000 fd2f 	bl	8007e78 <__malloc_lock>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	685d      	ldr	r5, [r3, #4]
 800741e:	f1a8 0411 	sub.w	r4, r8, #17
 8007422:	f025 0503 	bic.w	r5, r5, #3
 8007426:	eba4 0409 	sub.w	r4, r4, r9
 800742a:	442c      	add	r4, r5
 800742c:	fbb4 f4f8 	udiv	r4, r4, r8
 8007430:	3c01      	subs	r4, #1
 8007432:	fb08 f404 	mul.w	r4, r8, r4
 8007436:	4544      	cmp	r4, r8
 8007438:	da05      	bge.n	8007446 <_malloc_trim_r+0x3e>
 800743a:	4630      	mov	r0, r6
 800743c:	f000 fd22 	bl	8007e84 <__malloc_unlock>
 8007440:	2000      	movs	r0, #0
 8007442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007446:	2100      	movs	r1, #0
 8007448:	4630      	mov	r0, r6
 800744a:	f001 f971 	bl	8008730 <_sbrk_r>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	442b      	add	r3, r5
 8007452:	4298      	cmp	r0, r3
 8007454:	d1f1      	bne.n	800743a <_malloc_trim_r+0x32>
 8007456:	4261      	negs	r1, r4
 8007458:	4630      	mov	r0, r6
 800745a:	f001 f969 	bl	8008730 <_sbrk_r>
 800745e:	3001      	adds	r0, #1
 8007460:	d110      	bne.n	8007484 <_malloc_trim_r+0x7c>
 8007462:	2100      	movs	r1, #0
 8007464:	4630      	mov	r0, r6
 8007466:	f001 f963 	bl	8008730 <_sbrk_r>
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	1a83      	subs	r3, r0, r2
 800746e:	2b0f      	cmp	r3, #15
 8007470:	dde3      	ble.n	800743a <_malloc_trim_r+0x32>
 8007472:	490d      	ldr	r1, [pc, #52]	; (80074a8 <_malloc_trim_r+0xa0>)
 8007474:	6809      	ldr	r1, [r1, #0]
 8007476:	1a40      	subs	r0, r0, r1
 8007478:	490c      	ldr	r1, [pc, #48]	; (80074ac <_malloc_trim_r+0xa4>)
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	6008      	str	r0, [r1, #0]
 8007480:	6053      	str	r3, [r2, #4]
 8007482:	e7da      	b.n	800743a <_malloc_trim_r+0x32>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4a09      	ldr	r2, [pc, #36]	; (80074ac <_malloc_trim_r+0xa4>)
 8007488:	1b2d      	subs	r5, r5, r4
 800748a:	f045 0501 	orr.w	r5, r5, #1
 800748e:	605d      	str	r5, [r3, #4]
 8007490:	6813      	ldr	r3, [r2, #0]
 8007492:	4630      	mov	r0, r6
 8007494:	1b1c      	subs	r4, r3, r4
 8007496:	6014      	str	r4, [r2, #0]
 8007498:	f000 fcf4 	bl	8007e84 <__malloc_unlock>
 800749c:	2001      	movs	r0, #1
 800749e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a2:	bf00      	nop
 80074a4:	20000110 	.word	0x20000110
 80074a8:	20000518 	.word	0x20000518
 80074ac:	200006d8 	.word	0x200006d8
 80074b0:	00000080 	.word	0x00000080

080074b4 <_free_r>:
 80074b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b8:	4604      	mov	r4, r0
 80074ba:	4688      	mov	r8, r1
 80074bc:	2900      	cmp	r1, #0
 80074be:	f000 80ab 	beq.w	8007618 <_free_r+0x164>
 80074c2:	f000 fcd9 	bl	8007e78 <__malloc_lock>
 80074c6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80074ca:	4d54      	ldr	r5, [pc, #336]	; (800761c <_free_r+0x168>)
 80074cc:	f022 0001 	bic.w	r0, r2, #1
 80074d0:	f1a8 0308 	sub.w	r3, r8, #8
 80074d4:	181f      	adds	r7, r3, r0
 80074d6:	68a9      	ldr	r1, [r5, #8]
 80074d8:	687e      	ldr	r6, [r7, #4]
 80074da:	428f      	cmp	r7, r1
 80074dc:	f026 0603 	bic.w	r6, r6, #3
 80074e0:	f002 0201 	and.w	r2, r2, #1
 80074e4:	d11b      	bne.n	800751e <_free_r+0x6a>
 80074e6:	4430      	add	r0, r6
 80074e8:	b93a      	cbnz	r2, 80074fa <_free_r+0x46>
 80074ea:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	4410      	add	r0, r2
 80074f2:	6899      	ldr	r1, [r3, #8]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	60ca      	str	r2, [r1, #12]
 80074f8:	6091      	str	r1, [r2, #8]
 80074fa:	f040 0201 	orr.w	r2, r0, #1
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	60ab      	str	r3, [r5, #8]
 8007502:	4b47      	ldr	r3, [pc, #284]	; (8007620 <_free_r+0x16c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4298      	cmp	r0, r3
 8007508:	d304      	bcc.n	8007514 <_free_r+0x60>
 800750a:	4b46      	ldr	r3, [pc, #280]	; (8007624 <_free_r+0x170>)
 800750c:	4620      	mov	r0, r4
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	f7ff ff7a 	bl	8007408 <_malloc_trim_r>
 8007514:	4620      	mov	r0, r4
 8007516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751a:	f000 bcb3 	b.w	8007e84 <__malloc_unlock>
 800751e:	607e      	str	r6, [r7, #4]
 8007520:	2a00      	cmp	r2, #0
 8007522:	d139      	bne.n	8007598 <_free_r+0xe4>
 8007524:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007528:	1a5b      	subs	r3, r3, r1
 800752a:	4408      	add	r0, r1
 800752c:	6899      	ldr	r1, [r3, #8]
 800752e:	f105 0e08 	add.w	lr, r5, #8
 8007532:	4571      	cmp	r1, lr
 8007534:	d032      	beq.n	800759c <_free_r+0xe8>
 8007536:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800753a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800753e:	f8ce 1008 	str.w	r1, [lr, #8]
 8007542:	19b9      	adds	r1, r7, r6
 8007544:	6849      	ldr	r1, [r1, #4]
 8007546:	07c9      	lsls	r1, r1, #31
 8007548:	d40a      	bmi.n	8007560 <_free_r+0xac>
 800754a:	4430      	add	r0, r6
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	bb3a      	cbnz	r2, 80075a0 <_free_r+0xec>
 8007550:	4e35      	ldr	r6, [pc, #212]	; (8007628 <_free_r+0x174>)
 8007552:	42b1      	cmp	r1, r6
 8007554:	d124      	bne.n	80075a0 <_free_r+0xec>
 8007556:	616b      	str	r3, [r5, #20]
 8007558:	612b      	str	r3, [r5, #16]
 800755a:	2201      	movs	r2, #1
 800755c:	60d9      	str	r1, [r3, #12]
 800755e:	6099      	str	r1, [r3, #8]
 8007560:	f040 0101 	orr.w	r1, r0, #1
 8007564:	6059      	str	r1, [r3, #4]
 8007566:	5018      	str	r0, [r3, r0]
 8007568:	2a00      	cmp	r2, #0
 800756a:	d1d3      	bne.n	8007514 <_free_r+0x60>
 800756c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007570:	d21a      	bcs.n	80075a8 <_free_r+0xf4>
 8007572:	08c0      	lsrs	r0, r0, #3
 8007574:	1081      	asrs	r1, r0, #2
 8007576:	2201      	movs	r2, #1
 8007578:	408a      	lsls	r2, r1
 800757a:	6869      	ldr	r1, [r5, #4]
 800757c:	3001      	adds	r0, #1
 800757e:	430a      	orrs	r2, r1
 8007580:	606a      	str	r2, [r5, #4]
 8007582:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007586:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800758a:	6099      	str	r1, [r3, #8]
 800758c:	3a08      	subs	r2, #8
 800758e:	60da      	str	r2, [r3, #12]
 8007590:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007594:	60cb      	str	r3, [r1, #12]
 8007596:	e7bd      	b.n	8007514 <_free_r+0x60>
 8007598:	2200      	movs	r2, #0
 800759a:	e7d2      	b.n	8007542 <_free_r+0x8e>
 800759c:	2201      	movs	r2, #1
 800759e:	e7d0      	b.n	8007542 <_free_r+0x8e>
 80075a0:	68fe      	ldr	r6, [r7, #12]
 80075a2:	60ce      	str	r6, [r1, #12]
 80075a4:	60b1      	str	r1, [r6, #8]
 80075a6:	e7db      	b.n	8007560 <_free_r+0xac>
 80075a8:	0a42      	lsrs	r2, r0, #9
 80075aa:	2a04      	cmp	r2, #4
 80075ac:	d813      	bhi.n	80075d6 <_free_r+0x122>
 80075ae:	0982      	lsrs	r2, r0, #6
 80075b0:	3238      	adds	r2, #56	; 0x38
 80075b2:	1c51      	adds	r1, r2, #1
 80075b4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80075b8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80075bc:	428e      	cmp	r6, r1
 80075be:	d124      	bne.n	800760a <_free_r+0x156>
 80075c0:	2001      	movs	r0, #1
 80075c2:	1092      	asrs	r2, r2, #2
 80075c4:	fa00 f202 	lsl.w	r2, r0, r2
 80075c8:	6868      	ldr	r0, [r5, #4]
 80075ca:	4302      	orrs	r2, r0
 80075cc:	606a      	str	r2, [r5, #4]
 80075ce:	60de      	str	r6, [r3, #12]
 80075d0:	6099      	str	r1, [r3, #8]
 80075d2:	60b3      	str	r3, [r6, #8]
 80075d4:	e7de      	b.n	8007594 <_free_r+0xe0>
 80075d6:	2a14      	cmp	r2, #20
 80075d8:	d801      	bhi.n	80075de <_free_r+0x12a>
 80075da:	325b      	adds	r2, #91	; 0x5b
 80075dc:	e7e9      	b.n	80075b2 <_free_r+0xfe>
 80075de:	2a54      	cmp	r2, #84	; 0x54
 80075e0:	d802      	bhi.n	80075e8 <_free_r+0x134>
 80075e2:	0b02      	lsrs	r2, r0, #12
 80075e4:	326e      	adds	r2, #110	; 0x6e
 80075e6:	e7e4      	b.n	80075b2 <_free_r+0xfe>
 80075e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80075ec:	d802      	bhi.n	80075f4 <_free_r+0x140>
 80075ee:	0bc2      	lsrs	r2, r0, #15
 80075f0:	3277      	adds	r2, #119	; 0x77
 80075f2:	e7de      	b.n	80075b2 <_free_r+0xfe>
 80075f4:	f240 5154 	movw	r1, #1364	; 0x554
 80075f8:	428a      	cmp	r2, r1
 80075fa:	bf9a      	itte	ls
 80075fc:	0c82      	lsrls	r2, r0, #18
 80075fe:	327c      	addls	r2, #124	; 0x7c
 8007600:	227e      	movhi	r2, #126	; 0x7e
 8007602:	e7d6      	b.n	80075b2 <_free_r+0xfe>
 8007604:	6889      	ldr	r1, [r1, #8]
 8007606:	428e      	cmp	r6, r1
 8007608:	d004      	beq.n	8007614 <_free_r+0x160>
 800760a:	684a      	ldr	r2, [r1, #4]
 800760c:	f022 0203 	bic.w	r2, r2, #3
 8007610:	4290      	cmp	r0, r2
 8007612:	d3f7      	bcc.n	8007604 <_free_r+0x150>
 8007614:	68ce      	ldr	r6, [r1, #12]
 8007616:	e7da      	b.n	80075ce <_free_r+0x11a>
 8007618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800761c:	20000110 	.word	0x20000110
 8007620:	2000051c 	.word	0x2000051c
 8007624:	20000708 	.word	0x20000708
 8007628:	20000118 	.word	0x20000118

0800762c <__sfvwrite_r>:
 800762c:	6893      	ldr	r3, [r2, #8]
 800762e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007632:	4607      	mov	r7, r0
 8007634:	460c      	mov	r4, r1
 8007636:	4690      	mov	r8, r2
 8007638:	b91b      	cbnz	r3, 8007642 <__sfvwrite_r+0x16>
 800763a:	2000      	movs	r0, #0
 800763c:	b003      	add	sp, #12
 800763e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007642:	898b      	ldrh	r3, [r1, #12]
 8007644:	0718      	lsls	r0, r3, #28
 8007646:	d526      	bpl.n	8007696 <__sfvwrite_r+0x6a>
 8007648:	690b      	ldr	r3, [r1, #16]
 800764a:	b323      	cbz	r3, 8007696 <__sfvwrite_r+0x6a>
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	f8d8 6000 	ldr.w	r6, [r8]
 8007652:	f013 0902 	ands.w	r9, r3, #2
 8007656:	d02d      	beq.n	80076b4 <__sfvwrite_r+0x88>
 8007658:	f04f 0a00 	mov.w	sl, #0
 800765c:	f8df b264 	ldr.w	fp, [pc, #612]	; 80078c4 <__sfvwrite_r+0x298>
 8007660:	46d1      	mov	r9, sl
 8007662:	f1b9 0f00 	cmp.w	r9, #0
 8007666:	d01f      	beq.n	80076a8 <__sfvwrite_r+0x7c>
 8007668:	45d9      	cmp	r9, fp
 800766a:	464b      	mov	r3, r9
 800766c:	4652      	mov	r2, sl
 800766e:	bf28      	it	cs
 8007670:	465b      	movcs	r3, fp
 8007672:	6a21      	ldr	r1, [r4, #32]
 8007674:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007676:	4638      	mov	r0, r7
 8007678:	47a8      	blx	r5
 800767a:	2800      	cmp	r0, #0
 800767c:	f340 8089 	ble.w	8007792 <__sfvwrite_r+0x166>
 8007680:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007684:	4482      	add	sl, r0
 8007686:	eba9 0900 	sub.w	r9, r9, r0
 800768a:	1a18      	subs	r0, r3, r0
 800768c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007690:	2800      	cmp	r0, #0
 8007692:	d1e6      	bne.n	8007662 <__sfvwrite_r+0x36>
 8007694:	e7d1      	b.n	800763a <__sfvwrite_r+0xe>
 8007696:	4621      	mov	r1, r4
 8007698:	4638      	mov	r0, r7
 800769a:	f7fe fe45 	bl	8006328 <__swsetup_r>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d0d4      	beq.n	800764c <__sfvwrite_r+0x20>
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	e7c9      	b.n	800763c <__sfvwrite_r+0x10>
 80076a8:	f8d6 a000 	ldr.w	sl, [r6]
 80076ac:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80076b0:	3608      	adds	r6, #8
 80076b2:	e7d6      	b.n	8007662 <__sfvwrite_r+0x36>
 80076b4:	f013 0301 	ands.w	r3, r3, #1
 80076b8:	d043      	beq.n	8007742 <__sfvwrite_r+0x116>
 80076ba:	4648      	mov	r0, r9
 80076bc:	46ca      	mov	sl, r9
 80076be:	46cb      	mov	fp, r9
 80076c0:	f1bb 0f00 	cmp.w	fp, #0
 80076c4:	f000 80d9 	beq.w	800787a <__sfvwrite_r+0x24e>
 80076c8:	b950      	cbnz	r0, 80076e0 <__sfvwrite_r+0xb4>
 80076ca:	465a      	mov	r2, fp
 80076cc:	210a      	movs	r1, #10
 80076ce:	4650      	mov	r0, sl
 80076d0:	f7f8 fd8e 	bl	80001f0 <memchr>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f000 80d5 	beq.w	8007884 <__sfvwrite_r+0x258>
 80076da:	3001      	adds	r0, #1
 80076dc:	eba0 090a 	sub.w	r9, r0, sl
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	6921      	ldr	r1, [r4, #16]
 80076e4:	6962      	ldr	r2, [r4, #20]
 80076e6:	45d9      	cmp	r9, fp
 80076e8:	464b      	mov	r3, r9
 80076ea:	bf28      	it	cs
 80076ec:	465b      	movcs	r3, fp
 80076ee:	4288      	cmp	r0, r1
 80076f0:	f240 80cb 	bls.w	800788a <__sfvwrite_r+0x25e>
 80076f4:	68a5      	ldr	r5, [r4, #8]
 80076f6:	4415      	add	r5, r2
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	f340 80c6 	ble.w	800788a <__sfvwrite_r+0x25e>
 80076fe:	4651      	mov	r1, sl
 8007700:	462a      	mov	r2, r5
 8007702:	f000 fb9e 	bl	8007e42 <memmove>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	442b      	add	r3, r5
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	4621      	mov	r1, r4
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff fd66 	bl	80071e0 <_fflush_r>
 8007714:	2800      	cmp	r0, #0
 8007716:	d13c      	bne.n	8007792 <__sfvwrite_r+0x166>
 8007718:	ebb9 0905 	subs.w	r9, r9, r5
 800771c:	f040 80cf 	bne.w	80078be <__sfvwrite_r+0x292>
 8007720:	4621      	mov	r1, r4
 8007722:	4638      	mov	r0, r7
 8007724:	f7ff fd5c 	bl	80071e0 <_fflush_r>
 8007728:	2800      	cmp	r0, #0
 800772a:	d132      	bne.n	8007792 <__sfvwrite_r+0x166>
 800772c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007730:	44aa      	add	sl, r5
 8007732:	ebab 0b05 	sub.w	fp, fp, r5
 8007736:	1b5d      	subs	r5, r3, r5
 8007738:	f8c8 5008 	str.w	r5, [r8, #8]
 800773c:	2d00      	cmp	r5, #0
 800773e:	d1bf      	bne.n	80076c0 <__sfvwrite_r+0x94>
 8007740:	e77b      	b.n	800763a <__sfvwrite_r+0xe>
 8007742:	4699      	mov	r9, r3
 8007744:	469a      	mov	sl, r3
 8007746:	f1ba 0f00 	cmp.w	sl, #0
 800774a:	d027      	beq.n	800779c <__sfvwrite_r+0x170>
 800774c:	89a2      	ldrh	r2, [r4, #12]
 800774e:	68a5      	ldr	r5, [r4, #8]
 8007750:	0591      	lsls	r1, r2, #22
 8007752:	d565      	bpl.n	8007820 <__sfvwrite_r+0x1f4>
 8007754:	45aa      	cmp	sl, r5
 8007756:	d33b      	bcc.n	80077d0 <__sfvwrite_r+0x1a4>
 8007758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800775c:	d036      	beq.n	80077cc <__sfvwrite_r+0x1a0>
 800775e:	6921      	ldr	r1, [r4, #16]
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	1a5b      	subs	r3, r3, r1
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	6963      	ldr	r3, [r4, #20]
 8007768:	2002      	movs	r0, #2
 800776a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800776e:	fb93 fbf0 	sdiv	fp, r3, r0
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	1c58      	adds	r0, r3, #1
 8007776:	4450      	add	r0, sl
 8007778:	4583      	cmp	fp, r0
 800777a:	bf38      	it	cc
 800777c:	4683      	movcc	fp, r0
 800777e:	0553      	lsls	r3, r2, #21
 8007780:	d53e      	bpl.n	8007800 <__sfvwrite_r+0x1d4>
 8007782:	4659      	mov	r1, fp
 8007784:	4638      	mov	r0, r7
 8007786:	f000 f943 	bl	8007a10 <_malloc_r>
 800778a:	4605      	mov	r5, r0
 800778c:	b950      	cbnz	r0, 80077a4 <__sfvwrite_r+0x178>
 800778e:	230c      	movs	r3, #12
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	e782      	b.n	80076a2 <__sfvwrite_r+0x76>
 800779c:	e896 0600 	ldmia.w	r6, {r9, sl}
 80077a0:	3608      	adds	r6, #8
 80077a2:	e7d0      	b.n	8007746 <__sfvwrite_r+0x11a>
 80077a4:	9a01      	ldr	r2, [sp, #4]
 80077a6:	6921      	ldr	r1, [r4, #16]
 80077a8:	f000 fb40 	bl	8007e2c <memcpy>
 80077ac:	89a2      	ldrh	r2, [r4, #12]
 80077ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80077b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077b6:	81a2      	strh	r2, [r4, #12]
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	6125      	str	r5, [r4, #16]
 80077bc:	441d      	add	r5, r3
 80077be:	ebab 0303 	sub.w	r3, fp, r3
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	f8c4 b014 	str.w	fp, [r4, #20]
 80077c8:	4655      	mov	r5, sl
 80077ca:	60a3      	str	r3, [r4, #8]
 80077cc:	45aa      	cmp	sl, r5
 80077ce:	d200      	bcs.n	80077d2 <__sfvwrite_r+0x1a6>
 80077d0:	4655      	mov	r5, sl
 80077d2:	462a      	mov	r2, r5
 80077d4:	4649      	mov	r1, r9
 80077d6:	6820      	ldr	r0, [r4, #0]
 80077d8:	f000 fb33 	bl	8007e42 <memmove>
 80077dc:	68a3      	ldr	r3, [r4, #8]
 80077de:	1b5b      	subs	r3, r3, r5
 80077e0:	60a3      	str	r3, [r4, #8]
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	441d      	add	r5, r3
 80077e6:	6025      	str	r5, [r4, #0]
 80077e8:	4655      	mov	r5, sl
 80077ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077ee:	44a9      	add	r9, r5
 80077f0:	ebaa 0a05 	sub.w	sl, sl, r5
 80077f4:	1b5d      	subs	r5, r3, r5
 80077f6:	f8c8 5008 	str.w	r5, [r8, #8]
 80077fa:	2d00      	cmp	r5, #0
 80077fc:	d1a3      	bne.n	8007746 <__sfvwrite_r+0x11a>
 80077fe:	e71c      	b.n	800763a <__sfvwrite_r+0xe>
 8007800:	465a      	mov	r2, fp
 8007802:	4638      	mov	r0, r7
 8007804:	f000 fe14 	bl	8008430 <_realloc_r>
 8007808:	4605      	mov	r5, r0
 800780a:	2800      	cmp	r0, #0
 800780c:	d1d4      	bne.n	80077b8 <__sfvwrite_r+0x18c>
 800780e:	6921      	ldr	r1, [r4, #16]
 8007810:	4638      	mov	r0, r7
 8007812:	f7ff fe4f 	bl	80074b4 <_free_r>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	e7b6      	b.n	800778e <__sfvwrite_r+0x162>
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	4298      	cmp	r0, r3
 8007826:	d802      	bhi.n	800782e <__sfvwrite_r+0x202>
 8007828:	6962      	ldr	r2, [r4, #20]
 800782a:	4592      	cmp	sl, r2
 800782c:	d215      	bcs.n	800785a <__sfvwrite_r+0x22e>
 800782e:	4555      	cmp	r5, sl
 8007830:	bf28      	it	cs
 8007832:	4655      	movcs	r5, sl
 8007834:	462a      	mov	r2, r5
 8007836:	4649      	mov	r1, r9
 8007838:	f000 fb03 	bl	8007e42 <memmove>
 800783c:	68a3      	ldr	r3, [r4, #8]
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	1b5b      	subs	r3, r3, r5
 8007842:	442a      	add	r2, r5
 8007844:	60a3      	str	r3, [r4, #8]
 8007846:	6022      	str	r2, [r4, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1ce      	bne.n	80077ea <__sfvwrite_r+0x1be>
 800784c:	4621      	mov	r1, r4
 800784e:	4638      	mov	r0, r7
 8007850:	f7ff fcc6 	bl	80071e0 <_fflush_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	d0c8      	beq.n	80077ea <__sfvwrite_r+0x1be>
 8007858:	e79b      	b.n	8007792 <__sfvwrite_r+0x166>
 800785a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800785e:	4553      	cmp	r3, sl
 8007860:	bf28      	it	cs
 8007862:	4653      	movcs	r3, sl
 8007864:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007866:	fb93 f3f2 	sdiv	r3, r3, r2
 800786a:	6a21      	ldr	r1, [r4, #32]
 800786c:	4353      	muls	r3, r2
 800786e:	4638      	mov	r0, r7
 8007870:	464a      	mov	r2, r9
 8007872:	47a8      	blx	r5
 8007874:	1e05      	subs	r5, r0, #0
 8007876:	dcb8      	bgt.n	80077ea <__sfvwrite_r+0x1be>
 8007878:	e78b      	b.n	8007792 <__sfvwrite_r+0x166>
 800787a:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800787e:	2000      	movs	r0, #0
 8007880:	3608      	adds	r6, #8
 8007882:	e71d      	b.n	80076c0 <__sfvwrite_r+0x94>
 8007884:	f10b 0901 	add.w	r9, fp, #1
 8007888:	e72a      	b.n	80076e0 <__sfvwrite_r+0xb4>
 800788a:	4293      	cmp	r3, r2
 800788c:	db09      	blt.n	80078a2 <__sfvwrite_r+0x276>
 800788e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007890:	6a21      	ldr	r1, [r4, #32]
 8007892:	4613      	mov	r3, r2
 8007894:	4638      	mov	r0, r7
 8007896:	4652      	mov	r2, sl
 8007898:	47a8      	blx	r5
 800789a:	1e05      	subs	r5, r0, #0
 800789c:	f73f af3c 	bgt.w	8007718 <__sfvwrite_r+0xec>
 80078a0:	e777      	b.n	8007792 <__sfvwrite_r+0x166>
 80078a2:	461a      	mov	r2, r3
 80078a4:	4651      	mov	r1, sl
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	f000 facb 	bl	8007e42 <memmove>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	68a2      	ldr	r2, [r4, #8]
 80078b0:	1ad2      	subs	r2, r2, r3
 80078b2:	60a2      	str	r2, [r4, #8]
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	441a      	add	r2, r3
 80078b8:	6022      	str	r2, [r4, #0]
 80078ba:	461d      	mov	r5, r3
 80078bc:	e72c      	b.n	8007718 <__sfvwrite_r+0xec>
 80078be:	2001      	movs	r0, #1
 80078c0:	e734      	b.n	800772c <__sfvwrite_r+0x100>
 80078c2:	bf00      	nop
 80078c4:	7ffffc00 	.word	0x7ffffc00

080078c8 <_fwalk_reent>:
 80078c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078cc:	4680      	mov	r8, r0
 80078ce:	4689      	mov	r9, r1
 80078d0:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80078d4:	2600      	movs	r6, #0
 80078d6:	b914      	cbnz	r4, 80078de <_fwalk_reent+0x16>
 80078d8:	4630      	mov	r0, r6
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	68a5      	ldr	r5, [r4, #8]
 80078e0:	6867      	ldr	r7, [r4, #4]
 80078e2:	3f01      	subs	r7, #1
 80078e4:	d501      	bpl.n	80078ea <_fwalk_reent+0x22>
 80078e6:	6824      	ldr	r4, [r4, #0]
 80078e8:	e7f5      	b.n	80078d6 <_fwalk_reent+0xe>
 80078ea:	89ab      	ldrh	r3, [r5, #12]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d907      	bls.n	8007900 <_fwalk_reent+0x38>
 80078f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078f4:	3301      	adds	r3, #1
 80078f6:	d003      	beq.n	8007900 <_fwalk_reent+0x38>
 80078f8:	4629      	mov	r1, r5
 80078fa:	4640      	mov	r0, r8
 80078fc:	47c8      	blx	r9
 80078fe:	4306      	orrs	r6, r0
 8007900:	3568      	adds	r5, #104	; 0x68
 8007902:	e7ee      	b.n	80078e2 <_fwalk_reent+0x1a>

08007904 <_localeconv_r>:
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <_localeconv_r+0x14>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a18      	ldr	r0, [r3, #32]
 800790a:	4b04      	ldr	r3, [pc, #16]	; (800791c <_localeconv_r+0x18>)
 800790c:	2800      	cmp	r0, #0
 800790e:	bf08      	it	eq
 8007910:	4618      	moveq	r0, r3
 8007912:	30f0      	adds	r0, #240	; 0xf0
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	2000001c 	.word	0x2000001c
 800791c:	20000520 	.word	0x20000520

08007920 <__retarget_lock_init_recursive>:
 8007920:	4770      	bx	lr

08007922 <__retarget_lock_close_recursive>:
 8007922:	4770      	bx	lr

08007924 <__retarget_lock_acquire_recursive>:
 8007924:	4770      	bx	lr

08007926 <__retarget_lock_release_recursive>:
 8007926:	4770      	bx	lr

08007928 <__swhatbuf_r>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	460e      	mov	r6, r1
 800792c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007930:	2900      	cmp	r1, #0
 8007932:	b090      	sub	sp, #64	; 0x40
 8007934:	4614      	mov	r4, r2
 8007936:	461d      	mov	r5, r3
 8007938:	da09      	bge.n	800794e <__swhatbuf_r+0x26>
 800793a:	89b3      	ldrh	r3, [r6, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007942:	602a      	str	r2, [r5, #0]
 8007944:	d116      	bne.n	8007974 <__swhatbuf_r+0x4c>
 8007946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	e015      	b.n	800797a <__swhatbuf_r+0x52>
 800794e:	aa01      	add	r2, sp, #4
 8007950:	f001 f916 	bl	8008b80 <_fstat_r>
 8007954:	2800      	cmp	r0, #0
 8007956:	dbf0      	blt.n	800793a <__swhatbuf_r+0x12>
 8007958:	9a02      	ldr	r2, [sp, #8]
 800795a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800795e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007962:	425a      	negs	r2, r3
 8007964:	415a      	adcs	r2, r3
 8007966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796a:	602a      	str	r2, [r5, #0]
 800796c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	e002      	b.n	800797a <__swhatbuf_r+0x52>
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	4610      	mov	r0, r2
 800797a:	b010      	add	sp, #64	; 0x40
 800797c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007980 <__smakebuf_r>:
 8007980:	898b      	ldrh	r3, [r1, #12]
 8007982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007984:	079d      	lsls	r5, r3, #30
 8007986:	4606      	mov	r6, r0
 8007988:	460c      	mov	r4, r1
 800798a:	d507      	bpl.n	800799c <__smakebuf_r+0x1c>
 800798c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	2301      	movs	r3, #1
 8007996:	6163      	str	r3, [r4, #20]
 8007998:	b002      	add	sp, #8
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	ab01      	add	r3, sp, #4
 800799e:	466a      	mov	r2, sp
 80079a0:	f7ff ffc2 	bl	8007928 <__swhatbuf_r>
 80079a4:	9900      	ldr	r1, [sp, #0]
 80079a6:	4605      	mov	r5, r0
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f831 	bl	8007a10 <_malloc_r>
 80079ae:	b948      	cbnz	r0, 80079c4 <__smakebuf_r+0x44>
 80079b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b4:	059a      	lsls	r2, r3, #22
 80079b6:	d4ef      	bmi.n	8007998 <__smakebuf_r+0x18>
 80079b8:	f023 0303 	bic.w	r3, r3, #3
 80079bc:	f043 0302 	orr.w	r3, r3, #2
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	e7e3      	b.n	800798c <__smakebuf_r+0xc>
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <__smakebuf_r+0x7c>)
 80079c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	6020      	str	r0, [r4, #0]
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	9b00      	ldr	r3, [sp, #0]
 80079d4:	6163      	str	r3, [r4, #20]
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	6120      	str	r0, [r4, #16]
 80079da:	b15b      	cbz	r3, 80079f4 <__smakebuf_r+0x74>
 80079dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e0:	4630      	mov	r0, r6
 80079e2:	f001 f8df 	bl	8008ba4 <_isatty_r>
 80079e6:	b128      	cbz	r0, 80079f4 <__smakebuf_r+0x74>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	431d      	orrs	r5, r3
 80079f8:	81a5      	strh	r5, [r4, #12]
 80079fa:	e7cd      	b.n	8007998 <__smakebuf_r+0x18>
 80079fc:	08007259 	.word	0x08007259

08007a00 <malloc>:
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <malloc+0xc>)
 8007a02:	4601      	mov	r1, r0
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	f000 b803 	b.w	8007a10 <_malloc_r>
 8007a0a:	bf00      	nop
 8007a0c:	2000001c 	.word	0x2000001c

08007a10 <_malloc_r>:
 8007a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	f101 040b 	add.w	r4, r1, #11
 8007a18:	2c16      	cmp	r4, #22
 8007a1a:	4681      	mov	r9, r0
 8007a1c:	d907      	bls.n	8007a2e <_malloc_r+0x1e>
 8007a1e:	f034 0407 	bics.w	r4, r4, #7
 8007a22:	d505      	bpl.n	8007a30 <_malloc_r+0x20>
 8007a24:	230c      	movs	r3, #12
 8007a26:	f8c9 3000 	str.w	r3, [r9]
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	e131      	b.n	8007c92 <_malloc_r+0x282>
 8007a2e:	2410      	movs	r4, #16
 8007a30:	428c      	cmp	r4, r1
 8007a32:	d3f7      	bcc.n	8007a24 <_malloc_r+0x14>
 8007a34:	4648      	mov	r0, r9
 8007a36:	f000 fa1f 	bl	8007e78 <__malloc_lock>
 8007a3a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007a3e:	4d9c      	ldr	r5, [pc, #624]	; (8007cb0 <_malloc_r+0x2a0>)
 8007a40:	d236      	bcs.n	8007ab0 <_malloc_r+0xa0>
 8007a42:	f104 0208 	add.w	r2, r4, #8
 8007a46:	442a      	add	r2, r5
 8007a48:	f1a2 0108 	sub.w	r1, r2, #8
 8007a4c:	6856      	ldr	r6, [r2, #4]
 8007a4e:	428e      	cmp	r6, r1
 8007a50:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007a54:	d102      	bne.n	8007a5c <_malloc_r+0x4c>
 8007a56:	68d6      	ldr	r6, [r2, #12]
 8007a58:	42b2      	cmp	r2, r6
 8007a5a:	d010      	beq.n	8007a7e <_malloc_r+0x6e>
 8007a5c:	6873      	ldr	r3, [r6, #4]
 8007a5e:	68f2      	ldr	r2, [r6, #12]
 8007a60:	68b1      	ldr	r1, [r6, #8]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60ca      	str	r2, [r1, #12]
 8007a68:	4433      	add	r3, r6
 8007a6a:	6091      	str	r1, [r2, #8]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	605a      	str	r2, [r3, #4]
 8007a74:	4648      	mov	r0, r9
 8007a76:	f000 fa05 	bl	8007e84 <__malloc_unlock>
 8007a7a:	3608      	adds	r6, #8
 8007a7c:	e109      	b.n	8007c92 <_malloc_r+0x282>
 8007a7e:	3302      	adds	r3, #2
 8007a80:	4a8c      	ldr	r2, [pc, #560]	; (8007cb4 <_malloc_r+0x2a4>)
 8007a82:	692e      	ldr	r6, [r5, #16]
 8007a84:	4296      	cmp	r6, r2
 8007a86:	4611      	mov	r1, r2
 8007a88:	d06d      	beq.n	8007b66 <_malloc_r+0x156>
 8007a8a:	6870      	ldr	r0, [r6, #4]
 8007a8c:	f020 0003 	bic.w	r0, r0, #3
 8007a90:	1b07      	subs	r7, r0, r4
 8007a92:	2f0f      	cmp	r7, #15
 8007a94:	dd47      	ble.n	8007b26 <_malloc_r+0x116>
 8007a96:	1933      	adds	r3, r6, r4
 8007a98:	f044 0401 	orr.w	r4, r4, #1
 8007a9c:	6074      	str	r4, [r6, #4]
 8007a9e:	616b      	str	r3, [r5, #20]
 8007aa0:	612b      	str	r3, [r5, #16]
 8007aa2:	60da      	str	r2, [r3, #12]
 8007aa4:	609a      	str	r2, [r3, #8]
 8007aa6:	f047 0201 	orr.w	r2, r7, #1
 8007aaa:	605a      	str	r2, [r3, #4]
 8007aac:	5037      	str	r7, [r6, r0]
 8007aae:	e7e1      	b.n	8007a74 <_malloc_r+0x64>
 8007ab0:	0a63      	lsrs	r3, r4, #9
 8007ab2:	d02a      	beq.n	8007b0a <_malloc_r+0xfa>
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d812      	bhi.n	8007ade <_malloc_r+0xce>
 8007ab8:	09a3      	lsrs	r3, r4, #6
 8007aba:	3338      	adds	r3, #56	; 0x38
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007ac2:	f1a2 0008 	sub.w	r0, r2, #8
 8007ac6:	6856      	ldr	r6, [r2, #4]
 8007ac8:	4286      	cmp	r6, r0
 8007aca:	d006      	beq.n	8007ada <_malloc_r+0xca>
 8007acc:	6872      	ldr	r2, [r6, #4]
 8007ace:	f022 0203 	bic.w	r2, r2, #3
 8007ad2:	1b11      	subs	r1, r2, r4
 8007ad4:	290f      	cmp	r1, #15
 8007ad6:	dd1c      	ble.n	8007b12 <_malloc_r+0x102>
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	3301      	adds	r3, #1
 8007adc:	e7d0      	b.n	8007a80 <_malloc_r+0x70>
 8007ade:	2b14      	cmp	r3, #20
 8007ae0:	d801      	bhi.n	8007ae6 <_malloc_r+0xd6>
 8007ae2:	335b      	adds	r3, #91	; 0x5b
 8007ae4:	e7ea      	b.n	8007abc <_malloc_r+0xac>
 8007ae6:	2b54      	cmp	r3, #84	; 0x54
 8007ae8:	d802      	bhi.n	8007af0 <_malloc_r+0xe0>
 8007aea:	0b23      	lsrs	r3, r4, #12
 8007aec:	336e      	adds	r3, #110	; 0x6e
 8007aee:	e7e5      	b.n	8007abc <_malloc_r+0xac>
 8007af0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007af4:	d802      	bhi.n	8007afc <_malloc_r+0xec>
 8007af6:	0be3      	lsrs	r3, r4, #15
 8007af8:	3377      	adds	r3, #119	; 0x77
 8007afa:	e7df      	b.n	8007abc <_malloc_r+0xac>
 8007afc:	f240 5254 	movw	r2, #1364	; 0x554
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d804      	bhi.n	8007b0e <_malloc_r+0xfe>
 8007b04:	0ca3      	lsrs	r3, r4, #18
 8007b06:	337c      	adds	r3, #124	; 0x7c
 8007b08:	e7d8      	b.n	8007abc <_malloc_r+0xac>
 8007b0a:	233f      	movs	r3, #63	; 0x3f
 8007b0c:	e7d6      	b.n	8007abc <_malloc_r+0xac>
 8007b0e:	237e      	movs	r3, #126	; 0x7e
 8007b10:	e7d4      	b.n	8007abc <_malloc_r+0xac>
 8007b12:	2900      	cmp	r1, #0
 8007b14:	68f1      	ldr	r1, [r6, #12]
 8007b16:	db04      	blt.n	8007b22 <_malloc_r+0x112>
 8007b18:	68b3      	ldr	r3, [r6, #8]
 8007b1a:	60d9      	str	r1, [r3, #12]
 8007b1c:	608b      	str	r3, [r1, #8]
 8007b1e:	18b3      	adds	r3, r6, r2
 8007b20:	e7a4      	b.n	8007a6c <_malloc_r+0x5c>
 8007b22:	460e      	mov	r6, r1
 8007b24:	e7d0      	b.n	8007ac8 <_malloc_r+0xb8>
 8007b26:	2f00      	cmp	r7, #0
 8007b28:	616a      	str	r2, [r5, #20]
 8007b2a:	612a      	str	r2, [r5, #16]
 8007b2c:	db05      	blt.n	8007b3a <_malloc_r+0x12a>
 8007b2e:	4430      	add	r0, r6
 8007b30:	6843      	ldr	r3, [r0, #4]
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	6043      	str	r3, [r0, #4]
 8007b38:	e79c      	b.n	8007a74 <_malloc_r+0x64>
 8007b3a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007b3e:	d244      	bcs.n	8007bca <_malloc_r+0x1ba>
 8007b40:	08c0      	lsrs	r0, r0, #3
 8007b42:	1087      	asrs	r7, r0, #2
 8007b44:	2201      	movs	r2, #1
 8007b46:	fa02 f707 	lsl.w	r7, r2, r7
 8007b4a:	686a      	ldr	r2, [r5, #4]
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	433a      	orrs	r2, r7
 8007b50:	606a      	str	r2, [r5, #4]
 8007b52:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007b56:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8007b5a:	60b7      	str	r7, [r6, #8]
 8007b5c:	3a08      	subs	r2, #8
 8007b5e:	60f2      	str	r2, [r6, #12]
 8007b60:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007b64:	60fe      	str	r6, [r7, #12]
 8007b66:	2001      	movs	r0, #1
 8007b68:	109a      	asrs	r2, r3, #2
 8007b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b6e:	6868      	ldr	r0, [r5, #4]
 8007b70:	4282      	cmp	r2, r0
 8007b72:	f200 80a1 	bhi.w	8007cb8 <_malloc_r+0x2a8>
 8007b76:	4202      	tst	r2, r0
 8007b78:	d106      	bne.n	8007b88 <_malloc_r+0x178>
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	0052      	lsls	r2, r2, #1
 8007b80:	4202      	tst	r2, r0
 8007b82:	f103 0304 	add.w	r3, r3, #4
 8007b86:	d0fa      	beq.n	8007b7e <_malloc_r+0x16e>
 8007b88:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007b8c:	46e0      	mov	r8, ip
 8007b8e:	469e      	mov	lr, r3
 8007b90:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007b94:	4546      	cmp	r6, r8
 8007b96:	d153      	bne.n	8007c40 <_malloc_r+0x230>
 8007b98:	f10e 0e01 	add.w	lr, lr, #1
 8007b9c:	f01e 0f03 	tst.w	lr, #3
 8007ba0:	f108 0808 	add.w	r8, r8, #8
 8007ba4:	d1f4      	bne.n	8007b90 <_malloc_r+0x180>
 8007ba6:	0798      	lsls	r0, r3, #30
 8007ba8:	d179      	bne.n	8007c9e <_malloc_r+0x28e>
 8007baa:	686b      	ldr	r3, [r5, #4]
 8007bac:	ea23 0302 	bic.w	r3, r3, r2
 8007bb0:	606b      	str	r3, [r5, #4]
 8007bb2:	6868      	ldr	r0, [r5, #4]
 8007bb4:	0052      	lsls	r2, r2, #1
 8007bb6:	4282      	cmp	r2, r0
 8007bb8:	d87e      	bhi.n	8007cb8 <_malloc_r+0x2a8>
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	d07c      	beq.n	8007cb8 <_malloc_r+0x2a8>
 8007bbe:	4673      	mov	r3, lr
 8007bc0:	4202      	tst	r2, r0
 8007bc2:	d1e1      	bne.n	8007b88 <_malloc_r+0x178>
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	0052      	lsls	r2, r2, #1
 8007bc8:	e7fa      	b.n	8007bc0 <_malloc_r+0x1b0>
 8007bca:	0a42      	lsrs	r2, r0, #9
 8007bcc:	2a04      	cmp	r2, #4
 8007bce:	d815      	bhi.n	8007bfc <_malloc_r+0x1ec>
 8007bd0:	0982      	lsrs	r2, r0, #6
 8007bd2:	3238      	adds	r2, #56	; 0x38
 8007bd4:	1c57      	adds	r7, r2, #1
 8007bd6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007bda:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007bde:	45be      	cmp	lr, r7
 8007be0:	d126      	bne.n	8007c30 <_malloc_r+0x220>
 8007be2:	2001      	movs	r0, #1
 8007be4:	1092      	asrs	r2, r2, #2
 8007be6:	fa00 f202 	lsl.w	r2, r0, r2
 8007bea:	6868      	ldr	r0, [r5, #4]
 8007bec:	4310      	orrs	r0, r2
 8007bee:	6068      	str	r0, [r5, #4]
 8007bf0:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007bf4:	60b7      	str	r7, [r6, #8]
 8007bf6:	f8ce 6008 	str.w	r6, [lr, #8]
 8007bfa:	e7b3      	b.n	8007b64 <_malloc_r+0x154>
 8007bfc:	2a14      	cmp	r2, #20
 8007bfe:	d801      	bhi.n	8007c04 <_malloc_r+0x1f4>
 8007c00:	325b      	adds	r2, #91	; 0x5b
 8007c02:	e7e7      	b.n	8007bd4 <_malloc_r+0x1c4>
 8007c04:	2a54      	cmp	r2, #84	; 0x54
 8007c06:	d802      	bhi.n	8007c0e <_malloc_r+0x1fe>
 8007c08:	0b02      	lsrs	r2, r0, #12
 8007c0a:	326e      	adds	r2, #110	; 0x6e
 8007c0c:	e7e2      	b.n	8007bd4 <_malloc_r+0x1c4>
 8007c0e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007c12:	d802      	bhi.n	8007c1a <_malloc_r+0x20a>
 8007c14:	0bc2      	lsrs	r2, r0, #15
 8007c16:	3277      	adds	r2, #119	; 0x77
 8007c18:	e7dc      	b.n	8007bd4 <_malloc_r+0x1c4>
 8007c1a:	f240 5754 	movw	r7, #1364	; 0x554
 8007c1e:	42ba      	cmp	r2, r7
 8007c20:	bf9a      	itte	ls
 8007c22:	0c82      	lsrls	r2, r0, #18
 8007c24:	327c      	addls	r2, #124	; 0x7c
 8007c26:	227e      	movhi	r2, #126	; 0x7e
 8007c28:	e7d4      	b.n	8007bd4 <_malloc_r+0x1c4>
 8007c2a:	68bf      	ldr	r7, [r7, #8]
 8007c2c:	45be      	cmp	lr, r7
 8007c2e:	d004      	beq.n	8007c3a <_malloc_r+0x22a>
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	f022 0203 	bic.w	r2, r2, #3
 8007c36:	4290      	cmp	r0, r2
 8007c38:	d3f7      	bcc.n	8007c2a <_malloc_r+0x21a>
 8007c3a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8007c3e:	e7d7      	b.n	8007bf0 <_malloc_r+0x1e0>
 8007c40:	6870      	ldr	r0, [r6, #4]
 8007c42:	68f7      	ldr	r7, [r6, #12]
 8007c44:	f020 0003 	bic.w	r0, r0, #3
 8007c48:	eba0 0a04 	sub.w	sl, r0, r4
 8007c4c:	f1ba 0f0f 	cmp.w	sl, #15
 8007c50:	dd10      	ble.n	8007c74 <_malloc_r+0x264>
 8007c52:	68b2      	ldr	r2, [r6, #8]
 8007c54:	1933      	adds	r3, r6, r4
 8007c56:	f044 0401 	orr.w	r4, r4, #1
 8007c5a:	6074      	str	r4, [r6, #4]
 8007c5c:	60d7      	str	r7, [r2, #12]
 8007c5e:	60ba      	str	r2, [r7, #8]
 8007c60:	f04a 0201 	orr.w	r2, sl, #1
 8007c64:	616b      	str	r3, [r5, #20]
 8007c66:	612b      	str	r3, [r5, #16]
 8007c68:	60d9      	str	r1, [r3, #12]
 8007c6a:	6099      	str	r1, [r3, #8]
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	f846 a000 	str.w	sl, [r6, r0]
 8007c72:	e6ff      	b.n	8007a74 <_malloc_r+0x64>
 8007c74:	f1ba 0f00 	cmp.w	sl, #0
 8007c78:	db0f      	blt.n	8007c9a <_malloc_r+0x28a>
 8007c7a:	4430      	add	r0, r6
 8007c7c:	6843      	ldr	r3, [r0, #4]
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	6043      	str	r3, [r0, #4]
 8007c84:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007c88:	4648      	mov	r0, r9
 8007c8a:	60df      	str	r7, [r3, #12]
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	f000 f8f9 	bl	8007e84 <__malloc_unlock>
 8007c92:	4630      	mov	r0, r6
 8007c94:	b003      	add	sp, #12
 8007c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9a:	463e      	mov	r6, r7
 8007c9c:	e77a      	b.n	8007b94 <_malloc_r+0x184>
 8007c9e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007ca2:	4584      	cmp	ip, r0
 8007ca4:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ca8:	f43f af7d 	beq.w	8007ba6 <_malloc_r+0x196>
 8007cac:	e781      	b.n	8007bb2 <_malloc_r+0x1a2>
 8007cae:	bf00      	nop
 8007cb0:	20000110 	.word	0x20000110
 8007cb4:	20000118 	.word	0x20000118
 8007cb8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007cbc:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007cc0:	f026 0603 	bic.w	r6, r6, #3
 8007cc4:	42b4      	cmp	r4, r6
 8007cc6:	d803      	bhi.n	8007cd0 <_malloc_r+0x2c0>
 8007cc8:	1b33      	subs	r3, r6, r4
 8007cca:	2b0f      	cmp	r3, #15
 8007ccc:	f300 8096 	bgt.w	8007dfc <_malloc_r+0x3ec>
 8007cd0:	4a4f      	ldr	r2, [pc, #316]	; (8007e10 <_malloc_r+0x400>)
 8007cd2:	6817      	ldr	r7, [r2, #0]
 8007cd4:	4a4f      	ldr	r2, [pc, #316]	; (8007e14 <_malloc_r+0x404>)
 8007cd6:	6811      	ldr	r1, [r2, #0]
 8007cd8:	3710      	adds	r7, #16
 8007cda:	3101      	adds	r1, #1
 8007cdc:	eb0b 0306 	add.w	r3, fp, r6
 8007ce0:	4427      	add	r7, r4
 8007ce2:	d005      	beq.n	8007cf0 <_malloc_r+0x2e0>
 8007ce4:	494c      	ldr	r1, [pc, #304]	; (8007e18 <_malloc_r+0x408>)
 8007ce6:	3901      	subs	r1, #1
 8007ce8:	440f      	add	r7, r1
 8007cea:	3101      	adds	r1, #1
 8007cec:	4249      	negs	r1, r1
 8007cee:	400f      	ands	r7, r1
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	4648      	mov	r0, r9
 8007cf4:	9201      	str	r2, [sp, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	f000 fd1a 	bl	8008730 <_sbrk_r>
 8007cfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d00:	4680      	mov	r8, r0
 8007d02:	d056      	beq.n	8007db2 <_malloc_r+0x3a2>
 8007d04:	9b00      	ldr	r3, [sp, #0]
 8007d06:	9a01      	ldr	r2, [sp, #4]
 8007d08:	4283      	cmp	r3, r0
 8007d0a:	d901      	bls.n	8007d10 <_malloc_r+0x300>
 8007d0c:	45ab      	cmp	fp, r5
 8007d0e:	d150      	bne.n	8007db2 <_malloc_r+0x3a2>
 8007d10:	4842      	ldr	r0, [pc, #264]	; (8007e1c <_malloc_r+0x40c>)
 8007d12:	6801      	ldr	r1, [r0, #0]
 8007d14:	4543      	cmp	r3, r8
 8007d16:	eb07 0e01 	add.w	lr, r7, r1
 8007d1a:	f8c0 e000 	str.w	lr, [r0]
 8007d1e:	4940      	ldr	r1, [pc, #256]	; (8007e20 <_malloc_r+0x410>)
 8007d20:	4682      	mov	sl, r0
 8007d22:	d113      	bne.n	8007d4c <_malloc_r+0x33c>
 8007d24:	420b      	tst	r3, r1
 8007d26:	d111      	bne.n	8007d4c <_malloc_r+0x33c>
 8007d28:	68ab      	ldr	r3, [r5, #8]
 8007d2a:	443e      	add	r6, r7
 8007d2c:	f046 0601 	orr.w	r6, r6, #1
 8007d30:	605e      	str	r6, [r3, #4]
 8007d32:	4a3c      	ldr	r2, [pc, #240]	; (8007e24 <_malloc_r+0x414>)
 8007d34:	f8da 3000 	ldr.w	r3, [sl]
 8007d38:	6811      	ldr	r1, [r2, #0]
 8007d3a:	428b      	cmp	r3, r1
 8007d3c:	bf88      	it	hi
 8007d3e:	6013      	strhi	r3, [r2, #0]
 8007d40:	4a39      	ldr	r2, [pc, #228]	; (8007e28 <_malloc_r+0x418>)
 8007d42:	6811      	ldr	r1, [r2, #0]
 8007d44:	428b      	cmp	r3, r1
 8007d46:	bf88      	it	hi
 8007d48:	6013      	strhi	r3, [r2, #0]
 8007d4a:	e032      	b.n	8007db2 <_malloc_r+0x3a2>
 8007d4c:	6810      	ldr	r0, [r2, #0]
 8007d4e:	3001      	adds	r0, #1
 8007d50:	bf1b      	ittet	ne
 8007d52:	eba8 0303 	subne.w	r3, r8, r3
 8007d56:	4473      	addne	r3, lr
 8007d58:	f8c2 8000 	streq.w	r8, [r2]
 8007d5c:	f8ca 3000 	strne.w	r3, [sl]
 8007d60:	f018 0007 	ands.w	r0, r8, #7
 8007d64:	bf1c      	itt	ne
 8007d66:	f1c0 0008 	rsbne	r0, r0, #8
 8007d6a:	4480      	addne	r8, r0
 8007d6c:	4b2a      	ldr	r3, [pc, #168]	; (8007e18 <_malloc_r+0x408>)
 8007d6e:	4447      	add	r7, r8
 8007d70:	4418      	add	r0, r3
 8007d72:	400f      	ands	r7, r1
 8007d74:	1bc7      	subs	r7, r0, r7
 8007d76:	4639      	mov	r1, r7
 8007d78:	4648      	mov	r0, r9
 8007d7a:	f000 fcd9 	bl	8008730 <_sbrk_r>
 8007d7e:	1c43      	adds	r3, r0, #1
 8007d80:	bf08      	it	eq
 8007d82:	4640      	moveq	r0, r8
 8007d84:	f8da 3000 	ldr.w	r3, [sl]
 8007d88:	f8c5 8008 	str.w	r8, [r5, #8]
 8007d8c:	bf08      	it	eq
 8007d8e:	2700      	moveq	r7, #0
 8007d90:	eba0 0008 	sub.w	r0, r0, r8
 8007d94:	443b      	add	r3, r7
 8007d96:	4407      	add	r7, r0
 8007d98:	f047 0701 	orr.w	r7, r7, #1
 8007d9c:	45ab      	cmp	fp, r5
 8007d9e:	f8ca 3000 	str.w	r3, [sl]
 8007da2:	f8c8 7004 	str.w	r7, [r8, #4]
 8007da6:	d0c4      	beq.n	8007d32 <_malloc_r+0x322>
 8007da8:	2e0f      	cmp	r6, #15
 8007daa:	d810      	bhi.n	8007dce <_malloc_r+0x3be>
 8007dac:	2301      	movs	r3, #1
 8007dae:	f8c8 3004 	str.w	r3, [r8, #4]
 8007db2:	68ab      	ldr	r3, [r5, #8]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	f022 0203 	bic.w	r2, r2, #3
 8007dba:	4294      	cmp	r4, r2
 8007dbc:	eba2 0304 	sub.w	r3, r2, r4
 8007dc0:	d801      	bhi.n	8007dc6 <_malloc_r+0x3b6>
 8007dc2:	2b0f      	cmp	r3, #15
 8007dc4:	dc1a      	bgt.n	8007dfc <_malloc_r+0x3ec>
 8007dc6:	4648      	mov	r0, r9
 8007dc8:	f000 f85c 	bl	8007e84 <__malloc_unlock>
 8007dcc:	e62d      	b.n	8007a2a <_malloc_r+0x1a>
 8007dce:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007dd2:	3e0c      	subs	r6, #12
 8007dd4:	f026 0607 	bic.w	r6, r6, #7
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	4333      	orrs	r3, r6
 8007dde:	f8cb 3004 	str.w	r3, [fp, #4]
 8007de2:	eb0b 0306 	add.w	r3, fp, r6
 8007de6:	2205      	movs	r2, #5
 8007de8:	2e0f      	cmp	r6, #15
 8007dea:	605a      	str	r2, [r3, #4]
 8007dec:	609a      	str	r2, [r3, #8]
 8007dee:	d9a0      	bls.n	8007d32 <_malloc_r+0x322>
 8007df0:	f10b 0108 	add.w	r1, fp, #8
 8007df4:	4648      	mov	r0, r9
 8007df6:	f7ff fb5d 	bl	80074b4 <_free_r>
 8007dfa:	e79a      	b.n	8007d32 <_malloc_r+0x322>
 8007dfc:	68ae      	ldr	r6, [r5, #8]
 8007dfe:	f044 0201 	orr.w	r2, r4, #1
 8007e02:	4434      	add	r4, r6
 8007e04:	f043 0301 	orr.w	r3, r3, #1
 8007e08:	6072      	str	r2, [r6, #4]
 8007e0a:	60ac      	str	r4, [r5, #8]
 8007e0c:	6063      	str	r3, [r4, #4]
 8007e0e:	e631      	b.n	8007a74 <_malloc_r+0x64>
 8007e10:	20000708 	.word	0x20000708
 8007e14:	20000518 	.word	0x20000518
 8007e18:	00000080 	.word	0x00000080
 8007e1c:	200006d8 	.word	0x200006d8
 8007e20:	0000007f 	.word	0x0000007f
 8007e24:	20000700 	.word	0x20000700
 8007e28:	20000704 	.word	0x20000704

08007e2c <memcpy>:
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	1e43      	subs	r3, r0, #1
 8007e30:	440a      	add	r2, r1
 8007e32:	4291      	cmp	r1, r2
 8007e34:	d100      	bne.n	8007e38 <memcpy+0xc>
 8007e36:	bd10      	pop	{r4, pc}
 8007e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e40:	e7f7      	b.n	8007e32 <memcpy+0x6>

08007e42 <memmove>:
 8007e42:	4288      	cmp	r0, r1
 8007e44:	b510      	push	{r4, lr}
 8007e46:	eb01 0302 	add.w	r3, r1, r2
 8007e4a:	d803      	bhi.n	8007e54 <memmove+0x12>
 8007e4c:	1e42      	subs	r2, r0, #1
 8007e4e:	4299      	cmp	r1, r3
 8007e50:	d10c      	bne.n	8007e6c <memmove+0x2a>
 8007e52:	bd10      	pop	{r4, pc}
 8007e54:	4298      	cmp	r0, r3
 8007e56:	d2f9      	bcs.n	8007e4c <memmove+0xa>
 8007e58:	1881      	adds	r1, r0, r2
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	42d3      	cmn	r3, r2
 8007e5e:	d100      	bne.n	8007e62 <memmove+0x20>
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e6a:	e7f7      	b.n	8007e5c <memmove+0x1a>
 8007e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e74:	e7eb      	b.n	8007e4e <memmove+0xc>
	...

08007e78 <__malloc_lock>:
 8007e78:	4801      	ldr	r0, [pc, #4]	; (8007e80 <__malloc_lock+0x8>)
 8007e7a:	f7ff bd53 	b.w	8007924 <__retarget_lock_acquire_recursive>
 8007e7e:	bf00      	nop
 8007e80:	20000914 	.word	0x20000914

08007e84 <__malloc_unlock>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__malloc_unlock+0x8>)
 8007e86:	f7ff bd4e 	b.w	8007926 <__retarget_lock_release_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	20000914 	.word	0x20000914

08007e90 <_Balloc>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e94:	4604      	mov	r4, r0
 8007e96:	460e      	mov	r6, r1
 8007e98:	b93d      	cbnz	r5, 8007eaa <_Balloc+0x1a>
 8007e9a:	2010      	movs	r0, #16
 8007e9c:	f7ff fdb0 	bl	8007a00 <malloc>
 8007ea0:	6260      	str	r0, [r4, #36]	; 0x24
 8007ea2:	6045      	str	r5, [r0, #4]
 8007ea4:	6085      	str	r5, [r0, #8]
 8007ea6:	6005      	str	r5, [r0, #0]
 8007ea8:	60c5      	str	r5, [r0, #12]
 8007eaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007eac:	68eb      	ldr	r3, [r5, #12]
 8007eae:	b183      	cbz	r3, 8007ed2 <_Balloc+0x42>
 8007eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007eb8:	b9b8      	cbnz	r0, 8007eea <_Balloc+0x5a>
 8007eba:	2101      	movs	r1, #1
 8007ebc:	fa01 f506 	lsl.w	r5, r1, r6
 8007ec0:	1d6a      	adds	r2, r5, #5
 8007ec2:	0092      	lsls	r2, r2, #2
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fd47 	bl	8008958 <_calloc_r>
 8007eca:	b160      	cbz	r0, 8007ee6 <_Balloc+0x56>
 8007ecc:	6046      	str	r6, [r0, #4]
 8007ece:	6085      	str	r5, [r0, #8]
 8007ed0:	e00e      	b.n	8007ef0 <_Balloc+0x60>
 8007ed2:	2221      	movs	r2, #33	; 0x21
 8007ed4:	2104      	movs	r1, #4
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fd3e 	bl	8008958 <_calloc_r>
 8007edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ede:	60e8      	str	r0, [r5, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e4      	bne.n	8007eb0 <_Balloc+0x20>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	6802      	ldr	r2, [r0, #0]
 8007eec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	6103      	str	r3, [r0, #16]
 8007ef4:	60c3      	str	r3, [r0, #12]
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}

08007ef8 <_Bfree>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007efc:	4606      	mov	r6, r0
 8007efe:	460d      	mov	r5, r1
 8007f00:	b93c      	cbnz	r4, 8007f12 <_Bfree+0x1a>
 8007f02:	2010      	movs	r0, #16
 8007f04:	f7ff fd7c 	bl	8007a00 <malloc>
 8007f08:	6270      	str	r0, [r6, #36]	; 0x24
 8007f0a:	6044      	str	r4, [r0, #4]
 8007f0c:	6084      	str	r4, [r0, #8]
 8007f0e:	6004      	str	r4, [r0, #0]
 8007f10:	60c4      	str	r4, [r0, #12]
 8007f12:	b13d      	cbz	r5, 8007f24 <_Bfree+0x2c>
 8007f14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007f16:	686a      	ldr	r2, [r5, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f1e:	6029      	str	r1, [r5, #0]
 8007f20:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007f24:	bd70      	pop	{r4, r5, r6, pc}

08007f26 <__multadd>:
 8007f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	690d      	ldr	r5, [r1, #16]
 8007f2c:	461f      	mov	r7, r3
 8007f2e:	4606      	mov	r6, r0
 8007f30:	460c      	mov	r4, r1
 8007f32:	f101 0e14 	add.w	lr, r1, #20
 8007f36:	2300      	movs	r3, #0
 8007f38:	f8de 0000 	ldr.w	r0, [lr]
 8007f3c:	b281      	uxth	r1, r0
 8007f3e:	fb02 7101 	mla	r1, r2, r1, r7
 8007f42:	0c0f      	lsrs	r7, r1, #16
 8007f44:	0c00      	lsrs	r0, r0, #16
 8007f46:	fb02 7000 	mla	r0, r2, r0, r7
 8007f4a:	b289      	uxth	r1, r1
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007f52:	429d      	cmp	r5, r3
 8007f54:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007f58:	f84e 1b04 	str.w	r1, [lr], #4
 8007f5c:	dcec      	bgt.n	8007f38 <__multadd+0x12>
 8007f5e:	b1d7      	cbz	r7, 8007f96 <__multadd+0x70>
 8007f60:	68a3      	ldr	r3, [r4, #8]
 8007f62:	429d      	cmp	r5, r3
 8007f64:	db12      	blt.n	8007f8c <__multadd+0x66>
 8007f66:	6861      	ldr	r1, [r4, #4]
 8007f68:	4630      	mov	r0, r6
 8007f6a:	3101      	adds	r1, #1
 8007f6c:	f7ff ff90 	bl	8007e90 <_Balloc>
 8007f70:	6922      	ldr	r2, [r4, #16]
 8007f72:	3202      	adds	r2, #2
 8007f74:	f104 010c 	add.w	r1, r4, #12
 8007f78:	4680      	mov	r8, r0
 8007f7a:	0092      	lsls	r2, r2, #2
 8007f7c:	300c      	adds	r0, #12
 8007f7e:	f7ff ff55 	bl	8007e2c <memcpy>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7ff ffb7 	bl	8007ef8 <_Bfree>
 8007f8a:	4644      	mov	r4, r8
 8007f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f90:	3501      	adds	r5, #1
 8007f92:	615f      	str	r7, [r3, #20]
 8007f94:	6125      	str	r5, [r4, #16]
 8007f96:	4620      	mov	r0, r4
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f9c <__hi0bits>:
 8007f9c:	0c02      	lsrs	r2, r0, #16
 8007f9e:	0412      	lsls	r2, r2, #16
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	b9b2      	cbnz	r2, 8007fd2 <__hi0bits+0x36>
 8007fa4:	0403      	lsls	r3, r0, #16
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007fac:	bf04      	itt	eq
 8007fae:	021b      	lsleq	r3, r3, #8
 8007fb0:	3008      	addeq	r0, #8
 8007fb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fb6:	bf04      	itt	eq
 8007fb8:	011b      	lsleq	r3, r3, #4
 8007fba:	3004      	addeq	r0, #4
 8007fbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fc0:	bf04      	itt	eq
 8007fc2:	009b      	lsleq	r3, r3, #2
 8007fc4:	3002      	addeq	r0, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	db06      	blt.n	8007fd8 <__hi0bits+0x3c>
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	d503      	bpl.n	8007fd6 <__hi0bits+0x3a>
 8007fce:	3001      	adds	r0, #1
 8007fd0:	4770      	bx	lr
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e7e8      	b.n	8007fa8 <__hi0bits+0xc>
 8007fd6:	2020      	movs	r0, #32
 8007fd8:	4770      	bx	lr

08007fda <__lo0bits>:
 8007fda:	6803      	ldr	r3, [r0, #0]
 8007fdc:	f013 0207 	ands.w	r2, r3, #7
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	d00b      	beq.n	8007ffc <__lo0bits+0x22>
 8007fe4:	07da      	lsls	r2, r3, #31
 8007fe6:	d423      	bmi.n	8008030 <__lo0bits+0x56>
 8007fe8:	0798      	lsls	r0, r3, #30
 8007fea:	bf49      	itett	mi
 8007fec:	085b      	lsrmi	r3, r3, #1
 8007fee:	089b      	lsrpl	r3, r3, #2
 8007ff0:	2001      	movmi	r0, #1
 8007ff2:	600b      	strmi	r3, [r1, #0]
 8007ff4:	bf5c      	itt	pl
 8007ff6:	600b      	strpl	r3, [r1, #0]
 8007ff8:	2002      	movpl	r0, #2
 8007ffa:	4770      	bx	lr
 8007ffc:	b298      	uxth	r0, r3
 8007ffe:	b9a8      	cbnz	r0, 800802c <__lo0bits+0x52>
 8008000:	0c1b      	lsrs	r3, r3, #16
 8008002:	2010      	movs	r0, #16
 8008004:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008008:	bf04      	itt	eq
 800800a:	0a1b      	lsreq	r3, r3, #8
 800800c:	3008      	addeq	r0, #8
 800800e:	071a      	lsls	r2, r3, #28
 8008010:	bf04      	itt	eq
 8008012:	091b      	lsreq	r3, r3, #4
 8008014:	3004      	addeq	r0, #4
 8008016:	079a      	lsls	r2, r3, #30
 8008018:	bf04      	itt	eq
 800801a:	089b      	lsreq	r3, r3, #2
 800801c:	3002      	addeq	r0, #2
 800801e:	07da      	lsls	r2, r3, #31
 8008020:	d402      	bmi.n	8008028 <__lo0bits+0x4e>
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	d006      	beq.n	8008034 <__lo0bits+0x5a>
 8008026:	3001      	adds	r0, #1
 8008028:	600b      	str	r3, [r1, #0]
 800802a:	4770      	bx	lr
 800802c:	4610      	mov	r0, r2
 800802e:	e7e9      	b.n	8008004 <__lo0bits+0x2a>
 8008030:	2000      	movs	r0, #0
 8008032:	4770      	bx	lr
 8008034:	2020      	movs	r0, #32
 8008036:	4770      	bx	lr

08008038 <__i2b>:
 8008038:	b510      	push	{r4, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	2101      	movs	r1, #1
 800803e:	f7ff ff27 	bl	8007e90 <_Balloc>
 8008042:	2201      	movs	r2, #1
 8008044:	6144      	str	r4, [r0, #20]
 8008046:	6102      	str	r2, [r0, #16]
 8008048:	bd10      	pop	{r4, pc}

0800804a <__multiply>:
 800804a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804e:	4614      	mov	r4, r2
 8008050:	690a      	ldr	r2, [r1, #16]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	bfb8      	it	lt
 8008058:	460b      	movlt	r3, r1
 800805a:	4689      	mov	r9, r1
 800805c:	bfbc      	itt	lt
 800805e:	46a1      	movlt	r9, r4
 8008060:	461c      	movlt	r4, r3
 8008062:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008066:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800806a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800806e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008072:	eb07 060a 	add.w	r6, r7, sl
 8008076:	429e      	cmp	r6, r3
 8008078:	bfc8      	it	gt
 800807a:	3101      	addgt	r1, #1
 800807c:	f7ff ff08 	bl	8007e90 <_Balloc>
 8008080:	f100 0514 	add.w	r5, r0, #20
 8008084:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008088:	462b      	mov	r3, r5
 800808a:	2200      	movs	r2, #0
 800808c:	4543      	cmp	r3, r8
 800808e:	d316      	bcc.n	80080be <__multiply+0x74>
 8008090:	f104 0214 	add.w	r2, r4, #20
 8008094:	f109 0114 	add.w	r1, r9, #20
 8008098:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800809c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	9c01      	ldr	r4, [sp, #4]
 80080a4:	4294      	cmp	r4, r2
 80080a6:	4613      	mov	r3, r2
 80080a8:	d80c      	bhi.n	80080c4 <__multiply+0x7a>
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	dd03      	ble.n	80080b6 <__multiply+0x6c>
 80080ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d054      	beq.n	8008160 <__multiply+0x116>
 80080b6:	6106      	str	r6, [r0, #16]
 80080b8:	b003      	add	sp, #12
 80080ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080be:	f843 2b04 	str.w	r2, [r3], #4
 80080c2:	e7e3      	b.n	800808c <__multiply+0x42>
 80080c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80080c8:	3204      	adds	r2, #4
 80080ca:	f1ba 0f00 	cmp.w	sl, #0
 80080ce:	d020      	beq.n	8008112 <__multiply+0xc8>
 80080d0:	46ae      	mov	lr, r5
 80080d2:	4689      	mov	r9, r1
 80080d4:	f04f 0c00 	mov.w	ip, #0
 80080d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80080dc:	f8be b000 	ldrh.w	fp, [lr]
 80080e0:	b2a3      	uxth	r3, r4
 80080e2:	fb0a b303 	mla	r3, sl, r3, fp
 80080e6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80080ea:	f8de 4000 	ldr.w	r4, [lr]
 80080ee:	4463      	add	r3, ip
 80080f0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80080f4:	fb0a c40b 	mla	r4, sl, fp, ip
 80080f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008102:	454f      	cmp	r7, r9
 8008104:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8008108:	f84e 3b04 	str.w	r3, [lr], #4
 800810c:	d8e4      	bhi.n	80080d8 <__multiply+0x8e>
 800810e:	f8ce c000 	str.w	ip, [lr]
 8008112:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8008116:	f1b9 0f00 	cmp.w	r9, #0
 800811a:	d01f      	beq.n	800815c <__multiply+0x112>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	46ae      	mov	lr, r5
 8008120:	468c      	mov	ip, r1
 8008122:	f04f 0a00 	mov.w	sl, #0
 8008126:	f8bc 4000 	ldrh.w	r4, [ip]
 800812a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800812e:	fb09 b404 	mla	r4, r9, r4, fp
 8008132:	44a2      	add	sl, r4
 8008134:	b29b      	uxth	r3, r3
 8008136:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800813a:	f84e 3b04 	str.w	r3, [lr], #4
 800813e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008142:	f8be 4000 	ldrh.w	r4, [lr]
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	fb09 4303 	mla	r3, r9, r3, r4
 800814c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8008150:	4567      	cmp	r7, ip
 8008152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008156:	d8e6      	bhi.n	8008126 <__multiply+0xdc>
 8008158:	f8ce 3000 	str.w	r3, [lr]
 800815c:	3504      	adds	r5, #4
 800815e:	e7a0      	b.n	80080a2 <__multiply+0x58>
 8008160:	3e01      	subs	r6, #1
 8008162:	e7a2      	b.n	80080aa <__multiply+0x60>

08008164 <__pow5mult>:
 8008164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008168:	4615      	mov	r5, r2
 800816a:	f012 0203 	ands.w	r2, r2, #3
 800816e:	4606      	mov	r6, r0
 8008170:	460f      	mov	r7, r1
 8008172:	d007      	beq.n	8008184 <__pow5mult+0x20>
 8008174:	3a01      	subs	r2, #1
 8008176:	4c21      	ldr	r4, [pc, #132]	; (80081fc <__pow5mult+0x98>)
 8008178:	2300      	movs	r3, #0
 800817a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800817e:	f7ff fed2 	bl	8007f26 <__multadd>
 8008182:	4607      	mov	r7, r0
 8008184:	10ad      	asrs	r5, r5, #2
 8008186:	d035      	beq.n	80081f4 <__pow5mult+0x90>
 8008188:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800818a:	b93c      	cbnz	r4, 800819c <__pow5mult+0x38>
 800818c:	2010      	movs	r0, #16
 800818e:	f7ff fc37 	bl	8007a00 <malloc>
 8008192:	6270      	str	r0, [r6, #36]	; 0x24
 8008194:	6044      	str	r4, [r0, #4]
 8008196:	6084      	str	r4, [r0, #8]
 8008198:	6004      	str	r4, [r0, #0]
 800819a:	60c4      	str	r4, [r0, #12]
 800819c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081a4:	b94c      	cbnz	r4, 80081ba <__pow5mult+0x56>
 80081a6:	f240 2171 	movw	r1, #625	; 0x271
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ff44 	bl	8008038 <__i2b>
 80081b0:	2300      	movs	r3, #0
 80081b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80081b6:	4604      	mov	r4, r0
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	07eb      	lsls	r3, r5, #31
 80081c0:	d50a      	bpl.n	80081d8 <__pow5mult+0x74>
 80081c2:	4639      	mov	r1, r7
 80081c4:	4622      	mov	r2, r4
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff ff3f 	bl	800804a <__multiply>
 80081cc:	4639      	mov	r1, r7
 80081ce:	4681      	mov	r9, r0
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7ff fe91 	bl	8007ef8 <_Bfree>
 80081d6:	464f      	mov	r7, r9
 80081d8:	106d      	asrs	r5, r5, #1
 80081da:	d00b      	beq.n	80081f4 <__pow5mult+0x90>
 80081dc:	6820      	ldr	r0, [r4, #0]
 80081de:	b938      	cbnz	r0, 80081f0 <__pow5mult+0x8c>
 80081e0:	4622      	mov	r2, r4
 80081e2:	4621      	mov	r1, r4
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff ff30 	bl	800804a <__multiply>
 80081ea:	6020      	str	r0, [r4, #0]
 80081ec:	f8c0 8000 	str.w	r8, [r0]
 80081f0:	4604      	mov	r4, r0
 80081f2:	e7e4      	b.n	80081be <__pow5mult+0x5a>
 80081f4:	4638      	mov	r0, r7
 80081f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fa:	bf00      	nop
 80081fc:	08009148 	.word	0x08009148

08008200 <__lshift>:
 8008200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	460c      	mov	r4, r1
 8008206:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	6849      	ldr	r1, [r1, #4]
 800820e:	eb0a 0903 	add.w	r9, sl, r3
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	4607      	mov	r7, r0
 8008216:	4616      	mov	r6, r2
 8008218:	f109 0501 	add.w	r5, r9, #1
 800821c:	42ab      	cmp	r3, r5
 800821e:	db31      	blt.n	8008284 <__lshift+0x84>
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff fe35 	bl	8007e90 <_Balloc>
 8008226:	2200      	movs	r2, #0
 8008228:	4680      	mov	r8, r0
 800822a:	f100 0314 	add.w	r3, r0, #20
 800822e:	4611      	mov	r1, r2
 8008230:	4552      	cmp	r2, sl
 8008232:	db2a      	blt.n	800828a <__lshift+0x8a>
 8008234:	6920      	ldr	r0, [r4, #16]
 8008236:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800823a:	f104 0114 	add.w	r1, r4, #20
 800823e:	f016 021f 	ands.w	r2, r6, #31
 8008242:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008246:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800824a:	d022      	beq.n	8008292 <__lshift+0x92>
 800824c:	f1c2 0c20 	rsb	ip, r2, #32
 8008250:	2000      	movs	r0, #0
 8008252:	680e      	ldr	r6, [r1, #0]
 8008254:	4096      	lsls	r6, r2
 8008256:	4330      	orrs	r0, r6
 8008258:	f843 0b04 	str.w	r0, [r3], #4
 800825c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008260:	458e      	cmp	lr, r1
 8008262:	fa20 f00c 	lsr.w	r0, r0, ip
 8008266:	d8f4      	bhi.n	8008252 <__lshift+0x52>
 8008268:	6018      	str	r0, [r3, #0]
 800826a:	b108      	cbz	r0, 8008270 <__lshift+0x70>
 800826c:	f109 0502 	add.w	r5, r9, #2
 8008270:	3d01      	subs	r5, #1
 8008272:	4638      	mov	r0, r7
 8008274:	f8c8 5010 	str.w	r5, [r8, #16]
 8008278:	4621      	mov	r1, r4
 800827a:	f7ff fe3d 	bl	8007ef8 <_Bfree>
 800827e:	4640      	mov	r0, r8
 8008280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008284:	3101      	adds	r1, #1
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	e7c8      	b.n	800821c <__lshift+0x1c>
 800828a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800828e:	3201      	adds	r2, #1
 8008290:	e7ce      	b.n	8008230 <__lshift+0x30>
 8008292:	3b04      	subs	r3, #4
 8008294:	f851 2b04 	ldr.w	r2, [r1], #4
 8008298:	f843 2f04 	str.w	r2, [r3, #4]!
 800829c:	458e      	cmp	lr, r1
 800829e:	d8f9      	bhi.n	8008294 <__lshift+0x94>
 80082a0:	e7e6      	b.n	8008270 <__lshift+0x70>

080082a2 <__mcmp>:
 80082a2:	6903      	ldr	r3, [r0, #16]
 80082a4:	690a      	ldr	r2, [r1, #16]
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	b530      	push	{r4, r5, lr}
 80082aa:	d10c      	bne.n	80082c6 <__mcmp+0x24>
 80082ac:	0092      	lsls	r2, r2, #2
 80082ae:	3014      	adds	r0, #20
 80082b0:	3114      	adds	r1, #20
 80082b2:	1884      	adds	r4, r0, r2
 80082b4:	4411      	add	r1, r2
 80082b6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082ba:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082be:	4295      	cmp	r5, r2
 80082c0:	d003      	beq.n	80082ca <__mcmp+0x28>
 80082c2:	d305      	bcc.n	80082d0 <__mcmp+0x2e>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4618      	mov	r0, r3
 80082c8:	bd30      	pop	{r4, r5, pc}
 80082ca:	42a0      	cmp	r0, r4
 80082cc:	d3f3      	bcc.n	80082b6 <__mcmp+0x14>
 80082ce:	e7fa      	b.n	80082c6 <__mcmp+0x24>
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295
 80082d4:	e7f7      	b.n	80082c6 <__mcmp+0x24>

080082d6 <__mdiff>:
 80082d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082da:	460d      	mov	r5, r1
 80082dc:	4607      	mov	r7, r0
 80082de:	4611      	mov	r1, r2
 80082e0:	4628      	mov	r0, r5
 80082e2:	4614      	mov	r4, r2
 80082e4:	f7ff ffdd 	bl	80082a2 <__mcmp>
 80082e8:	1e06      	subs	r6, r0, #0
 80082ea:	d108      	bne.n	80082fe <__mdiff+0x28>
 80082ec:	4631      	mov	r1, r6
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7ff fdce 	bl	8007e90 <_Balloc>
 80082f4:	2301      	movs	r3, #1
 80082f6:	6103      	str	r3, [r0, #16]
 80082f8:	6146      	str	r6, [r0, #20]
 80082fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fe:	bfa4      	itt	ge
 8008300:	4623      	movge	r3, r4
 8008302:	462c      	movge	r4, r5
 8008304:	4638      	mov	r0, r7
 8008306:	6861      	ldr	r1, [r4, #4]
 8008308:	bfa6      	itte	ge
 800830a:	461d      	movge	r5, r3
 800830c:	2600      	movge	r6, #0
 800830e:	2601      	movlt	r6, #1
 8008310:	f7ff fdbe 	bl	8007e90 <_Balloc>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	60c6      	str	r6, [r0, #12]
 8008318:	6926      	ldr	r6, [r4, #16]
 800831a:	f105 0914 	add.w	r9, r5, #20
 800831e:	f104 0214 	add.w	r2, r4, #20
 8008322:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008326:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800832a:	f100 0514 	add.w	r5, r0, #20
 800832e:	f04f 0c00 	mov.w	ip, #0
 8008332:	f852 ab04 	ldr.w	sl, [r2], #4
 8008336:	f859 4b04 	ldr.w	r4, [r9], #4
 800833a:	fa1c f18a 	uxtah	r1, ip, sl
 800833e:	b2a3      	uxth	r3, r4
 8008340:	1ac9      	subs	r1, r1, r3
 8008342:	0c23      	lsrs	r3, r4, #16
 8008344:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008348:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800834c:	b289      	uxth	r1, r1
 800834e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008352:	45c8      	cmp	r8, r9
 8008354:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008358:	4696      	mov	lr, r2
 800835a:	f845 3b04 	str.w	r3, [r5], #4
 800835e:	d8e8      	bhi.n	8008332 <__mdiff+0x5c>
 8008360:	45be      	cmp	lr, r7
 8008362:	d305      	bcc.n	8008370 <__mdiff+0x9a>
 8008364:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008368:	b18b      	cbz	r3, 800838e <__mdiff+0xb8>
 800836a:	6106      	str	r6, [r0, #16]
 800836c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008370:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008374:	fa1c f381 	uxtah	r3, ip, r1
 8008378:	141a      	asrs	r2, r3, #16
 800837a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008384:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008388:	f845 3b04 	str.w	r3, [r5], #4
 800838c:	e7e8      	b.n	8008360 <__mdiff+0x8a>
 800838e:	3e01      	subs	r6, #1
 8008390:	e7e8      	b.n	8008364 <__mdiff+0x8e>

08008392 <__d2b>:
 8008392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008396:	460e      	mov	r6, r1
 8008398:	2101      	movs	r1, #1
 800839a:	ec59 8b10 	vmov	r8, r9, d0
 800839e:	4615      	mov	r5, r2
 80083a0:	f7ff fd76 	bl	8007e90 <_Balloc>
 80083a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80083a8:	4607      	mov	r7, r0
 80083aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ae:	bb34      	cbnz	r4, 80083fe <__d2b+0x6c>
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	f1b8 0f00 	cmp.w	r8, #0
 80083b6:	d027      	beq.n	8008408 <__d2b+0x76>
 80083b8:	a802      	add	r0, sp, #8
 80083ba:	f840 8d08 	str.w	r8, [r0, #-8]!
 80083be:	f7ff fe0c 	bl	8007fda <__lo0bits>
 80083c2:	9900      	ldr	r1, [sp, #0]
 80083c4:	b1f0      	cbz	r0, 8008404 <__d2b+0x72>
 80083c6:	9a01      	ldr	r2, [sp, #4]
 80083c8:	f1c0 0320 	rsb	r3, r0, #32
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	430b      	orrs	r3, r1
 80083d2:	40c2      	lsrs	r2, r0
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	61bb      	str	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bf14      	ite	ne
 80083e0:	2102      	movne	r1, #2
 80083e2:	2101      	moveq	r1, #1
 80083e4:	6139      	str	r1, [r7, #16]
 80083e6:	b1c4      	cbz	r4, 800841a <__d2b+0x88>
 80083e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083ec:	4404      	add	r4, r0
 80083ee:	6034      	str	r4, [r6, #0]
 80083f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083f4:	6028      	str	r0, [r5, #0]
 80083f6:	4638      	mov	r0, r7
 80083f8:	b003      	add	sp, #12
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008402:	e7d5      	b.n	80083b0 <__d2b+0x1e>
 8008404:	6179      	str	r1, [r7, #20]
 8008406:	e7e7      	b.n	80083d8 <__d2b+0x46>
 8008408:	a801      	add	r0, sp, #4
 800840a:	f7ff fde6 	bl	8007fda <__lo0bits>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	2101      	movs	r1, #1
 8008414:	6139      	str	r1, [r7, #16]
 8008416:	3020      	adds	r0, #32
 8008418:	e7e5      	b.n	80083e6 <__d2b+0x54>
 800841a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800841e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	6918      	ldr	r0, [r3, #16]
 8008426:	f7ff fdb9 	bl	8007f9c <__hi0bits>
 800842a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800842e:	e7e1      	b.n	80083f4 <__d2b+0x62>

08008430 <_realloc_r>:
 8008430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	4682      	mov	sl, r0
 8008436:	460c      	mov	r4, r1
 8008438:	b929      	cbnz	r1, 8008446 <_realloc_r+0x16>
 800843a:	4611      	mov	r1, r2
 800843c:	b003      	add	sp, #12
 800843e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008442:	f7ff bae5 	b.w	8007a10 <_malloc_r>
 8008446:	9201      	str	r2, [sp, #4]
 8008448:	f7ff fd16 	bl	8007e78 <__malloc_lock>
 800844c:	9a01      	ldr	r2, [sp, #4]
 800844e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008452:	f102 080b 	add.w	r8, r2, #11
 8008456:	f1b8 0f16 	cmp.w	r8, #22
 800845a:	f1a4 0908 	sub.w	r9, r4, #8
 800845e:	f025 0603 	bic.w	r6, r5, #3
 8008462:	d90a      	bls.n	800847a <_realloc_r+0x4a>
 8008464:	f038 0807 	bics.w	r8, r8, #7
 8008468:	d509      	bpl.n	800847e <_realloc_r+0x4e>
 800846a:	230c      	movs	r3, #12
 800846c:	f8ca 3000 	str.w	r3, [sl]
 8008470:	2700      	movs	r7, #0
 8008472:	4638      	mov	r0, r7
 8008474:	b003      	add	sp, #12
 8008476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847a:	f04f 0810 	mov.w	r8, #16
 800847e:	4590      	cmp	r8, r2
 8008480:	d3f3      	bcc.n	800846a <_realloc_r+0x3a>
 8008482:	45b0      	cmp	r8, r6
 8008484:	f340 8145 	ble.w	8008712 <_realloc_r+0x2e2>
 8008488:	4ba8      	ldr	r3, [pc, #672]	; (800872c <_realloc_r+0x2fc>)
 800848a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800848e:	eb09 0106 	add.w	r1, r9, r6
 8008492:	4571      	cmp	r1, lr
 8008494:	469b      	mov	fp, r3
 8008496:	684b      	ldr	r3, [r1, #4]
 8008498:	d005      	beq.n	80084a6 <_realloc_r+0x76>
 800849a:	f023 0001 	bic.w	r0, r3, #1
 800849e:	4408      	add	r0, r1
 80084a0:	6840      	ldr	r0, [r0, #4]
 80084a2:	07c7      	lsls	r7, r0, #31
 80084a4:	d447      	bmi.n	8008536 <_realloc_r+0x106>
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	4571      	cmp	r1, lr
 80084ac:	eb06 0703 	add.w	r7, r6, r3
 80084b0:	d119      	bne.n	80084e6 <_realloc_r+0xb6>
 80084b2:	f108 0010 	add.w	r0, r8, #16
 80084b6:	4287      	cmp	r7, r0
 80084b8:	db3f      	blt.n	800853a <_realloc_r+0x10a>
 80084ba:	eb09 0308 	add.w	r3, r9, r8
 80084be:	eba7 0708 	sub.w	r7, r7, r8
 80084c2:	f047 0701 	orr.w	r7, r7, #1
 80084c6:	f8cb 3008 	str.w	r3, [fp, #8]
 80084ca:	605f      	str	r7, [r3, #4]
 80084cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	ea43 0308 	orr.w	r3, r3, r8
 80084d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80084dc:	4650      	mov	r0, sl
 80084de:	f7ff fcd1 	bl	8007e84 <__malloc_unlock>
 80084e2:	4627      	mov	r7, r4
 80084e4:	e7c5      	b.n	8008472 <_realloc_r+0x42>
 80084e6:	45b8      	cmp	r8, r7
 80084e8:	dc27      	bgt.n	800853a <_realloc_r+0x10a>
 80084ea:	68cb      	ldr	r3, [r1, #12]
 80084ec:	688a      	ldr	r2, [r1, #8]
 80084ee:	60d3      	str	r3, [r2, #12]
 80084f0:	609a      	str	r2, [r3, #8]
 80084f2:	eba7 0008 	sub.w	r0, r7, r8
 80084f6:	280f      	cmp	r0, #15
 80084f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80084fc:	eb09 0207 	add.w	r2, r9, r7
 8008500:	f240 8109 	bls.w	8008716 <_realloc_r+0x2e6>
 8008504:	eb09 0108 	add.w	r1, r9, r8
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	ea43 0308 	orr.w	r3, r3, r8
 8008510:	f040 0001 	orr.w	r0, r0, #1
 8008514:	f8c9 3004 	str.w	r3, [r9, #4]
 8008518:	6048      	str	r0, [r1, #4]
 800851a:	6853      	ldr	r3, [r2, #4]
 800851c:	f043 0301 	orr.w	r3, r3, #1
 8008520:	6053      	str	r3, [r2, #4]
 8008522:	3108      	adds	r1, #8
 8008524:	4650      	mov	r0, sl
 8008526:	f7fe ffc5 	bl	80074b4 <_free_r>
 800852a:	4650      	mov	r0, sl
 800852c:	f7ff fcaa 	bl	8007e84 <__malloc_unlock>
 8008530:	f109 0708 	add.w	r7, r9, #8
 8008534:	e79d      	b.n	8008472 <_realloc_r+0x42>
 8008536:	2300      	movs	r3, #0
 8008538:	4619      	mov	r1, r3
 800853a:	07e8      	lsls	r0, r5, #31
 800853c:	f100 8084 	bmi.w	8008648 <_realloc_r+0x218>
 8008540:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008544:	eba9 0505 	sub.w	r5, r9, r5
 8008548:	6868      	ldr	r0, [r5, #4]
 800854a:	f020 0003 	bic.w	r0, r0, #3
 800854e:	4430      	add	r0, r6
 8008550:	2900      	cmp	r1, #0
 8008552:	d076      	beq.n	8008642 <_realloc_r+0x212>
 8008554:	4571      	cmp	r1, lr
 8008556:	d150      	bne.n	80085fa <_realloc_r+0x1ca>
 8008558:	4403      	add	r3, r0
 800855a:	f108 0110 	add.w	r1, r8, #16
 800855e:	428b      	cmp	r3, r1
 8008560:	db6f      	blt.n	8008642 <_realloc_r+0x212>
 8008562:	462f      	mov	r7, r5
 8008564:	68ea      	ldr	r2, [r5, #12]
 8008566:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800856a:	60ca      	str	r2, [r1, #12]
 800856c:	6091      	str	r1, [r2, #8]
 800856e:	1f32      	subs	r2, r6, #4
 8008570:	2a24      	cmp	r2, #36	; 0x24
 8008572:	d83b      	bhi.n	80085ec <_realloc_r+0x1bc>
 8008574:	2a13      	cmp	r2, #19
 8008576:	d936      	bls.n	80085e6 <_realloc_r+0x1b6>
 8008578:	6821      	ldr	r1, [r4, #0]
 800857a:	60a9      	str	r1, [r5, #8]
 800857c:	6861      	ldr	r1, [r4, #4]
 800857e:	60e9      	str	r1, [r5, #12]
 8008580:	2a1b      	cmp	r2, #27
 8008582:	d81c      	bhi.n	80085be <_realloc_r+0x18e>
 8008584:	f105 0210 	add.w	r2, r5, #16
 8008588:	f104 0108 	add.w	r1, r4, #8
 800858c:	6808      	ldr	r0, [r1, #0]
 800858e:	6010      	str	r0, [r2, #0]
 8008590:	6848      	ldr	r0, [r1, #4]
 8008592:	6050      	str	r0, [r2, #4]
 8008594:	6889      	ldr	r1, [r1, #8]
 8008596:	6091      	str	r1, [r2, #8]
 8008598:	eb05 0208 	add.w	r2, r5, r8
 800859c:	eba3 0308 	sub.w	r3, r3, r8
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	f8cb 2008 	str.w	r2, [fp, #8]
 80085a8:	6053      	str	r3, [r2, #4]
 80085aa:	686b      	ldr	r3, [r5, #4]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	ea43 0308 	orr.w	r3, r3, r8
 80085b4:	606b      	str	r3, [r5, #4]
 80085b6:	4650      	mov	r0, sl
 80085b8:	f7ff fc64 	bl	8007e84 <__malloc_unlock>
 80085bc:	e759      	b.n	8008472 <_realloc_r+0x42>
 80085be:	68a1      	ldr	r1, [r4, #8]
 80085c0:	6129      	str	r1, [r5, #16]
 80085c2:	68e1      	ldr	r1, [r4, #12]
 80085c4:	6169      	str	r1, [r5, #20]
 80085c6:	2a24      	cmp	r2, #36	; 0x24
 80085c8:	bf01      	itttt	eq
 80085ca:	6922      	ldreq	r2, [r4, #16]
 80085cc:	61aa      	streq	r2, [r5, #24]
 80085ce:	6960      	ldreq	r0, [r4, #20]
 80085d0:	61e8      	streq	r0, [r5, #28]
 80085d2:	bf19      	ittee	ne
 80085d4:	f105 0218 	addne.w	r2, r5, #24
 80085d8:	f104 0110 	addne.w	r1, r4, #16
 80085dc:	f105 0220 	addeq.w	r2, r5, #32
 80085e0:	f104 0118 	addeq.w	r1, r4, #24
 80085e4:	e7d2      	b.n	800858c <_realloc_r+0x15c>
 80085e6:	463a      	mov	r2, r7
 80085e8:	4621      	mov	r1, r4
 80085ea:	e7cf      	b.n	800858c <_realloc_r+0x15c>
 80085ec:	4621      	mov	r1, r4
 80085ee:	4638      	mov	r0, r7
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	f7ff fc26 	bl	8007e42 <memmove>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	e7ce      	b.n	8008598 <_realloc_r+0x168>
 80085fa:	18c7      	adds	r7, r0, r3
 80085fc:	45b8      	cmp	r8, r7
 80085fe:	dc20      	bgt.n	8008642 <_realloc_r+0x212>
 8008600:	68cb      	ldr	r3, [r1, #12]
 8008602:	688a      	ldr	r2, [r1, #8]
 8008604:	60d3      	str	r3, [r2, #12]
 8008606:	609a      	str	r2, [r3, #8]
 8008608:	4628      	mov	r0, r5
 800860a:	68eb      	ldr	r3, [r5, #12]
 800860c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008610:	60d3      	str	r3, [r2, #12]
 8008612:	609a      	str	r2, [r3, #8]
 8008614:	1f32      	subs	r2, r6, #4
 8008616:	2a24      	cmp	r2, #36	; 0x24
 8008618:	d842      	bhi.n	80086a0 <_realloc_r+0x270>
 800861a:	2a13      	cmp	r2, #19
 800861c:	d93e      	bls.n	800869c <_realloc_r+0x26c>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	60ab      	str	r3, [r5, #8]
 8008622:	6863      	ldr	r3, [r4, #4]
 8008624:	60eb      	str	r3, [r5, #12]
 8008626:	2a1b      	cmp	r2, #27
 8008628:	d824      	bhi.n	8008674 <_realloc_r+0x244>
 800862a:	f105 0010 	add.w	r0, r5, #16
 800862e:	f104 0308 	add.w	r3, r4, #8
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	6002      	str	r2, [r0, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	6042      	str	r2, [r0, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	6083      	str	r3, [r0, #8]
 800863e:	46a9      	mov	r9, r5
 8008640:	e757      	b.n	80084f2 <_realloc_r+0xc2>
 8008642:	4580      	cmp	r8, r0
 8008644:	4607      	mov	r7, r0
 8008646:	dddf      	ble.n	8008608 <_realloc_r+0x1d8>
 8008648:	4611      	mov	r1, r2
 800864a:	4650      	mov	r0, sl
 800864c:	f7ff f9e0 	bl	8007a10 <_malloc_r>
 8008650:	4607      	mov	r7, r0
 8008652:	2800      	cmp	r0, #0
 8008654:	d0af      	beq.n	80085b6 <_realloc_r+0x186>
 8008656:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800865a:	f023 0301 	bic.w	r3, r3, #1
 800865e:	f1a0 0208 	sub.w	r2, r0, #8
 8008662:	444b      	add	r3, r9
 8008664:	429a      	cmp	r2, r3
 8008666:	d11f      	bne.n	80086a8 <_realloc_r+0x278>
 8008668:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800866c:	f027 0703 	bic.w	r7, r7, #3
 8008670:	4437      	add	r7, r6
 8008672:	e73e      	b.n	80084f2 <_realloc_r+0xc2>
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	612b      	str	r3, [r5, #16]
 8008678:	68e3      	ldr	r3, [r4, #12]
 800867a:	616b      	str	r3, [r5, #20]
 800867c:	2a24      	cmp	r2, #36	; 0x24
 800867e:	bf01      	itttt	eq
 8008680:	6923      	ldreq	r3, [r4, #16]
 8008682:	61ab      	streq	r3, [r5, #24]
 8008684:	6962      	ldreq	r2, [r4, #20]
 8008686:	61ea      	streq	r2, [r5, #28]
 8008688:	bf19      	ittee	ne
 800868a:	f105 0018 	addne.w	r0, r5, #24
 800868e:	f104 0310 	addne.w	r3, r4, #16
 8008692:	f105 0020 	addeq.w	r0, r5, #32
 8008696:	f104 0318 	addeq.w	r3, r4, #24
 800869a:	e7ca      	b.n	8008632 <_realloc_r+0x202>
 800869c:	4623      	mov	r3, r4
 800869e:	e7c8      	b.n	8008632 <_realloc_r+0x202>
 80086a0:	4621      	mov	r1, r4
 80086a2:	f7ff fbce 	bl	8007e42 <memmove>
 80086a6:	e7ca      	b.n	800863e <_realloc_r+0x20e>
 80086a8:	1f32      	subs	r2, r6, #4
 80086aa:	2a24      	cmp	r2, #36	; 0x24
 80086ac:	d82d      	bhi.n	800870a <_realloc_r+0x2da>
 80086ae:	2a13      	cmp	r2, #19
 80086b0:	d928      	bls.n	8008704 <_realloc_r+0x2d4>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	6003      	str	r3, [r0, #0]
 80086b6:	6863      	ldr	r3, [r4, #4]
 80086b8:	6043      	str	r3, [r0, #4]
 80086ba:	2a1b      	cmp	r2, #27
 80086bc:	d80e      	bhi.n	80086dc <_realloc_r+0x2ac>
 80086be:	f100 0308 	add.w	r3, r0, #8
 80086c2:	f104 0208 	add.w	r2, r4, #8
 80086c6:	6811      	ldr	r1, [r2, #0]
 80086c8:	6019      	str	r1, [r3, #0]
 80086ca:	6851      	ldr	r1, [r2, #4]
 80086cc:	6059      	str	r1, [r3, #4]
 80086ce:	6892      	ldr	r2, [r2, #8]
 80086d0:	609a      	str	r2, [r3, #8]
 80086d2:	4621      	mov	r1, r4
 80086d4:	4650      	mov	r0, sl
 80086d6:	f7fe feed 	bl	80074b4 <_free_r>
 80086da:	e76c      	b.n	80085b6 <_realloc_r+0x186>
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	6083      	str	r3, [r0, #8]
 80086e0:	68e3      	ldr	r3, [r4, #12]
 80086e2:	60c3      	str	r3, [r0, #12]
 80086e4:	2a24      	cmp	r2, #36	; 0x24
 80086e6:	bf01      	itttt	eq
 80086e8:	6923      	ldreq	r3, [r4, #16]
 80086ea:	6103      	streq	r3, [r0, #16]
 80086ec:	6961      	ldreq	r1, [r4, #20]
 80086ee:	6141      	streq	r1, [r0, #20]
 80086f0:	bf19      	ittee	ne
 80086f2:	f100 0310 	addne.w	r3, r0, #16
 80086f6:	f104 0210 	addne.w	r2, r4, #16
 80086fa:	f100 0318 	addeq.w	r3, r0, #24
 80086fe:	f104 0218 	addeq.w	r2, r4, #24
 8008702:	e7e0      	b.n	80086c6 <_realloc_r+0x296>
 8008704:	4603      	mov	r3, r0
 8008706:	4622      	mov	r2, r4
 8008708:	e7dd      	b.n	80086c6 <_realloc_r+0x296>
 800870a:	4621      	mov	r1, r4
 800870c:	f7ff fb99 	bl	8007e42 <memmove>
 8008710:	e7df      	b.n	80086d2 <_realloc_r+0x2a2>
 8008712:	4637      	mov	r7, r6
 8008714:	e6ed      	b.n	80084f2 <_realloc_r+0xc2>
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	431f      	orrs	r7, r3
 800871c:	f8c9 7004 	str.w	r7, [r9, #4]
 8008720:	6853      	ldr	r3, [r2, #4]
 8008722:	f043 0301 	orr.w	r3, r3, #1
 8008726:	6053      	str	r3, [r2, #4]
 8008728:	e6ff      	b.n	800852a <_realloc_r+0xfa>
 800872a:	bf00      	nop
 800872c:	20000110 	.word	0x20000110

08008730 <_sbrk_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4c06      	ldr	r4, [pc, #24]	; (800874c <_sbrk_r+0x1c>)
 8008734:	2300      	movs	r3, #0
 8008736:	4605      	mov	r5, r0
 8008738:	4608      	mov	r0, r1
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	f000 fb1a 	bl	8008d74 <_sbrk>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_sbrk_r+0x1a>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	b103      	cbz	r3, 800874a <_sbrk_r+0x1a>
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	2000091c 	.word	0x2000091c

08008750 <__sread>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008758:	f000 fa66 	bl	8008c28 <_read_r>
 800875c:	2800      	cmp	r0, #0
 800875e:	bfab      	itete	ge
 8008760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008762:	89a3      	ldrhlt	r3, [r4, #12]
 8008764:	181b      	addge	r3, r3, r0
 8008766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800876a:	bfac      	ite	ge
 800876c:	6563      	strge	r3, [r4, #84]	; 0x54
 800876e:	81a3      	strhlt	r3, [r4, #12]
 8008770:	bd10      	pop	{r4, pc}

08008772 <__swrite>:
 8008772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008776:	461f      	mov	r7, r3
 8008778:	898b      	ldrh	r3, [r1, #12]
 800877a:	05db      	lsls	r3, r3, #23
 800877c:	4605      	mov	r5, r0
 800877e:	460c      	mov	r4, r1
 8008780:	4616      	mov	r6, r2
 8008782:	d505      	bpl.n	8008790 <__swrite+0x1e>
 8008784:	2302      	movs	r3, #2
 8008786:	2200      	movs	r2, #0
 8008788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878c:	f000 fa28 	bl	8008be0 <_lseek_r>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	4632      	mov	r2, r6
 800879e:	463b      	mov	r3, r7
 80087a0:	4628      	mov	r0, r5
 80087a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a6:	f000 b8c5 	b.w	8008934 <_write_r>

080087aa <__sseek>:
 80087aa:	b510      	push	{r4, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b2:	f000 fa15 	bl	8008be0 <_lseek_r>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	bf15      	itete	ne
 80087bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80087be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087c6:	81a3      	strheq	r3, [r4, #12]
 80087c8:	bf18      	it	ne
 80087ca:	81a3      	strhne	r3, [r4, #12]
 80087cc:	bd10      	pop	{r4, pc}

080087ce <__sclose>:
 80087ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d2:	f000 b8ef 	b.w	80089b4 <_close_r>

080087d6 <__ssprint_r>:
 80087d6:	6893      	ldr	r3, [r2, #8]
 80087d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	4681      	mov	r9, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	4617      	mov	r7, r2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d060      	beq.n	80088a8 <__ssprint_r+0xd2>
 80087e6:	f04f 0b00 	mov.w	fp, #0
 80087ea:	f8d2 a000 	ldr.w	sl, [r2]
 80087ee:	465e      	mov	r6, fp
 80087f0:	b356      	cbz	r6, 8008848 <__ssprint_r+0x72>
 80087f2:	68a3      	ldr	r3, [r4, #8]
 80087f4:	429e      	cmp	r6, r3
 80087f6:	d344      	bcc.n	8008882 <__ssprint_r+0xac>
 80087f8:	89a2      	ldrh	r2, [r4, #12]
 80087fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087fe:	d03e      	beq.n	800887e <__ssprint_r+0xa8>
 8008800:	6825      	ldr	r5, [r4, #0]
 8008802:	6921      	ldr	r1, [r4, #16]
 8008804:	eba5 0801 	sub.w	r8, r5, r1
 8008808:	6965      	ldr	r5, [r4, #20]
 800880a:	2302      	movs	r3, #2
 800880c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008810:	fb95 f5f3 	sdiv	r5, r5, r3
 8008814:	f108 0301 	add.w	r3, r8, #1
 8008818:	4433      	add	r3, r6
 800881a:	429d      	cmp	r5, r3
 800881c:	bf38      	it	cc
 800881e:	461d      	movcc	r5, r3
 8008820:	0553      	lsls	r3, r2, #21
 8008822:	d546      	bpl.n	80088b2 <__ssprint_r+0xdc>
 8008824:	4629      	mov	r1, r5
 8008826:	4648      	mov	r0, r9
 8008828:	f7ff f8f2 	bl	8007a10 <_malloc_r>
 800882c:	b998      	cbnz	r0, 8008856 <__ssprint_r+0x80>
 800882e:	230c      	movs	r3, #12
 8008830:	f8c9 3000 	str.w	r3, [r9]
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	2300      	movs	r3, #0
 800883e:	60bb      	str	r3, [r7, #8]
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	e031      	b.n	80088ac <__ssprint_r+0xd6>
 8008848:	f8da b000 	ldr.w	fp, [sl]
 800884c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008850:	f10a 0a08 	add.w	sl, sl, #8
 8008854:	e7cc      	b.n	80087f0 <__ssprint_r+0x1a>
 8008856:	4642      	mov	r2, r8
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	9001      	str	r0, [sp, #4]
 800885c:	f7ff fae6 	bl	8007e2c <memcpy>
 8008860:	89a2      	ldrh	r2, [r4, #12]
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800886c:	81a2      	strh	r2, [r4, #12]
 800886e:	6123      	str	r3, [r4, #16]
 8008870:	6165      	str	r5, [r4, #20]
 8008872:	4443      	add	r3, r8
 8008874:	eba5 0508 	sub.w	r5, r5, r8
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	60a5      	str	r5, [r4, #8]
 800887c:	4633      	mov	r3, r6
 800887e:	429e      	cmp	r6, r3
 8008880:	d200      	bcs.n	8008884 <__ssprint_r+0xae>
 8008882:	4633      	mov	r3, r6
 8008884:	461a      	mov	r2, r3
 8008886:	4659      	mov	r1, fp
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	f7ff fad9 	bl	8007e42 <memmove>
 8008890:	68a2      	ldr	r2, [r4, #8]
 8008892:	9b01      	ldr	r3, [sp, #4]
 8008894:	1ad2      	subs	r2, r2, r3
 8008896:	60a2      	str	r2, [r4, #8]
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	4413      	add	r3, r2
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	1b9e      	subs	r6, r3, r6
 80088a2:	60be      	str	r6, [r7, #8]
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	d1cf      	bne.n	8008848 <__ssprint_r+0x72>
 80088a8:	2000      	movs	r0, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	b003      	add	sp, #12
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	462a      	mov	r2, r5
 80088b4:	4648      	mov	r0, r9
 80088b6:	f7ff fdbb 	bl	8008430 <_realloc_r>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2800      	cmp	r0, #0
 80088be:	d1d6      	bne.n	800886e <__ssprint_r+0x98>
 80088c0:	6921      	ldr	r1, [r4, #16]
 80088c2:	4648      	mov	r0, r9
 80088c4:	f7fe fdf6 	bl	80074b4 <_free_r>
 80088c8:	e7b1      	b.n	800882e <__ssprint_r+0x58>

080088ca <__sprint_r>:
 80088ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ce:	6893      	ldr	r3, [r2, #8]
 80088d0:	4680      	mov	r8, r0
 80088d2:	460f      	mov	r7, r1
 80088d4:	4614      	mov	r4, r2
 80088d6:	b91b      	cbnz	r3, 80088e0 <__sprint_r+0x16>
 80088d8:	6053      	str	r3, [r2, #4]
 80088da:	4618      	mov	r0, r3
 80088dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80088e2:	049d      	lsls	r5, r3, #18
 80088e4:	d523      	bpl.n	800892e <__sprint_r+0x64>
 80088e6:	6815      	ldr	r5, [r2, #0]
 80088e8:	68a0      	ldr	r0, [r4, #8]
 80088ea:	3508      	adds	r5, #8
 80088ec:	b920      	cbnz	r0, 80088f8 <__sprint_r+0x2e>
 80088ee:	2300      	movs	r3, #0
 80088f0:	60a3      	str	r3, [r4, #8]
 80088f2:	6063      	str	r3, [r4, #4]
 80088f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80088fc:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8008900:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8008904:	f04f 0900 	mov.w	r9, #0
 8008908:	45ca      	cmp	sl, r9
 800890a:	dc05      	bgt.n	8008918 <__sprint_r+0x4e>
 800890c:	68a3      	ldr	r3, [r4, #8]
 800890e:	f026 0603 	bic.w	r6, r6, #3
 8008912:	1b9e      	subs	r6, r3, r6
 8008914:	60a6      	str	r6, [r4, #8]
 8008916:	e7e7      	b.n	80088e8 <__sprint_r+0x1e>
 8008918:	463a      	mov	r2, r7
 800891a:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800891e:	4640      	mov	r0, r8
 8008920:	f000 f905 	bl	8008b2e <_fputwc_r>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d0e2      	beq.n	80088ee <__sprint_r+0x24>
 8008928:	f109 0901 	add.w	r9, r9, #1
 800892c:	e7ec      	b.n	8008908 <__sprint_r+0x3e>
 800892e:	f7fe fe7d 	bl	800762c <__sfvwrite_r>
 8008932:	e7dc      	b.n	80088ee <__sprint_r+0x24>

08008934 <_write_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4c07      	ldr	r4, [pc, #28]	; (8008954 <_write_r+0x20>)
 8008938:	4605      	mov	r5, r0
 800893a:	4608      	mov	r0, r1
 800893c:	4611      	mov	r1, r2
 800893e:	2200      	movs	r2, #0
 8008940:	6022      	str	r2, [r4, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	f7fb fb4a 	bl	8003fdc <_write>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_write_r+0x1e>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	b103      	cbz	r3, 8008952 <_write_r+0x1e>
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	2000091c 	.word	0x2000091c

08008958 <_calloc_r>:
 8008958:	b510      	push	{r4, lr}
 800895a:	4351      	muls	r1, r2
 800895c:	f7ff f858 	bl	8007a10 <_malloc_r>
 8008960:	4604      	mov	r4, r0
 8008962:	b198      	cbz	r0, 800898c <_calloc_r+0x34>
 8008964:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008968:	f022 0203 	bic.w	r2, r2, #3
 800896c:	3a04      	subs	r2, #4
 800896e:	2a24      	cmp	r2, #36	; 0x24
 8008970:	d81b      	bhi.n	80089aa <_calloc_r+0x52>
 8008972:	2a13      	cmp	r2, #19
 8008974:	d917      	bls.n	80089a6 <_calloc_r+0x4e>
 8008976:	2100      	movs	r1, #0
 8008978:	2a1b      	cmp	r2, #27
 800897a:	6001      	str	r1, [r0, #0]
 800897c:	6041      	str	r1, [r0, #4]
 800897e:	d807      	bhi.n	8008990 <_calloc_r+0x38>
 8008980:	f100 0308 	add.w	r3, r0, #8
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	4620      	mov	r0, r4
 800898e:	bd10      	pop	{r4, pc}
 8008990:	2a24      	cmp	r2, #36	; 0x24
 8008992:	6081      	str	r1, [r0, #8]
 8008994:	60c1      	str	r1, [r0, #12]
 8008996:	bf11      	iteee	ne
 8008998:	f100 0310 	addne.w	r3, r0, #16
 800899c:	6101      	streq	r1, [r0, #16]
 800899e:	f100 0318 	addeq.w	r3, r0, #24
 80089a2:	6141      	streq	r1, [r0, #20]
 80089a4:	e7ee      	b.n	8008984 <_calloc_r+0x2c>
 80089a6:	4603      	mov	r3, r0
 80089a8:	e7ec      	b.n	8008984 <_calloc_r+0x2c>
 80089aa:	2100      	movs	r1, #0
 80089ac:	f7fb fbb6 	bl	800411c <memset>
 80089b0:	e7ec      	b.n	800898c <_calloc_r+0x34>
	...

080089b4 <_close_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4c06      	ldr	r4, [pc, #24]	; (80089d0 <_close_r+0x1c>)
 80089b8:	2300      	movs	r3, #0
 80089ba:	4605      	mov	r5, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	f7fb fb1e 	bl	8004000 <_close>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_close_r+0x1a>
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_close_r+0x1a>
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	2000091c 	.word	0x2000091c

080089d4 <_fclose_r>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	4605      	mov	r5, r0
 80089d8:	460c      	mov	r4, r1
 80089da:	b911      	cbnz	r1, 80089e2 <_fclose_r+0xe>
 80089dc:	2600      	movs	r6, #0
 80089de:	4630      	mov	r0, r6
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	b118      	cbz	r0, 80089ec <_fclose_r+0x18>
 80089e4:	6983      	ldr	r3, [r0, #24]
 80089e6:	b90b      	cbnz	r3, 80089ec <_fclose_r+0x18>
 80089e8:	f7fe fc8e 	bl	8007308 <__sinit>
 80089ec:	4b2c      	ldr	r3, [pc, #176]	; (8008aa0 <_fclose_r+0xcc>)
 80089ee:	429c      	cmp	r4, r3
 80089f0:	d114      	bne.n	8008a1c <_fclose_r+0x48>
 80089f2:	686c      	ldr	r4, [r5, #4]
 80089f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f6:	07d8      	lsls	r0, r3, #31
 80089f8:	d405      	bmi.n	8008a06 <_fclose_r+0x32>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	0599      	lsls	r1, r3, #22
 80089fe:	d402      	bmi.n	8008a06 <_fclose_r+0x32>
 8008a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a02:	f7fe ff8f 	bl	8007924 <__retarget_lock_acquire_recursive>
 8008a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0a:	b98b      	cbnz	r3, 8008a30 <_fclose_r+0x5c>
 8008a0c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8008a0e:	f016 0601 	ands.w	r6, r6, #1
 8008a12:	d1e3      	bne.n	80089dc <_fclose_r+0x8>
 8008a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a16:	f7fe ff86 	bl	8007926 <__retarget_lock_release_recursive>
 8008a1a:	e7e0      	b.n	80089de <_fclose_r+0xa>
 8008a1c:	4b21      	ldr	r3, [pc, #132]	; (8008aa4 <_fclose_r+0xd0>)
 8008a1e:	429c      	cmp	r4, r3
 8008a20:	d101      	bne.n	8008a26 <_fclose_r+0x52>
 8008a22:	68ac      	ldr	r4, [r5, #8]
 8008a24:	e7e6      	b.n	80089f4 <_fclose_r+0x20>
 8008a26:	4b20      	ldr	r3, [pc, #128]	; (8008aa8 <_fclose_r+0xd4>)
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	bf08      	it	eq
 8008a2c:	68ec      	ldreq	r4, [r5, #12]
 8008a2e:	e7e1      	b.n	80089f4 <_fclose_r+0x20>
 8008a30:	4621      	mov	r1, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	f7fe fb42 	bl	80070bc <__sflush_r>
 8008a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	b133      	cbz	r3, 8008a4c <_fclose_r+0x78>
 8008a3e:	6a21      	ldr	r1, [r4, #32]
 8008a40:	4628      	mov	r0, r5
 8008a42:	4798      	blx	r3
 8008a44:	2800      	cmp	r0, #0
 8008a46:	bfb8      	it	lt
 8008a48:	f04f 36ff 	movlt.w	r6, #4294967295
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	061a      	lsls	r2, r3, #24
 8008a50:	d503      	bpl.n	8008a5a <_fclose_r+0x86>
 8008a52:	6921      	ldr	r1, [r4, #16]
 8008a54:	4628      	mov	r0, r5
 8008a56:	f7fe fd2d 	bl	80074b4 <_free_r>
 8008a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a5c:	b141      	cbz	r1, 8008a70 <_fclose_r+0x9c>
 8008a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a62:	4299      	cmp	r1, r3
 8008a64:	d002      	beq.n	8008a6c <_fclose_r+0x98>
 8008a66:	4628      	mov	r0, r5
 8008a68:	f7fe fd24 	bl	80074b4 <_free_r>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6363      	str	r3, [r4, #52]	; 0x34
 8008a70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a72:	b121      	cbz	r1, 8008a7e <_fclose_r+0xaa>
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7fe fd1d 	bl	80074b4 <_free_r>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8008a7e:	f7fe fc2b 	bl	80072d8 <__sfp_lock_acquire>
 8008a82:	2300      	movs	r3, #0
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a88:	07db      	lsls	r3, r3, #31
 8008a8a:	d402      	bmi.n	8008a92 <_fclose_r+0xbe>
 8008a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a8e:	f7fe ff4a 	bl	8007926 <__retarget_lock_release_recursive>
 8008a92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a94:	f7fe ff45 	bl	8007922 <__retarget_lock_close_recursive>
 8008a98:	f7fe fc24 	bl	80072e4 <__sfp_lock_release>
 8008a9c:	e79f      	b.n	80089de <_fclose_r+0xa>
 8008a9e:	bf00      	nop
 8008aa0:	08009018 	.word	0x08009018
 8008aa4:	08009038 	.word	0x08009038
 8008aa8:	08008ff8 	.word	0x08008ff8

08008aac <__fputwc>:
 8008aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ab0:	4680      	mov	r8, r0
 8008ab2:	460e      	mov	r6, r1
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	f000 f885 	bl	8008bc4 <__locale_mb_cur_max>
 8008aba:	2801      	cmp	r0, #1
 8008abc:	d11c      	bne.n	8008af8 <__fputwc+0x4c>
 8008abe:	1e73      	subs	r3, r6, #1
 8008ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8008ac2:	d819      	bhi.n	8008af8 <__fputwc+0x4c>
 8008ac4:	f88d 6004 	strb.w	r6, [sp, #4]
 8008ac8:	4605      	mov	r5, r0
 8008aca:	2700      	movs	r7, #0
 8008acc:	f10d 0904 	add.w	r9, sp, #4
 8008ad0:	42af      	cmp	r7, r5
 8008ad2:	d020      	beq.n	8008b16 <__fputwc+0x6a>
 8008ad4:	68a3      	ldr	r3, [r4, #8]
 8008ad6:	f817 1009 	ldrb.w	r1, [r7, r9]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	60a3      	str	r3, [r4, #8]
 8008ae0:	da04      	bge.n	8008aec <__fputwc+0x40>
 8008ae2:	69a2      	ldr	r2, [r4, #24]
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	db1a      	blt.n	8008b1e <__fputwc+0x72>
 8008ae8:	290a      	cmp	r1, #10
 8008aea:	d018      	beq.n	8008b1e <__fputwc+0x72>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	7019      	strb	r1, [r3, #0]
 8008af4:	3701      	adds	r7, #1
 8008af6:	e7eb      	b.n	8008ad0 <__fputwc+0x24>
 8008af8:	4632      	mov	r2, r6
 8008afa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8008afe:	a901      	add	r1, sp, #4
 8008b00:	4640      	mov	r0, r8
 8008b02:	f000 f901 	bl	8008d08 <_wcrtomb_r>
 8008b06:	1c42      	adds	r2, r0, #1
 8008b08:	4605      	mov	r5, r0
 8008b0a:	d1de      	bne.n	8008aca <__fputwc+0x1e>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	4606      	mov	r6, r0
 8008b16:	4630      	mov	r0, r6
 8008b18:	b003      	add	sp, #12
 8008b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b1e:	4622      	mov	r2, r4
 8008b20:	4640      	mov	r0, r8
 8008b22:	f000 f893 	bl	8008c4c <__swbuf_r>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	d1e4      	bne.n	8008af4 <__fputwc+0x48>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	e7f3      	b.n	8008b16 <__fputwc+0x6a>

08008b2e <_fputwc_r>:
 8008b2e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	b570      	push	{r4, r5, r6, lr}
 8008b34:	4605      	mov	r5, r0
 8008b36:	460e      	mov	r6, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	d405      	bmi.n	8008b48 <_fputwc_r+0x1a>
 8008b3c:	8993      	ldrh	r3, [r2, #12]
 8008b3e:	0598      	lsls	r0, r3, #22
 8008b40:	d402      	bmi.n	8008b48 <_fputwc_r+0x1a>
 8008b42:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8008b44:	f7fe feee 	bl	8007924 <__retarget_lock_acquire_recursive>
 8008b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4c:	0499      	lsls	r1, r3, #18
 8008b4e:	d406      	bmi.n	8008b5e <_fputwc_r+0x30>
 8008b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b5c:	6663      	str	r3, [r4, #100]	; 0x64
 8008b5e:	4622      	mov	r2, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	4631      	mov	r1, r6
 8008b64:	f7ff ffa2 	bl	8008aac <__fputwc>
 8008b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b6a:	07da      	lsls	r2, r3, #31
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	d405      	bmi.n	8008b7c <_fputwc_r+0x4e>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	059b      	lsls	r3, r3, #22
 8008b74:	d402      	bmi.n	8008b7c <_fputwc_r+0x4e>
 8008b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b78:	f7fe fed5 	bl	8007926 <__retarget_lock_release_recursive>
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}

08008b80 <_fstat_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4c07      	ldr	r4, [pc, #28]	; (8008ba0 <_fstat_r+0x20>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4605      	mov	r5, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	f7fb fa3a 	bl	8004006 <_fstat>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d102      	bne.n	8008b9c <_fstat_r+0x1c>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	b103      	cbz	r3, 8008b9c <_fstat_r+0x1c>
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2000091c 	.word	0x2000091c

08008ba4 <_isatty_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4c06      	ldr	r4, [pc, #24]	; (8008bc0 <_isatty_r+0x1c>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4605      	mov	r5, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	f7fb fa2e 	bl	8004010 <_isatty>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_isatty_r+0x1a>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_isatty_r+0x1a>
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	2000091c 	.word	0x2000091c

08008bc4 <__locale_mb_cur_max>:
 8008bc4:	4b04      	ldr	r3, [pc, #16]	; (8008bd8 <__locale_mb_cur_max+0x14>)
 8008bc6:	4a05      	ldr	r2, [pc, #20]	; (8008bdc <__locale_mb_cur_max+0x18>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bf08      	it	eq
 8008bd0:	4613      	moveq	r3, r2
 8008bd2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008bd6:	4770      	bx	lr
 8008bd8:	2000001c 	.word	0x2000001c
 8008bdc:	20000520 	.word	0x20000520

08008be0 <_lseek_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4c07      	ldr	r4, [pc, #28]	; (8008c00 <_lseek_r+0x20>)
 8008be4:	4605      	mov	r5, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	6022      	str	r2, [r4, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7fb fa10 	bl	8004014 <_lseek>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_lseek_r+0x1e>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_lseek_r+0x1e>
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	2000091c 	.word	0x2000091c

08008c04 <__ascii_mbtowc>:
 8008c04:	b082      	sub	sp, #8
 8008c06:	b901      	cbnz	r1, 8008c0a <__ascii_mbtowc+0x6>
 8008c08:	a901      	add	r1, sp, #4
 8008c0a:	b142      	cbz	r2, 8008c1e <__ascii_mbtowc+0x1a>
 8008c0c:	b14b      	cbz	r3, 8008c22 <__ascii_mbtowc+0x1e>
 8008c0e:	7813      	ldrb	r3, [r2, #0]
 8008c10:	600b      	str	r3, [r1, #0]
 8008c12:	7812      	ldrb	r2, [r2, #0]
 8008c14:	1c10      	adds	r0, r2, #0
 8008c16:	bf18      	it	ne
 8008c18:	2001      	movne	r0, #1
 8008c1a:	b002      	add	sp, #8
 8008c1c:	4770      	bx	lr
 8008c1e:	4610      	mov	r0, r2
 8008c20:	e7fb      	b.n	8008c1a <__ascii_mbtowc+0x16>
 8008c22:	f06f 0001 	mvn.w	r0, #1
 8008c26:	e7f8      	b.n	8008c1a <__ascii_mbtowc+0x16>

08008c28 <_read_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4c07      	ldr	r4, [pc, #28]	; (8008c48 <_read_r+0x20>)
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	4608      	mov	r0, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f7fb f9c0 	bl	8003fbc <_read>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_read_r+0x1e>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_read_r+0x1e>
 8008c44:	602b      	str	r3, [r5, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	2000091c 	.word	0x2000091c

08008c4c <__swbuf_r>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	460e      	mov	r6, r1
 8008c50:	4614      	mov	r4, r2
 8008c52:	4605      	mov	r5, r0
 8008c54:	b118      	cbz	r0, 8008c5e <__swbuf_r+0x12>
 8008c56:	6983      	ldr	r3, [r0, #24]
 8008c58:	b90b      	cbnz	r3, 8008c5e <__swbuf_r+0x12>
 8008c5a:	f7fe fb55 	bl	8007308 <__sinit>
 8008c5e:	4b27      	ldr	r3, [pc, #156]	; (8008cfc <__swbuf_r+0xb0>)
 8008c60:	429c      	cmp	r4, r3
 8008c62:	d12f      	bne.n	8008cc4 <__swbuf_r+0x78>
 8008c64:	686c      	ldr	r4, [r5, #4]
 8008c66:	69a3      	ldr	r3, [r4, #24]
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	0719      	lsls	r1, r3, #28
 8008c6e:	d533      	bpl.n	8008cd8 <__swbuf_r+0x8c>
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d030      	beq.n	8008cd8 <__swbuf_r+0x8c>
 8008c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7a:	b2f6      	uxtb	r6, r6
 8008c7c:	049a      	lsls	r2, r3, #18
 8008c7e:	4637      	mov	r7, r6
 8008c80:	d534      	bpl.n	8008cec <__swbuf_r+0xa0>
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	1ac0      	subs	r0, r0, r3
 8008c88:	6963      	ldr	r3, [r4, #20]
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	db04      	blt.n	8008c98 <__swbuf_r+0x4c>
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	f7fe faa5 	bl	80071e0 <_fflush_r>
 8008c96:	bb28      	cbnz	r0, 8008ce4 <__swbuf_r+0x98>
 8008c98:	68a3      	ldr	r3, [r4, #8]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	701e      	strb	r6, [r3, #0]
 8008ca6:	6963      	ldr	r3, [r4, #20]
 8008ca8:	3001      	adds	r0, #1
 8008caa:	4298      	cmp	r0, r3
 8008cac:	d004      	beq.n	8008cb8 <__swbuf_r+0x6c>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	07db      	lsls	r3, r3, #31
 8008cb2:	d519      	bpl.n	8008ce8 <__swbuf_r+0x9c>
 8008cb4:	2e0a      	cmp	r6, #10
 8008cb6:	d117      	bne.n	8008ce8 <__swbuf_r+0x9c>
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7fe fa90 	bl	80071e0 <_fflush_r>
 8008cc0:	b190      	cbz	r0, 8008ce8 <__swbuf_r+0x9c>
 8008cc2:	e00f      	b.n	8008ce4 <__swbuf_r+0x98>
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <__swbuf_r+0xb4>)
 8008cc6:	429c      	cmp	r4, r3
 8008cc8:	d101      	bne.n	8008cce <__swbuf_r+0x82>
 8008cca:	68ac      	ldr	r4, [r5, #8]
 8008ccc:	e7cb      	b.n	8008c66 <__swbuf_r+0x1a>
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <__swbuf_r+0xb8>)
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	bf08      	it	eq
 8008cd4:	68ec      	ldreq	r4, [r5, #12]
 8008cd6:	e7c6      	b.n	8008c66 <__swbuf_r+0x1a>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f7fd fb24 	bl	8006328 <__swsetup_r>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d0c8      	beq.n	8008c76 <__swbuf_r+0x2a>
 8008ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ce8:	4638      	mov	r0, r7
 8008cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cf8:	6663      	str	r3, [r4, #100]	; 0x64
 8008cfa:	e7c2      	b.n	8008c82 <__swbuf_r+0x36>
 8008cfc:	08009018 	.word	0x08009018
 8008d00:	08009038 	.word	0x08009038
 8008d04:	08008ff8 	.word	0x08008ff8

08008d08 <_wcrtomb_r>:
 8008d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	461e      	mov	r6, r3
 8008d10:	460f      	mov	r7, r1
 8008d12:	4c0f      	ldr	r4, [pc, #60]	; (8008d50 <_wcrtomb_r+0x48>)
 8008d14:	b991      	cbnz	r1, 8008d3c <_wcrtomb_r+0x34>
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	490e      	ldr	r1, [pc, #56]	; (8008d54 <_wcrtomb_r+0x4c>)
 8008d1a:	6a12      	ldr	r2, [r2, #32]
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	bf08      	it	eq
 8008d20:	460a      	moveq	r2, r1
 8008d22:	a901      	add	r1, sp, #4
 8008d24:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8008d28:	463a      	mov	r2, r7
 8008d2a:	47a0      	blx	r4
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	bf01      	itttt	eq
 8008d30:	2300      	moveq	r3, #0
 8008d32:	6033      	streq	r3, [r6, #0]
 8008d34:	238a      	moveq	r3, #138	; 0x8a
 8008d36:	602b      	streq	r3, [r5, #0]
 8008d38:	b005      	add	sp, #20
 8008d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d3c:	6824      	ldr	r4, [r4, #0]
 8008d3e:	4f05      	ldr	r7, [pc, #20]	; (8008d54 <_wcrtomb_r+0x4c>)
 8008d40:	6a24      	ldr	r4, [r4, #32]
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	bf08      	it	eq
 8008d46:	463c      	moveq	r4, r7
 8008d48:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8008d4c:	e7ed      	b.n	8008d2a <_wcrtomb_r+0x22>
 8008d4e:	bf00      	nop
 8008d50:	2000001c 	.word	0x2000001c
 8008d54:	20000520 	.word	0x20000520

08008d58 <__ascii_wctomb>:
 8008d58:	b149      	cbz	r1, 8008d6e <__ascii_wctomb+0x16>
 8008d5a:	2aff      	cmp	r2, #255	; 0xff
 8008d5c:	bf85      	ittet	hi
 8008d5e:	238a      	movhi	r3, #138	; 0x8a
 8008d60:	6003      	strhi	r3, [r0, #0]
 8008d62:	700a      	strbls	r2, [r1, #0]
 8008d64:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d68:	bf98      	it	ls
 8008d6a:	2001      	movls	r0, #1
 8008d6c:	4770      	bx	lr
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4770      	bx	lr
	...

08008d74 <_sbrk>:
 8008d74:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <_sbrk+0x14>)
 8008d76:	6819      	ldr	r1, [r3, #0]
 8008d78:	4602      	mov	r2, r0
 8008d7a:	b909      	cbnz	r1, 8008d80 <_sbrk+0xc>
 8008d7c:	4903      	ldr	r1, [pc, #12]	; (8008d8c <_sbrk+0x18>)
 8008d7e:	6019      	str	r1, [r3, #0]
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	4402      	add	r2, r0
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	4770      	bx	lr
 8008d88:	2000070c 	.word	0x2000070c
 8008d8c:	20000920 	.word	0x20000920

08008d90 <_init>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr

08008d9c <_fini>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	bf00      	nop
 8008da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da2:	bc08      	pop	{r3}
 8008da4:	469e      	mov	lr, r3
 8008da6:	4770      	bx	lr
